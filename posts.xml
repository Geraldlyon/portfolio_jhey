<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jhey Tompkins Posts</title>
  <subtitle>Writing content from Jhey Tompkins.</subtitle>
  <link href="https://jhey.dev/posts.xml" rel="self"/>
  <link href="https://jhey.dev/"/>
  
  <updated>2021-06-16T12:15:15+01:00</updated>
  
  <id>https://jhey.dev</id>
  <author>
  <name>Jhey Tompkins</name>
  <email>hey@jhey.dev</email>
  </author>
  
  
  <entry>
    <title>Print.css but not how you know it – Creating a 3D CSS Printer</title>
    <link href="https://jhey.dev/writing/print-css-but-not-how-you-know-it-creating-a-3d-css-printer/"/>
    <updated>2021-06-16T12:15:15+01:00</updated>
    <id>https://jhey.dev/writing/print-css-but-not-how-you-know-it-creating-a-3d-css-printer/</id>
    <content type="html"><![CDATA[
      <p>For a while now I've been creating these 3D scenes with CSS for fun. Usually on my <a href="https://twitch.tv/jh3yy">live stream</a>.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1375639377150410758?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Each demo is an opportunity to try something different or work out ways to do things with CSS. One thing I often do is take suggestions for what we should try and make on the stream. A recent suggestion was a 3D printer. As in a &quot;3D&quot; printer as opposed to an ink/laserjet. And here's what I put together!</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1385237899126480901?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h2>Making things 3D with CSS</h2>
<p>I've wrote about <a href="https://css-tricks.com/css-in-3d-learning-to-think-in-cubes-instead-of-boxes/">making things 3D with CSS before</a>. The general gist is that most scenes are a composition of cuboids.</p>
<p>To make a cuboid, we can use CSS transforms to position the sides of a cuboid. The magic property being <code>transform-style</code>. Setting this to <code>preserve-3d</code> allows us to transform elements on the third dimension.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">*</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<div class="post__embed-container">
      <iframe loading="lazy" class="post__embed" src="https://www.youtube.com/embed/63ZFh6T_iXc" allow="encrypted-media; picture-in-picture"></iframe>
    </div>
<p>Once you create a few of these scenes, you start picking up ways to speed things up. I like to use Pug as a HTML preprocessor. The mixin ability gives me a way to create cuboids speedier. The markup examples in this article use Pug. But, for each CodePen demo you can use the “View Compiled HTML” option to see the HTML output.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token mixin"><span class="token keyword">mixin</span> <span class="token function">cuboid</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.cuboid</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">class</span><span class="token punctuation">!=</span><span class="token attr-value">attributes<span class="token punctuation">.</span>class</span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">    <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token number">0</span></span></span>
<span class="highlight-line">    <span class="token flow-control"><span class="token branch keyword">while</span> s <span class="token operator">&lt;</span> <span class="token number">6</span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token attr-class">.cuboid__side</span></span></span>
<span class="highlight-line">      <span class="token punctuation">-</span><span class="token code"> s<span class="token operator">++</span></span></span></code></pre>
<p>Using this code</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token mixin"><span class="token name function">+cuboid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"printer__top"</span><span class="token punctuation">)</span></span></span></code></pre>
<p>Would produce</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cuboid printer__top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cuboid__side<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cuboid__side<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cuboid__side<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cuboid__side<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cuboid__side<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cuboid__side<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>Then I have a set block of CSS I use to lay out the cuboids. The joy here is that we can leverage CSS custom properties to define the properties of a cuboid. As shown in the video above.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.cuboid</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  // Defaults</span>
<span class="highlight-line">  <span class="token property">--width</span><span class="token punctuation">:</span> 15<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--height</span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--depth</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 5vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid > div:nth-of-type(1)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--height<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform-origin</span><span class="token punctuation">:</span> 50% 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid > div:nth-of-type(2)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--height<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform-origin</span><span class="token punctuation">:</span> 50% 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid > div:nth-of-type(3)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--height<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid > div:nth-of-type(4)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--height<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid > div:nth-of-type(5)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--height<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid > div:nth-of-type(6)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--height<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span> * -1vmin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Using custom properties, we can control various characteristics of the cuboids, etc.</p>
<ul>
<li><code>--width</code>: The width of a cuboid on the plane</li>
<li><code>--height</code>: The height of a cuboid on the plane</li>
<li><code>--depth</code>: The depth of a cuboid on the plane</li>
<li><code>--x</code>: The X position on the plane</li>
<li><code>--y</code>: The Y position on the plane</li>
</ul>
<p>This isn't very impressive until we put the cuboid into a scene and rotate it. Again, I use custom properties to manipulate the scene whilst I work on making something. Dat.GUI comes in super handy here.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="BaKqQLJ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/BaKqQLJ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>If you inspect the demo, using the control panel updates custom CSS properties on the scene. This scoping of CSS custom properties saves a lot of repeated code and keeps things DRY.</p>
<h2>More Than One Way</h2>
<p>Much like many things in CSS, there's more than one way to do it. Often you can compose a scene from cuboids and position things as and when you need. It can get tricky to manage though. Often there's a need to group things or add some type of container.</p>
<p>Consider this example where the chair is it’s own sub-scene that can be moved around.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="QWELerg"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/QWELerg">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Many recent examples aren’t as complex. I've been reaching for extrusion. This means I'm able to map out whatever I'm making in 2D elements. For example, a helicopter I recently created.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag"><span class="token attr-class">.helicopter</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.helicopter__rotor</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.helicopter__cockpit</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.helicopter__base-light</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.helicopter__chair</span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token attr-class">.helicopter__chair-back</span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token attr-class">.helicopter__chair-bottom</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.helicopter__dashboard</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.helicopter__tail</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.helicopter__fin</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.helicopter__triblade</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.helicopter__tail-light</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.helicopter__stabilizer</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.helicopter__skids</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.helicopter__skid--left</span><span class="token attr-class">.helicopter__skid</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.helicopter__skid--right</span><span class="token attr-class">.helicopter__skid</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.helicopter__wing</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.helicopter__wing-light</span><span class="token attr-class">.helicopter__wing-light--left</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.helicopter__wing-light</span><span class="token attr-class">.helicopter__wing-light--right</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.helicopter__launchers</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.helicopter__launcher</span><span class="token attr-class">.helicopter__launcher--left</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.helicopter__launcher</span><span class="token attr-class">.helicopter__launcher--right</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.helicopter__blades</span></span></span></code></pre>
<p>Then we can drop cuboids into all the containers using the mixin. Then apply a required &quot;thickness&quot; to each cuboid. The thickness becomes dictated by scoped custom properties. This demo toggles the <code>--thickness</code> property for cuboids that make the helicopter. It gives an idea of what the 2D mapping looked like to start with.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="yLMvXQG"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/yLMvXQG">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>That's the gist of how to go about making 3D things with CSS. Digging into the code will unveil some tricks for sure. But, in general, scaffold a scene, populate with cuboids, and color the cuboids. You'll often want some different shades of a color so we can differentiate the sides of a cuboid. Any extra details are either things that we can add to a cuboid side or transforms we can apply to a cuboid. For example, rotating and moving on the Z axis.</p>
<p>Let’s consider a stripped down example.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag"><span class="token attr-class">.scene</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.extrusion</span></span></span>
<span class="highlight-line">    <span class="token mixin"><span class="token name function">+cuboid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"extrusion__cuboid"</span><span class="token punctuation">)</span></span></span></code></pre>
<p>The new CSS for creating a cuboid with extrusion could look like this. Note how we're including scoped custom properties for the color of each side too. It would be wise to drop some defaults under the <code>:root</code> here or fallback values.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.cuboid</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid__side:nth-of-type(1)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shade-one<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--thickness<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid__side:nth-of-type(2)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shade-two<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--thickness<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid__side:nth-of-type(3)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shade-three<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--thickness<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid__side:nth-of-type(4)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shade-two<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--thickness<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid__side:nth-of-type(5)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shade-three<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--thickness<span class="token punctuation">)</span> * 0.5vmin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid__side:nth-of-type(6)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shade-one<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--thickness<span class="token punctuation">)</span> * -0.5vmin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We've gone with three shades for this example. But, sometimes you may need more. This demo puts that together but allows you to change scoped custom properties. The &quot;thickness&quot; value will change the extrusion of the cuboid. The transforms and dimensions will affect the containing element with the class &quot;extrusion&quot;.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="JjWpMWb"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/JjWpMWb">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Scaffolding a Printer</h2>
<p>To start, we can scaffold out all the pieces we need. With practice this becomes more obvious. But, the general rule is trying to visualise everything as boxes. That gives you a good idea of how to break something up.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag"><span class="token attr-class">.scene</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.printer</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.printer__side</span><span class="token attr-class">.printer__side--left</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.printer__side</span><span class="token attr-class">.printer__side--right</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.printer__tray</span><span class="token attr-class">.printer__tray--bottom</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.printer__tray</span><span class="token attr-class">.printer__tray--top</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.printer__top</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.printer__back</span></span></span></code></pre>
<p>If you visualise the aim of what we're going for here. The two side pieces leave a gap in the middle. Then we have a cuboid that sits across the top and one that fills the back. Then two cuboids to make up the paper tray.</p>
<p>Once you're at that stage, it's a case of populating the cuboids which looks like this.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag"><span class="token attr-class">.scene</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.printer</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.printer__side</span><span class="token attr-class">.printer__side--left</span></span></span>
<span class="highlight-line">      <span class="token mixin"><span class="token name function">+cuboid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cuboid--side"</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.printer__side</span><span class="token attr-class">.printer__side--right</span></span></span>
<span class="highlight-line">      <span class="token mixin"><span class="token name function">+cuboid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cuboid--side"</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.printer__tray</span><span class="token attr-class">.printer__tray--bottom</span></span></span>
<span class="highlight-line">      <span class="token mixin"><span class="token name function">+cuboid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cuboid--tray"</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.printer__tray</span><span class="token attr-class">.printer__tray--top</span></span></span>
<span class="highlight-line">      <span class="token mixin"><span class="token name function">+cuboid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cuboid--tray"</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.printer__top</span></span></span>
<span class="highlight-line">      <span class="token mixin"><span class="token name function">+cuboid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cuboid--top"</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.printer__back</span></span></span>
<span class="highlight-line">      <span class="token mixin"><span class="token name function">+cuboid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cuboid--back"</span><span class="token punctuation">)</span></span></span></code></pre>
<p>Note how we're able to reuse the classnames such as <code>cuboid--side</code>. These cuboids are likely to be the same thickness and use the same colors. Their position and size gets dictated by the containing element.</p>
<p>Piecing it together, we can can get something like this.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="YzZaqrR"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/YzZaqrR">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Exploding the demo shows the different cuboids that make up the printer. If you turn off the extrusion, you can see the flat containing elements.</p>
<h2>Adding Some Detail</h2>
<p>Now. You may have noticed that there's more detail than what adding colors to each side would provide. And this comes down to finding ways to add extra detail. We've got different options depending on what we want to add.</p>
<p>If it's an image or some basic color changes, we can make use of <code>background-image</code> to layer up gradients, etc.</p>
<p>For example, the top of the printer has details and the opening of the printer. This code addresses the top side of the top cuboid. The gradient handles the opening of the printer and the details.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.cuboid--top</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--thickness</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--shade-one</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>#292929<span class="token punctuation">,</span> #292929<span class="token punctuation">)</span> 100% 50%/14% 54% no-repeat<span class="token punctuation">,</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--p-7<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--p-7<span class="token punctuation">)</span><span class="token punctuation">)</span> 40% 50%/12% 32% no-repeat<span class="token punctuation">,</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--p-7<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--p-7<span class="token punctuation">)</span><span class="token punctuation">)</span> 30% 50%/2% 12% no-repeat<span class="token punctuation">,</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--p-3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--p-3<span class="token punctuation">)</span><span class="token punctuation">)</span> 0% 50%/66% 50% no-repeat<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--p-1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>For the bear logo, we could use a <code>background-image</code> or even reach for a pseudo-element and position it.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.cuboid--top > div:nth-of-type(1):after</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 7%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> * 0.12vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> * 0.12vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://assets.codepen.io/605876/avatar.png"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>If we need to add more extensive details, then we are likely going to have to break out of using our cuboid mixin. For example, the top of our printer is going to have a preview screen using an <code>img</code> element.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag"><span class="token attr-class">.printer__top</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.cuboid</span><span class="token attr-class">.cuboid--top</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.cuboid__side</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.cuboid__side</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.cuboid__side</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.cuboid__side</span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token attr-class">.screen</span></span></span>
<span class="highlight-line">        <span class="token tag"><span class="token attr-class">.screen__preview</span></span></span>
<span class="highlight-line">          <span class="token tag">img<span class="token attr-class">.screen__preview-img</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.cuboid__side</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.cuboid__side</span></span></span></code></pre>
<p>Add some more details and we're ready to get some paper in the mix!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="poeLEjq"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/poeLEjq">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Paper Journey</h2>
<p>What's a printer without some paper? We want to animate some paper flying into the printer and getting shot out the other end.</p>
<p>We want something like this demo. Click anywhere to see a piece of paper fed into the printer and printed.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="QWpmvdb"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/QWpmvdb">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We can add a block of paper to the scene with a cuboid and then use a separate element to act as a single sheet of paper.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag"><span class="token attr-class">.paper-stack</span><span class="token attr-class">.paper-stack--bottom</span></span></span>
<span class="highlight-line">  <span class="token mixin"><span class="token name function">+cuboid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cuboid--paper"</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token attr-class">.paper-stack</span><span class="token attr-class">.paper-stack--top</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.cuboid</span><span class="token attr-class">.cuboid--paper</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.cuboid__side</span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token attr-class">.paper</span></span></span>
<span class="highlight-line">        <span class="token tag"><span class="token attr-class">.paper__flyer</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.cuboid__side</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.cuboid__side</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.cuboid__side</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.cuboid__side</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.cuboid__side</span></span></span></code></pre>
<p>But, animating the paper flying into the printer takes some trial and error. It's wise to play with different transforms in the DevTools inspector. This is a good way to see how things will look. Often, it’s easier to use wrapper elements too. We use the <code>.paper</code> element to make the transfer and then use <code>.paper__flyer</code> to animate feeding the paper.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">:root</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--load-speed</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.paper-stack--top .cuboid--paper .paper</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> transfer <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--load-speed<span class="token punctuation">)</span> * 0.5s<span class="token punctuation">)</span> ease-in-out forwards<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.paper-stack--top .cuboid--paper .paper__flyer</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> fly <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--load-speed<span class="token punctuation">)</span> * 0.5s<span class="token punctuation">)</span> ease-in-out forwards<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.paper-stack--top .cuboid--paper .paper__flyer:after</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> feed <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--load-speed<span class="token punctuation">)</span> * 0.5s<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--load-speed<span class="token punctuation">)</span> * 0.5s<span class="token punctuation">)</span> forwards<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> transfer</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -270%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>22deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> feed</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>100%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> fly</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>140%<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--height<span class="token punctuation">)</span> * 1.2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-75deg<span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span>180%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>140%<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--height<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-75deg<span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span>0%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-180deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>You'll notice that there's a fair bit of <code>calc</code> usage in there. To compose the animation timeline we can make use of CSS custom properties. Referring to a property, we can calculate the correct delays for each animation in the chain. The paper transfers and flies at the same time. One animation handles moving the container, another handles rotating the paper. Once those animations end, the paper gets fed into the printer with the <code>feed</code> animation. The animation delay is equal to the duration of the first two animations that run at the same time.</p>
<p>Run this demo where I’ve colored the container elements red and green. We make use of <code>.paper__flyer</code>'s pseudo-element to represent the piece of paper. But, the container elements do the hard work.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="XWMEgjB"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/XWMEgjB">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>You may be wondering when the paper comes out at the other end. But, in fact, the paper isn't the same element throughout. We use one element to go into the printer. And another element for the paper when it flies out of the printer. Another instance where extra elements will make our life easier.</p>
<p>The paper uses more than one element to do the loop and then the paper gets positioned to the edge of that element. Running this demo with more colored container elements shows how it's working.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="YzZaQEX"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/YzZaQEX">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Once again, it's a bit of trial and error plus thinking about how we can leverage the use of container elements. Having a container with an offset <code>transform-origin</code> allows us to create the loop.</p>
<h2>Printing</h2>
<p>We have everything in place. Now it's a case of actually printing something. To do this, we're going to add a form that allows users to pass in the URL of an image.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag">form<span class="token attr-class">.customer-form</span></span></span>
<span class="highlight-line">  <span class="token tag">label<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">for</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"print"</span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">Print URL</span></span>
<span class="highlight-line">  <span class="token tag">input<span class="token attr-id">#print</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">type</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">'url'</span> required placeholder<span class="token operator">=</span><span class="token string">"URL for Printing"</span></span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">  <span class="token tag">input<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">type</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"Print"</span></span><span class="token punctuation">)</span></span></span></span></code></pre>
<p>With some styling, we get something like this.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="wvJmqLO"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/wvJmqLO">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The native behavior of forms and the use of <code>required</code> and <code>type=&quot;url&quot;</code> means we only accept a URL. We could take this further with a <code>pattern</code> and check for certain image types. But, some good URL for random images don't include the image type. For example, &quot;https://source.unsplash.com/random&quot;.</p>
<p>Submitting our form doesn't behave as we want and also the printing animation runs once on load. A way around this would be to only run the animation when a certain class gets applied to the printer.</p>
<p>When we submit the form, we can make a request for the URL and then set the <code>src</code> for images in our scene. One image being the screen preview on the printer. The other being an image on one side of the paper. In fact, when we print, we are going to add a new element for each printed piece of paper. That way each print looks like it gets added to a pile. We can remove the piece of paper we have on load.</p>
<p>Let’s start by handling the form submission. We are going to prevent the default event and call a <code>PROCESS</code> function.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">PRINT</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">PROCESS</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">PRINT_FORM</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">PRINT_FORM</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token constant">PRINT</span><span class="token punctuation">)</span></span></code></pre>
<p>This function will handle making the request for our image source.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">let</span> printing <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">PREVIEW</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'img.screen__preview-img'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">SUBMIT</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'[type="submit"]'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">URL_INPUT</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'[type="url"]'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">PROCESS</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>printing<span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="highlight-line">  printing <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="highlight-line">  <span class="token constant">SUBMIT</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">URL_INPUT</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">PREVIEW</span><span class="token punctuation">.</span>src <span class="token operator">=</span> res<span class="token punctuation">.</span>url</span>
<span class="highlight-line">  <span class="token constant">URL_INPUT</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We also set a <code>printing</code> variable to <code>true</code> which we will use to track current state, and disable the form’s button.</p>
<p>The reason we make a request for the image instead of setting it on the image? We want an absolute URL to an image. If we use the &quot;unsplash&quot; URL mentioned above and then share it between the images, this might not work. That's because we can run into scenarios where we have different images displayed.</p>
<p>Once we have the image source, we set the preview image source to that URL and reset the form’s input value.</p>
<p>To trigger the animation, we can hook into the &quot;load&quot; event of our preview image. When the event fires, we create a new element for the piece of paper to print and append it to the <code>printer</code> element. At the same time, we add a <code>printing</code>  class to our printer. We can use this to trigger the first part of our paper animation.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token constant">PREVIEW</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token constant">PRINTER</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'printing'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">PRINT</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">PRINT</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'printed'</span></span>
  <span class="token constant">PRINT</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
<span class="highlight-line">    &lt;div class="printed__spinner"></span>
<span class="highlight-line">      &lt;div class="printed__paper"></span>
<span class="highlight-line">        &lt;div class="printed__papiere"></span>
<span class="highlight-line">          &lt;img class="printed__image" src=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">PREVIEW</span><span class="token punctuation">.</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/></span>
<span class="highlight-line">        &lt;/div></span>
<span class="highlight-line">      &lt;/div></span>
<span class="highlight-line">      &lt;div class="printed__paper-back">&lt;/div></span>
<span class="highlight-line">    &lt;/div></span>
  </span><span class="token template-punctuation string">`</span></span>
<span class="highlight-line">  <span class="token constant">PRINTER</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token constant">PRINT</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// After a set amount of time reset the state</span></span>
<span class="highlight-line">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    printing <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="highlight-line">    <span class="token constant">SUBMIT</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'disabled'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token constant">PRINTER</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'printing'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">4500</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>After a set amount of time, we can reset the state. An alternative approach would be to debounce a bubbling <code>animationend</code> event. But, we can use a <code>setTimeout</code> as we know how long the animation will take.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="VwpXMdV"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/VwpXMdV">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Our printing isn't to the correct scale though. And that's because we need to scale the image to the piece of paper. We need a small piece of CSS for this.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.printed__image</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">object-fit</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>It would also be neat if the lights on the front of the printer communicated that the printer is busy. We could adjust the hue of one of the lights when the printer is printing.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.progress-light</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--progress-hue<span class="token punctuation">,</span> 104<span class="token punctuation">)</span><span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.printing</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--progress-hue</span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span> <span class="token comment">/* Equates to red */</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Put that together and we’ve got a “working” printer made with CSS and a smidge of JavaScript.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="dyvmVjQ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/dyvmVjQ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>That’s It!</h2>
<p>A look at how we can make a functional 3D Printer with CSS, a smidge of JavaScript, and leveraging Pug.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="BaWrwEo"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/BaWrwEo">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We covered a bunch of different things to achieve this. Some of the things we covered:</p>
<ul>
<li>How to make 3D things with CSS</li>
<li>Using Pug mixins</li>
<li>Using scoped custom CSS properties to keep things DRY</li>
<li>Using extrusion to create 3D scenes</li>
<li>Handling forms with JavaScript</li>
<li>Composing animation timelines with custom properties</li>
</ul>
<p>The joy of creating these demos is that many of them pose different problems to overcome. How to create certain shapes or construct certain animations. There’s often more than one way to do something.</p>
<p>What cool things could you make with 3D CSS? I’d love to see!</p>
<p>As always, thanks for reading. Wanna see more? Come find me on <a href="https://twitter.com/intent/follow?screen_name=jh3yy">Twitter</a> or check out my <a href="https://twitch.tv/jh3yy">live stream</a>!</p>
<p><strong>Stay Awesome! ʕ •ᴥ•ʔ</strong></p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Can We Create a &quot;Resize Hack&quot; With Container Queries?</title>
    <link href="https://jhey.dev/writing/can-we-create-a-resize-hack-with-container-queries/"/>
    <updated>2021-05-20T12:15:15+01:00</updated>
    <id>https://jhey.dev/writing/can-we-create-a-resize-hack-with-container-queries/</id>
    <content type="html"><![CDATA[
      <p>If you follow new developments in CSS, you've likely heard of the impending arrival of <strong>container queries</strong>. We’re going to look at the basics here, but if you’d like another look, check out Una’s <a href="https://css-tricks.com/next-gen-css-container/">&quot;Next Gen CSS: @container”</a> article. After we have a poke at the basics ourselves, we’re going to build something super fun with them: a fresh take on the classic CSS meme featuring Peter Griffin fussing with window blinds. ;)</p>
<p>So, what is a container query? It's… exactly that. Much like we have media queries for querying things such as the viewport size, a container query allows us to query the size of a container. Based on that, we can then apply different styles to the children of said container.</p>
<p>What does it look like? Well, the exact standards are being worked out. Currently, though, it’s something like this:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.container</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">contain</span><span class="token punctuation">:</span> layout size<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token comment">/* Or... */</span></span>
<span class="highlight-line">  <span class="token property">contain</span><span class="token punctuation">:</span> layout inline-size<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@container</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.child</span> <span class="token punctuation">{</span> <span class="token property">background</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The <code>layout</code> keyword turns on <code>layout-containment</code> for an element. <code>inline-size</code> allows users to be more specific about containment. This currently means we can only query the container’s  <code>width</code>. With <code>size</code>, we are able to  query the container’s <code>height</code>.</p>
<p>Again, we things could still change. At the time of writing, the only way to use container queries (without a <a href="https://github.com/jsxtools/cqfill">polyfill</a>) is behind a flag in Chrome Canary (<code>chrome://flags</code>). I would definitely recommend having a quick read through the drafts over on <a href="https://drafts.csswg.org/css-contain/#valdef-contain-layout">csswg.org</a>.</p>
<p>The easiest way to start playing would be to whip up a quick demo that sports a resizable container element.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="poeyxba"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/poeyxba">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="zYZKEyM"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/zYZKEyM">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Try changing the <code>contain</code> values (in Chrome Canary) and see how the demo responds. This demo uses <code>contain: layout size</code> which doesn’t restrict the axis. When both the <code>height</code> and <code>width</code> of the container meet certain thresholds, the shirt sizing adjusts.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@container</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.t-shirt__container</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--size</span><span class="token punctuation">:</span> <span class="token string">"L"</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--scale</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That’s what you need to know to about container queries for now. It's really just a few new lines of CSS.</p>
<p>The only thing is: most demos for container queries I’ve seen so far use a pretty standard &quot;card&quot; example to demonstrate the concept. Don't get me wrong, because cards are a great use case for container queries. A card component is practically the poster child of container queries. Consider a generic card design and how it could get affected when used in different layouts. This is a common problem. Many of us have worked on projects where we wind up making various card variations, all catering to the different layouts that use them.</p>
<p>But cards don't inspire much to start playing with container queries. I want to see them pushed to  greater limits to do interesting things. I've played with them a little in that t-shirt sizing demo. And I was going to wait until there was better browser support until I started digging in further (I'm a <a href="https://brave.com/">Brave</a> user currently). But then <a href="https://twitter.com/bramus">Bramus</a> shared there was a container query polyfill!</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1388257513657839617?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>And this got me thinking about ways to “hack” container queries.</p>
<p><strong>⚠️ Spoiler alert</strong>: My hack didn’t work. It did momentarily, or at least I thought it did. But, this was actually a blessing because it prompted more conversation around container queries.</p>
<p>What was my idea? I wanted to create something sort of like the &quot;<a href="https://css-tricks.com/the-checkbox-hack/">Checkbox Hack</a>&quot; but for container queries.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line">&lt;div class=<span class="token string">"container"</span>></span>
<span class="highlight-line">  &lt;div class=<span class="token string">"container__resizer"</span>>&lt;/div></span>
<span class="highlight-line">  &lt;div class=<span class="token string">"container__fixed-content"</span>>&lt;/div></span>
<span class="highlight-line">&lt;/div></span></code></pre>
<p>The idea is that you could have a container with a resizable element inside it, and then another element that gets fixed positioning outside of the container. Resizing containers could trigger container queries and restyle the fixed elements.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.container</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">contain</span><span class="token punctuation">:</span> layout size<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.container__resize</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">resize</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">min-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">max-height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.container__fixed-content</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@container</span><span class="token punctuation">(</span><span class="token property">min-height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.container__fixed-content</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Try resizing the red box in this demo. It will change the color of the purple box.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="mdWyLBW"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/mdWyLBW">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Can we debunk a classic CSS meme with container queries?</h2>
<p>Seeing this work excited me a bunch. Finally, an opportunity to create a version of the Peter Griffin CSS meme with CSS and debunk it!</p>
<p><img src="https://media.giphy.com/media/yYSSBtDgbbRzq/giphy.gif" alt="Peter Griffin Blinds Meme"></p>
<p>You’ve probably seen the meme. It’s a knock on the Cascade and how difficult it is to manage it. I created the demo using <code>cqfill@0.5.0</code>… with my own little touches, of course. 😅</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="LYxKjKX"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/LYxKjKX">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Moving the cord handle, resizes an element which in turn affects the container size. Different container breakpoints would update a CSS variable, <code>--open</code>, from <code>0</code> to <code>1</code>, where <code>1</code> is equal to an “open” and <code>0</code> is equal to a “closed” state.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@container</span> <span class="token punctuation">(</span><span class="token property">min-height</span><span class="token punctuation">:</span> 54px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.blinds__blinds</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--open</span><span class="token punctuation">:</span> 0.1<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> --css-container <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-height</span><span class="token punctuation">:</span> 54px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.blinds__blinds</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--open</span><span class="token punctuation">:</span> 0.1<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@container</span> <span class="token punctuation">(</span><span class="token property">min-height</span><span class="token punctuation">:</span> 58px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.blinds__blinds</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--open</span><span class="token punctuation">:</span> 0.2<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> --css-container <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-height</span><span class="token punctuation">:</span> 58px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.blinds__blinds</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--open</span><span class="token punctuation">:</span> 0.2<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@container</span> <span class="token punctuation">(</span><span class="token property">min-height</span><span class="token punctuation">:</span> 62px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.blinds__blinds</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--open</span><span class="token punctuation">:</span> 0.3<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> --css-container <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-height</span><span class="token punctuation">:</span> 62px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.blinds__blinds</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--open</span><span class="token punctuation">:</span> 0.3<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>But…. as I mentioned, this hack isn’t possible.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/TerribleMia/status/1388367573448683523?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>What’s great here is that it prompted conversation around how container queries work. It also highlighted a bug with the container query polyfill which is now fixed. I would love to see this “hack” work though.</p>
<p>Miriam Suzanne has been creating some fantastic content around container queries. The capabilities have been changing a bunch. That's the risk of living on the bleeding edge. One of <a href="https://www.miriamsuzanne.com/2021/05/02/container-queries/">her latest articles</a> sums up the current status.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jon_neal/status/1388692845658247181?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Although my original demo/hack didn't work, we can still kinda use a &quot;resize&quot; hack to create those blinds. Again, we can query <code>height</code> if we use <code>contain: layout size</code>. Side note: it’s interesting how we’re currently unable to use <code>contain</code> to query a container’s height based on resizing its child elements.</p>
<p>Anyway. Consider this demo:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOBEKZO"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOBEKZO">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The arrow rotates as the container is resized. The trick here is to use a container query to update a scoped CSS custom property.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.container</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">contain</span><span class="token punctuation">:</span> layout size<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.arrow</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--rotate<span class="token punctuation">,</span> 0deg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@container</span><span class="token punctuation">(</span><span class="token property">min-height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.arrow</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--rotate</span><span class="token punctuation">:</span> 90deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We've kinda got a container query trick here then. The drawback with not being able to use the first hack concept is that we can't go completely 3D. Overflow <code>hidden</code> will stop that. We also need the cord to go beneath the window which means the windowsill would get in the way.</p>
<p>But, we can almost get there.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="qBrEMEe"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/qBrEMEe">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This demo uses a preprocessor to generate the container query steps. At each step, a scoped custom property gets updated. This reveals Peter and opens the blinds.</p>
<p>The trick here is to scale up the container to make the resize handle bigger. Then I scale down the content to fit back where it's meant to.</p>
<hr>
<p>This fun demo “debunking the meme” isn’t 100% there yet, but, we’re getting closer. Container queries are an exciting prospect. And it’ll be interesting to see how they change as browser support evolves. It’ll also be exciting to see how people push the limits with them or use them in different ways.</p>
<p>Who knows? The “resize hack” might fit in nicely alongside the infamous “checkbox hack” one day.</p>
<p><strong>Stay Awesome! ʕ •ᴥ•ʔ</strong></p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Get Started with React by Building a Whac-A-Mole Game</title>
    <link href="https://jhey.dev/writing/get-started-with-react-by-building-a-whac-a-mole-game/"/>
    <updated>2021-05-10T12:15:15+01:00</updated>
    <id>https://jhey.dev/writing/get-started-with-react-by-building-a-whac-a-mole-game/</id>
    <content type="html"><![CDATA[
      <p>Want to get started with React but struggling to find a good place to start? This article should have you covered. We'll focus on some of the main concepts of React and then we'll be building a game from scratch! We assume that you have a working knowledge of JavaScript — ah, and if you're here for the game, <a href="#whac-a-mole-game">please scroll down</a>.</p>
<p>I've been working with React for a long time. Since ~v0.12 (2014! Wow, where did the time go?). It's changed a lot. I recall certain &quot;Aha&quot; moments along the way. One thing that's remained is the mindset for using it. We think about things in a different way as opposed to working with the DOM direct.</p>
<p>For me, my learning style is to get something up and running as fast as I can. Then I explore deeper areas of the docs, etc. when necessary. Learn by doing, having fun, and pushing things.</p>
<h2>Aim</h2>
<p>The aim here is to show you enough React to cover some of those &quot;Aha&quot; moments. Leaving you curious enough to dig into things yourself and create your own apps. I recommend <a href="https://reactjs.org/docs/hello-world.html">checking out the docs</a> for anything you want to dig into. I won't be duplicating them.</p>
<p><em>Please note that you can find all examples in <a href="https://codepen.io/jh3y">CodePen</a>, but you can also jump to my <a href="https://github.com/jh3y/whac-a-mole-react">Github repo</a> for a fully working game.</em></p>
<h2>First App</h2>
<p>You can bootstrap a React app in various ways. Below is an example — this is pretty much all you need to create your first React app (besides the HTML) to get started.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'https://cdn.skypack.dev/react'</span></span>
<span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://cdn.skypack.dev/react-dom'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="xxgrjZd"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/xxgrjZd">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We could make this smaller, like so:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></code></pre>
<p>In the first version, <code>App</code> is a component. But, this example tells React DOM to <strong>render an element instead of a component</strong>. Elements are the HTML elements we see in both examples. What makes a component, is a function returning those elements.</p>
<p>Before we get started with components, what's the deal with this &quot;HTML in JS&quot;?</p>
<h2>JSX</h2>
<p>That &quot;HTML in JS&quot; is JSX. You can read all about <a href="https://reactjs.org/docs/introducing-jsx.html">JSX in the React documentation</a>. The gist? A syntax extension to JavaScript that allows us to write HTML in JavaScript. It's like a templating language with full access to JavaScript powers. It's actually an abstraction on an underlying API. Why do we use it? For most, it's easier to follow and comprehend than the equal.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span></code></pre>
<p>The thing to take on board with JSX is that this is how you put things in the DOM 99% of the time with React. And it's also how we bind event handling a lot of the time. That other 1% is a little out of scope for this article. But, sometimes we want to render elements outside the realms of our React application. We can do this using React DOM's Portal. We can also get direct access to the DOM within the component lifecycle(coming up).</p>
<p>Attributes in JSX are camelCase. For example, <code>onclick</code> becomes <code>onClick</code>. There are <a href="https://reactjs.org/docs/dom-elements.html#differences-in-attributes">some special cases</a> such as <code>class</code> which becomes <code>className</code>. Also, attributes such as <code>style</code> now accept an <code>Object</code> instead of a <code>string</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span> backgroundColor<span class="token operator">:</span> <span class="token string">'red'</span> <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"awesome-class"</span> style<span class="token operator">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span><span class="token operator">></span>Cool<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span></code></pre>
<p><strong>Note:</strong> <em>You can check out all the differences in attributes <a href="https://reactjs.org/docs/dom-elements.html#differences-in-attributes">here</a>.</em></p>
<h2>Rendering</h2>
<p>How do we get our JSX into the DOM? We need to inject it. In most cases, our apps have a single point of entry. And if we are using React, we use React DOM to insert an element/component at that point. You could use JSX without React though. As we mentioned, it's a syntax extension. You could change how JSX gets interpreted by Babel and <a href="https://blog.r0b.io/post/using-jsx-without-react/">have it pump out something different</a>.</p>
<p>Everything within becomes managed by React. This can yield certain performance benefits when we are modifying the DOM a lot. This is because React makes use of a Virtual DOM. Making DOM updates isn't slow by any means. But, it's the impact it has within the browser that can impact performance. Each time we update the DOM, browsers need to calculate the <strong>rendering changes</strong> that need to take place. That can be expensive. Using the Virtual DOM, these DOM updates get kept in memory and synced with the browser DOM in batches when required.</p>
<p>There's nothing to stop us from having many apps on a page or having only part of a page managed by React.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ZELyjEV"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ZELyjEV">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Take this example. The same app rendered twice between some regular HTML. Our React app renders the current time using <code>Date.now</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span></code></pre>
<p>For this example, we're rendering the app twice between some regular HTML. We should see the title &quot;Many React Apps&quot;, followed by some text. Then the first rendering of our app appears, followed by some text and then the second rendering of our app.</p>
<p><em>For a deeper dive into rendering, check out <a href="https://reactjs.org/docs/rendering-elements.html">the docs</a>.</em></p>
<h2>Components &amp;&amp; Props</h2>
<p>This is one of the biggest parts of React to grok. Components are reusable blocks of UI. But underneath, it's all functions. Components are functions whose arguments we refer to as <code>props</code>. And we can use those &quot;props&quot; to determine what a component should render. Props are &quot;read-only&quot; and you can pass anything in a prop. Even other components. Anything within the tags of a component we access via a special prop, <code>children</code>.</p>
<p>Components are functions that return elements. If we don’t want to show anything, return <code>null</code>.</p>
<p>We can write components in a variety of ways. But, it's all the same result.</p>
<p>Use a function</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Use a class</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Before the release of hooks(coming up), we used class-based components a lot. We needed them for state and accessing the component API. But, with hooks, the use of class-based components has petered out a bit. In general, we always opt for function-based components now. This has various benefits. For one, it requires less code to achieve the same result. Hooks also make it easier to share and reuse logic between components. Also, classes can be confusing. They need the developer to have an understanding of bindings and context.</p>
<p>We'll be using function-based and you'll notice we used a different style for our <code>App</code> component.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span></code></pre>
<p>That's valid. The main thing is that our component returns what we want to render. In this case, a single element that is a h1 displaying the current time. If we don't need to write <code>return</code>, etc. then don’t. But, it's all preference. And different projects may adopt different styles.</p>
<p>What if we updated our multi-app example to accept <code>props</code> and we extract the <code>h1</code> as a component?</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Message</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> message <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> message <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>Message message<span class="token operator">=</span><span class="token punctuation">{</span>message<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App message<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="zYNzJXp"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/zYNzJXp">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>That works and now we can change the <code>message</code> prop on <code>App</code> and we'd get different messages rendered. We could've made the component <code>Time</code>. But, creating a <code>Message</code> component implies many opportunities to reuse our component. This is the biggest thing about React. It’s about making decisions around architecture/design.</p>
<p>What if we forget to pass the prop to our component? We could provide a default value. Some ways we could do that.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> Message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>message <span class="token operator">=</span> <span class="token string">"You forgot me!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span></code></pre>
<p>Or by specifying <code>defaultProps</code> on our component. We can also provide <a href="https://reactjs.org/docs/typechecking-with-proptypes.html">propTypes</a> which is something I'd recommend having a look at. It provides a way to type check props on our components.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">Message<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  message<span class="token operator">:</span> <span class="token string">"You forgot me!"</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We can access props in different ways. We've used ES6 conveniences to destructure props. But, our <code>Message</code> component could also look like this and work the same.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Message</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span></code></pre>
<p>Props are an object passed to the component. We can read them any way we like.</p>
<p>Our <code>App</code> component could even be this</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>Message <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></span></code></pre>
<p>It would yield the same result. We refer to this as &quot;Prop spreading&quot;. It's better to be explicit with what we pass through though.</p>
<p>We could also pass the <code>message</code> as a child.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Message</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> message <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>Message<span class="token operator">></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Message<span class="token operator">></span></span></code></pre>
<p>Then we refer to the message via the special <code>children</code> prop.</p>
<p>How about taking it further and doing something like have our <code>App</code> pass a <code>message</code> to a component that is also a prop.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Time</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>children<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> message<span class="token punctuation">,</span> messageRenderer<span class="token operator">:</span> Renderer <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>Renderer<span class="token operator">></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Renderer<span class="token operator">></span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App message<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span> messageRenderer<span class="token operator">=</span><span class="token punctuation">{</span>Time<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="qBRjJMz"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/qBRjJMz">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>In this example, we create two apps and one renders the time and another a message. Note how we rename the <code>messageRenderer</code> prop to <code>Renderer</code> in the destructure? React won't see anything starting with a lowercase letter as a component. That’s because anything starting in lowercase is seen as an element. It would render it as <code>&lt;messageRenderer&gt;</code>. It's rare that we'll use this pattern but it's a way to show how anything can be a prop and you can do what you want with it.</p>
<p>One thing to make clear is that anything passed as a prop needs processing by the component. For example, want to pass styles to a component, you need to read them and apply them to whatever is being rendered.</p>
<p>Don't be afraid to experiment with different things. Try different patterns and practice. The skill of determining what should be a component comes through practice. In some cases, it's obvious, and in others, you might realize it later and refactor.</p>
<p>A common example would be the layout for an application. Think at a high level what that might look like. A layout with children that comprises of a header, footer, some main content. How might that look? It could look like this.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Layout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"layout"</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Header<span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>main<span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Footer<span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>It's all about building blocks. Think of it like LEGO for apps.</p>
<p>In fact, one thing I'd advocate is getting familiar with <a href="https://storybook.js.org/">Storybook</a> as soon as possible (I'll create content on this if people would like to see it). Component-driven development isn't unique to React, we see it in other frameworks too. Shifting your mindset to think this way will help a lot.</p>
<h2>Making Changes</h2>
<p>Up until now, we've only dealt with static rendering. Nothing changes. The biggest thing to take on board for learning React is how React works. We need to understand that components can have state. And we must understand and respect that state drives everything. Our elements react to state changes. And React will only re-render where necessary.</p>
<p>Data flow is unidirectional too. Like a waterfall, state changes flow down the UI hierarchy. Components don't care about where the data comes from. For example, a component may want to pass state to a child through props. And that change may trigger an update to the child component. Or, components may choose to manage their own internal state which isn't shared.</p>
<p>These are all design decisions that get easier the more you work with React. The main thing to remember is how unidirectional this flow is. To trigger changes higher up, it either needs to happen via events or some other means passed by props.</p>
<p>Let's create an example.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://cdn.skypack.dev/react'</span></span>
<span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://cdn.skypack.dev/react-dom'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Time</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>time<span class="token punctuation">,</span> setTime<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    timer<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setTime</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">.</span>current<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>Time<span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="VwPWRzm"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/VwPWRzm">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>There is a fair bit to digest there. But, here we introduce the use of &quot;Hooks&quot;. We are using &quot;useEffect&quot;, &quot;useRef&quot;, and &quot;useState&quot;. These are utility functions that give us access to the component API.</p>
<p>If you check the example, the time is updating every second or <code>1000ms</code>. And that's driven by the fact we update the <code>time</code> which is a piece of state. We are doing this within a <code>setInterval</code>. Note how we don't change <code>time</code> directly. State variables are treated as immutable. We do it through the <code>setTime</code> method we receive from invoking <code>useState</code>. Every time the state updates, our component re-renders if that state is part of the render. <code>useState</code> always returns a state variable and a way to update that piece of state. The argument passed is the initial value for that piece of state.</p>
<p>We use <code>useEffect</code> to hook into the component lifecycle for events such as state changes. Components mount when they're inserted into the DOM. And they get unmounted when they're removed from the DOM. To hook into these lifecycle stages, we use effects. And we can return a function within that effect that will fire when the component gets unmounted. The second parameter of <code>useEffect</code> determines when the effect should run. We refer to it as the dependency array. Any listed items that change will trigger the effect to run. No second parameter means the effect will run on every render. And an empty array means the effect will only run on the first render. This array will usually contain state variables or props.</p>
<p>We are using an effect to both setup and tear down our timer when the component mounts and unmounts.</p>
<p>We use a <code>ref</code> to reference that timer. A <code>ref</code>  provides a way to keep reference to things that don’t trigger rendering. We don't need to use state for the timer. It doesn't affect rendering. But, we need to keep a reference to it so we can clear it on unmount.</p>
<p>Want to dig into hooks a bit before moving on? I wrote an article before about them – <a href="https://dev.to/jh3y/react-hooks-in-5-minutes-55ic">&quot;React Hooks in 5 Minutes&quot;</a>. And there's also great info in <a href="https://reactjs.org/docs/hooks-intro.html">the React docs</a>.</p>
<p>Our <code>Time</code> component has its own internal state that triggers renders. But, what if we wanted to change the interval length? We could manage that from above in our <code>App</code> component.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>interval<span class="token punctuation">,</span> updateInterval<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Time interval<span class="token operator">=</span><span class="token punctuation">{</span>interval<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Interval: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>interval<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"range"</span> min<span class="token operator">=</span><span class="token string">"1"</span> value<span class="token operator">=</span><span class="token punctuation">{</span>interval<span class="token punctuation">}</span> max<span class="token operator">=</span><span class="token string">"10000"</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token function">updateInterval</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Our new <code>interval</code> value is being stored in the state of <code>App</code>. And it dictates the rate at which the <code>Time</code> component updates.</p>
<p>The <code>Fragment</code> component is a special component we have access to through <code>React</code>. In <code>React</code>, a component must return a single child or <code>null</code>. We can't return adjacent elements. But, sometimes we don't want to wrap our content in a <code>div</code>. <code>Fragment</code>s allow us to avoid wrapper elements whilst keeping React happy.</p>
<p>You'll also notice our first event bind happening there. We use <code>onChange</code> as an attribute of the <code>input</code> to update the <code>interval</code>.</p>
<p>The updated <code>interval</code> is then passed to <code>Time</code> and the change of <code>interval</code> triggers our effect to run. This is because the second parameter of our <code>useEffect</code> hook now contains <code>interval</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Time</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> interval <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>time<span class="token punctuation">,</span> setTime<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    timer<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setTime</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">.</span>current<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>interval<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Have a play with the demo and see the changes!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="JjEJVrr"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/JjEJVrr">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<hr>
<p>I recommend visiting the <a href="https://reactjs.org/docs/hello-world.html">React documentation</a> if you want to dig into some of these concepts more. But, we've seen enough React to get started making something fun! Let's do it!</p>
<h2>Whac-A-Mole React Game</h2>
<p>Are you ready? We'll be creating our very own &quot;Whac a Mole&quot; with React!. The <a href="https://en.wikipedia.org/wiki/Whac-A-Mole">well-known game</a> is basic in theory but throws up some interesting challenges to build. The important part here is how we're using React. I'll gloss over applying styles and making it pretty. That's your job! Although, I'm happy to take any questions on that.</p>
<p>Also, this game will not be &quot;polished&quot;. But, it works. You can go and make it your own! Add your own features, etc.</p>
<h2>Design</h2>
<p>Let's start by thinking about what we've got to make. What components we may need etc.</p>
<ul>
<li>Start/Stop Game</li>
<li>Timer</li>
<li>Keeping Score</li>
<li>Layout</li>
<li>Mole Component
<img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s345svubytwppfsu2js3.png" alt="Whac a Mole Sketch"></li>
</ul>
<h2>Starting Point</h2>
<p>We've learned how to make a component and we can roughly gauge what we need.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://cdn.skypack.dev/react'</span></span>
<span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://cdn.skypack.dev/react-dom'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Moles</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Mole</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>button<span class="token operator">></span>Mole<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Timer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Score</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Score<span class="token operator">:</span> <span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Game</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>h1<span class="token operator">></span>Whac a Mole<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>button<span class="token operator">></span>Start<span class="token operator">/</span>Stop<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Score<span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Timer<span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Moles<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Mole<span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Mole<span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Mole<span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Mole<span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Mole<span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Moles<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Game<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></code></pre>
<h2>Starting/Stopping</h2>
<p>Before we do anything, we need to be able to start and stop the game. Starting the game will trigger elements like the timer and moles to come to life. This is where we can introduce conditional rendering.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Game</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>playing<span class="token punctuation">,</span> setPlaying<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token punctuation">{</span><span class="token operator">!</span>playing <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Whac a Mole<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setPlaying</span><span class="token punctuation">(</span><span class="token operator">!</span>playing<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token punctuation">{</span>playing <span class="token operator">?</span> <span class="token string">'Stop'</span> <span class="token operator">:</span> <span class="token string">'Start'</span><span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token punctuation">{</span>playing <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Score <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Timer <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Moles<span class="token operator">></span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span>Mole <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span>Mole <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span>Mole <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span>Mole <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span>Mole <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span><span class="token operator">/</span>Moles<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We have a state variable of <code>playing</code> and we use that to render elements that we need. In JSX we can use a condition with &quot;&amp;&amp;&quot; to render something if the condition is <code>true</code>. Here we say to render the board and its content if we are playing. This also affects the button text where we can use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">ternary</a>.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOyLwyK"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOyLwyK">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Timer</h2>
<p>Let's get the timer running. By default, we're going to set a time limit of <code>30000ms</code>. And we can declare this as a constant outside of our React components.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">TIME_LIMIT</span> <span class="token operator">=</span> <span class="token number">30000</span></span></code></pre>
<p>Declaring constants in one place is a good habit to pick up. Anything that can be used to configure your app can be co-located in one place.</p>
<p>Our <code>Timer</code> component only cares about three things.</p>
<ul>
<li>The time it's counting down;</li>
<li>At what interval it's going to update;</li>
<li>What it does when it ends.</li>
</ul>
<p>A first attempt might look like this.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Timer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> time<span class="token punctuation">,</span> interval <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> onEnd <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>internalTime<span class="token punctuation">,</span> setInternalTime<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> timerRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>internalTime <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> onEnd<span class="token punctuation">)</span> <span class="token function">onEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>internalTime<span class="token punctuation">,</span> onEnd<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    timerRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setInternalTime</span><span class="token punctuation">(</span>internalTime <span class="token operator">-</span> interval<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      interval</span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timerRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>internalTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>But, it only updates once?</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="gOgQaow"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/gOgQaow">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We're using the same interval technique we did before. But, the issue is we're using <code>state</code> in our interval callback. And this is our first &quot;gotcha&quot;. Because we have an empty dependency array for our effect, it only runs once. The closure for <code>setInterval</code> uses the value of <code>internalTime</code> from the first render. This is an interesting problem and makes us think about how we approach things.</p>
<p><strong>Note:</strong> <em>I highly recommend <a href="https://overreacted.io/making-setinterval-declarative-with-react-hooks/">reading this article by Dan Abramov</a> that digs into timers and how to get around this problem. It's a worthwhile read and provides a deeper understanding. One issue is that empty dependency arrays can often introduce bugs in our React code. There's also an <a href="https://www.npmjs.com/package/eslint-plugin-react-hooks">eslint plugin</a> I'd recommend using to help point these out. The React docs also <a href="https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects">highlight the potential risks</a> of using the empty dependency array.</em></p>
<p>One way to fix our <code>Timer</code> would be to update the dependency array for the effect. This would mean that our <code>timerRef</code> would get updated every interval. However, it introduces the issue of drifting accuracy.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  timerRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setInternalTime</span><span class="token punctuation">(</span>internalTime <span class="token operator">-</span> interval<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    interval</span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">clearInterval</span><span class="token punctuation">(</span>timerRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>internalTime<span class="token punctuation">,</span> interval<span class="token punctuation">]</span><span class="token punctuation">)</span></span></code></pre>
<p>If you check this demo, it has the same Timer twice with different intervals and logs the drift to the developer console. A smaller interval or longer time equals a bigger drift.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="XWpymZo"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/XWpymZo">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We can use a <code>ref</code> to solve our problem. We can use it to track the <code>internalTime</code> and avoid running the effect every interval.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> timeRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  timerRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setInternalTime</span><span class="token punctuation">(</span><span class="token punctuation">(</span>timeRef<span class="token punctuation">.</span>current <span class="token operator">-=</span> interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    interval</span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timerRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>interval<span class="token punctuation">]</span><span class="token punctuation">)</span></span></code></pre>
<p>And this reduces the drift significantly with smaller intervals too. Timers are sort of an edge case. But, it's a great example to think about how we use hooks in React. It's an example that's stuck with me and helped me understand the “Why?”.</p>
<p>Update the render to divide the time by <code>1000</code> and append an <code>s</code> and we have a seconds timer.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="gOgQazL"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/gOgQazL">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This timer is still rudimentary. It will drift over time. For our game, it'll be fine. If you want to dig into accurate counters, this is a <a href="https://youtu.be/MCi6AZMkxcU">great video on creating accurate timers</a> with JavaScript.</p>
<h2>Scoring</h2>
<p>Let's make it possible to update the score. How do we score? Whacking a mole! In our case, that means clicking a <code>button</code>. For now, let's give each mole a score of <code>100</code>. And we can pass an <code>onWhack</code> callback to our <code>Mole</code>s.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">MOLE_SCORE</span> <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Mole</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> onWhack <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">onWhack</span><span class="token punctuation">(</span><span class="token constant">MOLE_SCORE</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>Mole<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Score</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> value <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Score: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Game</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>playing<span class="token punctuation">,</span> setPlaying<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>score<span class="token punctuation">,</span> setScore<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token function-variable function">onWhack</span> <span class="token operator">=</span> <span class="token parameter">points</span> <span class="token operator">=></span> <span class="token function">setScore</span><span class="token punctuation">(</span>score <span class="token operator">+</span> points<span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token punctuation">{</span><span class="token operator">!</span>playing <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Whac a Mole<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setPlaying</span><span class="token punctuation">(</span><span class="token operator">!</span>playing<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>playing <span class="token operator">?</span> <span class="token string">'Stop'</span> <span class="token operator">:</span> <span class="token string">'Start'</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token punctuation">{</span>playing <span class="token operator">&amp;&amp;</span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Score value<span class="token operator">=</span><span class="token punctuation">{</span>score<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Timer</span>
<span class="highlight-line">            time<span class="token operator">=</span><span class="token punctuation">{</span><span class="token constant">TIME_LIMIT</span><span class="token punctuation">}</span></span>
<span class="highlight-line">            onEnd<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setPlaying</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">          <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Moles<span class="token operator">></span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span>Mole onWhack<span class="token operator">=</span><span class="token punctuation">{</span>onWhack<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span>Mole onWhack<span class="token operator">=</span><span class="token punctuation">{</span>onWhack<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span>Mole onWhack<span class="token operator">=</span><span class="token punctuation">{</span>onWhack<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span>Mole onWhack<span class="token operator">=</span><span class="token punctuation">{</span>onWhack<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span>Mole onWhack<span class="token operator">=</span><span class="token punctuation">{</span>onWhack<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span><span class="token operator">/</span>Moles<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token punctuation">}</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Note how the <code>onWhack</code> callback gets passed to each <code>Mole</code>. And that the callback updates our <code>score</code> state. These updates will trigger a render.</p>
<p>This is a good time to install the <a href="https://reactjs.org/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab">React Developer Tools extension</a> in your browser. There is a neat feature that will highlight component renders in the DOM. Open the &quot;Components&quot; tab in Dev Tools and hit the settings cog. Select &quot;Highlight updates when components render&quot;.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pn357ngvm5615s6r31t.png" alt="Setting up React DevTools"></p>
<p>If you open our demo at <a href="https://cdpn.io/jh3y/debug/abpQvPg">this link</a> and set the extension to highlight renders. Then you will see that <strong>the timer renders as time changes</strong>. But, when we whack a mole, all components re-render.</p>
<h2>Loops in JSX</h2>
<p>You might be thinking the way we're rendering our <code>Mole</code>s is inefficient. And you'd be right to think that. There's an opportunity for us here to render these in a loop.</p>
<p>With JSX we tend to use <code>Array.map</code> 99% of the time to render a collection of things. <a href="https://codepen.io/smashingmag/pen/VwpLRLd">For example</a>,</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">USERS</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Sally'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Jack'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">]</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>ul<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">{</span><span class="token constant">USERS</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> id<span class="token punctuation">,</span> name <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>The alternative would be to generate the content in a for loop and then render the return from a function.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token punctuation">{</span><span class="token function">getLoopContent</span><span class="token punctuation">(</span><span class="token constant">DATA</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>What's that <code>key</code> attribute for? That helps React determine what changes need to render. If you can use a unique identifier, do! As a last resort, use the index of the item in a collection. Read <a href="https://reactjs.org/docs/lists-and-keys.html">the docs on lists</a> for more.</p>
<p>For our example we don't have any data to work with. If you need to generate a collection of things. There's a trick you can use.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token constant">NUMBER_OF_THINGS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<p>This could work for you in some scenarios.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>h1<span class="token operator">></span>Whac a Mole<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setPlaying</span><span class="token punctuation">(</span><span class="token operator">!</span>playing<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>playing <span class="token operator">?</span> <span class="token string">'Stop'</span> <span class="token operator">:</span> <span class="token string">'Start'</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">{</span>playing <span class="token operator">&amp;&amp;</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Board<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>Score value<span class="token operator">=</span><span class="token punctuation">{</span>score<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>Timer time<span class="token operator">=</span><span class="token punctuation">{</span><span class="token constant">TIME_LIMIT</span><span class="token punctuation">}</span> onEnd<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Ended'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token operator">=></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Mole key<span class="token operator">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span> onWhack<span class="token operator">=</span><span class="token punctuation">{</span>onWhack<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>Board<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>Or, if you want a persistent collection, you could use something like <code>uuid</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> v4 <span class="token keyword">as</span> uuid <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'https://cdn.skypack.dev/uuid'</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">MOLE_COLLECTION</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token comment">// In our JSX</span></span>
<span class="highlight-line"><span class="token punctuation">{</span><span class="token constant">MOLE_COLLECTION</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>Mole key<span class="token operator">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span> onWhack<span class="token operator">=</span><span class="token punctuation">{</span>onWhack<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span><span class="token punctuation">}</span></span></code></pre>
<h2>Ending Game</h2>
<p>We can only end our game with the start button. And when we do end it, the score remains when we start again. The <code>onEnd</code> for our <code>Timer</code> also does nothing yet.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="vYgQLEg"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/vYgQLEg">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>What we need is a 3rd state where we aren't <code>playing</code> but we have finished. In more complex applications, I'd recommend reaching for <a href="https://xstate.js.org/docs/">XState</a> or <a href="https://reactjs.org/docs/hooks-reference.html#usereducer">using reducers</a>. But, for our app, we can introduce a new state variable, <code>finished</code>. When the state is <code>!playing</code> and <code>finished</code>, we can display the score, reset the timer, and give the option to restart.</p>
<p>We need to put our logic caps on now. If we end the game, then instead of toggling <code>playing</code>, we need to also toggle <code>finished</code>. We could create an <code>endGame</code> and <code>startGame</code> function.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">endGame</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">setPlaying</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">setFinished</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">startGame</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">setPlaying</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">setFinished</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>When we start a game, we reset the <code>score</code> and put the game into the <code>playing</code> state. This triggers the playing UI to render. When we end the game, we set <code>finished</code> to <code>true</code>. The reason we don't reset the <code>score</code> is so we can show it as a result.</p>
<p>And, when our <code>Timer</code> ends, it should invoke that same function.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>Timer time<span class="token operator">=</span><span class="token punctuation">{</span><span class="token constant">TIME_LIMIT</span><span class="token punctuation">}</span> onEnd<span class="token operator">=</span><span class="token punctuation">{</span>endGame<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span></code></pre>
<p>It can do that within an effect. If the <code>internalTime</code> hits <code>0</code>, then unmount and invoke <code>onEnd</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>internalTime <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> onEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token function">onEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>internalTime<span class="token punctuation">,</span> onEnd<span class="token punctuation">]</span><span class="token punctuation">)</span></span></code></pre>
<p>We can shuffle our UI rendering to render 3 states:</p>
<ul>
<li>Fresh</li>
<li>Playing</li>
<li>Finished</li>
</ul>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">{</span><span class="token operator">!</span>playing <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>finished <span class="token operator">&amp;&amp;</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>h1<span class="token operator">></span>Whac a Mole<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>startGame<span class="token punctuation">}</span><span class="token operator">></span>Start Game<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">{</span>playing <span class="token operator">&amp;&amp;</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>button</span>
<span class="highlight-line">        className<span class="token operator">=</span><span class="token string">"end-game"</span></span>
<span class="highlight-line">        onClick<span class="token operator">=</span><span class="token punctuation">{</span>endGame<span class="token punctuation">}</span></span>
<span class="highlight-line">        <span class="token operator">></span></span>
<span class="highlight-line">        End Game</span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Score value<span class="token operator">=</span><span class="token punctuation">{</span>score<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Timer</span>
<span class="highlight-line">        time<span class="token operator">=</span><span class="token punctuation">{</span><span class="token constant">TIME_LIMIT</span><span class="token punctuation">}</span></span>
<span class="highlight-line">        onEnd<span class="token operator">=</span><span class="token punctuation">{</span>endGame<span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Moles<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token constant">NUMBER_OF_MOLES</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Mole key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span> onWhack<span class="token operator">=</span><span class="token punctuation">{</span>onWhack<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>Moles<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">{</span>finished <span class="token operator">&amp;&amp;</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Score value<span class="token operator">=</span><span class="token punctuation">{</span>score<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>startGame<span class="token punctuation">}</span><span class="token operator">></span>Play Again<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span></code></pre>
<p>And now we have a functioning game minus moving moles.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="RwKqrog"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/RwKqrog">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Note how we’ve reused the <code>Score</code> component. Was there an opportunity there to not repeat <code>Score</code>? Could you put it in its own conditional? Or does it need to appear there in the DOM. This will come down to your design.</p>
<p>Might you end up with a more generic component to cover it? These are the questions to keep asking. The goal is to <strong>keep a separation of concerns with your components</strong>. But, you also want to keep portability in mind.</p>
<h2>Moles</h2>
<p>Moles are the centerpiece of our game. They don't care about the rest of the app. But, they'll give you their score <code>onWhack</code>. This emphasises portability.</p>
<p>We aren't digging into styling in this &quot;Guide&quot;. But, for our Mole, we can create a container with <code>overflow: hidden</code> that our <code>Mole</code>(button) moves in and out of. The default position of our Mole will be out of view.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywetn1bxx5skkbn8swc7.png" alt="Mole Design"></p>
<p>We're going to bring in a 3rd party solution to make our Moles bob up and down. This is an example of how to bring in <strong>3rd party solutions that work with the DOM</strong>. In most cases, we use refs to grab DOM elements. And then we use our solution within an effect.</p>
<p>We're going to use <a href="https://greensock.com/">GreenSock(GSAP)</a> to make our Moles bob. We won't dig into the GSAP APIs today. But, if you have any questions about what they're doing, please ask me!</p>
<p>Here's an updated <code>Mole</code> with <code>GSAP</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> gsap <span class="token keyword">from</span> <span class="token string">'https://cdn.skypack.dev/gsap'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Mole</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> onWhack <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> buttonRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    gsap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>buttonRef<span class="token punctuation">.</span>current<span class="token punctuation">,</span> <span class="token punctuation">{</span> yPercent<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    gsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>buttonRef<span class="token punctuation">.</span>current<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      yPercent<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      yoyo<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      repeat<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"mole-hole"</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>button</span>
<span class="highlight-line">        className<span class="token operator">=</span><span class="token string">"mole"</span></span>
<span class="highlight-line">        ref<span class="token operator">=</span><span class="token punctuation">{</span>buttonRef<span class="token punctuation">}</span></span>
<span class="highlight-line">        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">onWhack</span><span class="token punctuation">(</span><span class="token constant">MOLE_SCORE</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">        Mole</span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We've added a wrapper to the <code>button</code> which allows us to show/hide the <code>Mole</code>. And we've also given our <code>button</code> a <code>ref</code>. Using an effect, we can create a tween(GSAP animation) that moves the button up and down.</p>
<p>You'll also notice, we're using <code>className</code> which is the attribute equal to <code>class</code> in JSX to apply class names. Why don't we use the <code>className</code> with GSAP? Because, if we have many elements with that <code>className</code>, our effect will try to use them all. This is why <code>useRef</code> is a great choice to stick with.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="abpQNxK"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/abpQNxK">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Awesome, now we have bobbing <code>Mole</code>s, and our game is complete from a functional sense.
They all move exactly the same which isn't ideal. They should operate at different speeds. The points scored should also reduce the longer it takes for a <code>Mole</code> to get whacked.</p>
<p>Our Mole's internal logic can deal with how scoring and speeds get updated. Passing the initial <code>speed</code>, <code>delay</code>, and <code>points</code> in as props will make for a more flexible component.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>Mole key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span> onWhack<span class="token operator">=</span><span class="token punctuation">{</span>onWhack<span class="token punctuation">}</span> points<span class="token operator">=</span><span class="token punctuation">{</span><span class="token constant">MOLE_SCORE</span><span class="token punctuation">}</span> delay<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> speed<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span></code></pre>
<p>Now, for a breakdown of our <code>Mole</code> logic.</p>
<p>Let's start with how our points will reduce over time. This could be a good candidate for a <code>ref</code>. We have something that doesn't affect render whose value could get lost in a closure. We create our animation in an effect and it's never recreated. On each repeat of our animation, we want to decrease the <code>points</code> value by a multiplier. The points value can have a minimum value defined by a <code>pointsMin</code> prop.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> bobRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> pointsRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  bobRef<span class="token punctuation">.</span>current <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>buttonRef<span class="token punctuation">.</span>current<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    yPercent<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    duration<span class="token operator">:</span> speed<span class="token punctuation">,</span></span>
<span class="highlight-line">    yoyo<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    repeat<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    delay<span class="token operator">:</span> delay<span class="token punctuation">,</span></span>
<span class="highlight-line">    repeatDelay<span class="token operator">:</span> delay<span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function-variable function">onRepeat</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      pointsRef<span class="token punctuation">.</span>current <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span></span>
<span class="highlight-line">        Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>pointsRef<span class="token punctuation">.</span>current <span class="token operator">*</span> <span class="token constant">POINTS_MULTIPLIER</span><span class="token punctuation">,</span> pointsMin<span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    bobRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>delay<span class="token punctuation">,</span> pointsMin<span class="token punctuation">,</span> speed<span class="token punctuation">]</span><span class="token punctuation">)</span></span></code></pre>
<p>We're also creating a <code>ref</code> to keep a reference of our GSAP animation. We will use this when the <code>Mole</code> gets whacked. Note how we also return a function that kills the animation on unmount. If we don’t kill the animation on unmount, the repeat code will keep firing.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="eYgQzGj"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/eYgQzGj">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>What will happen when our Mole gets whacked? We need a new state for that.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token punctuation">[</span>whacked<span class="token punctuation">,</span> setWhacked<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span></code></pre>
<p>And instead of using the <code>onWhack</code> prop in the <code>onClick</code> of our <code>button</code>, we can create a new function <code>whack</code>. This will set <code>whacked</code> to <code>true</code> and call <code>onWhack</code> with the current <code>pointsRef</code> value.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">whack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">setWhacked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">onWhack</span><span class="token punctuation">(</span>pointsRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"mole-hole"</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token string">"mole"</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>buttonRef<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>whack<span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">      Mole</span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>The last thing to do is respond to the <code>whacked</code> state in an effect with <code>useEffect</code>. Using the dependency array, we can make sure we only run the effect when <code>whacked</code> changes. If <code>whacked</code> is <code>true</code>, we reset the points, pause the animation, and animate the <code>Mole</code> underground. Once underground, we wait for a random delay before restarting the animation. The animation will start speedier using <code>timescale</code> and we set <code>whacked</code> back to <code>false</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>whacked<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    pointsRef<span class="token punctuation">.</span>current <span class="token operator">=</span> points</span>
<span class="highlight-line">    bobRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    gsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>buttonRef<span class="token punctuation">.</span>current<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      yPercent<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      duration<span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token function-variable function">onComplete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        gsap<span class="token punctuation">.</span><span class="token function">delayedCall</span><span class="token punctuation">(</span>gsap<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">          <span class="token function">setWhacked</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="highlight-line">          bobRef<span class="token punctuation">.</span>current</span>
<span class="highlight-line">            <span class="token punctuation">.</span><span class="token function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">            <span class="token punctuation">.</span><span class="token function">timeScale</span><span class="token punctuation">(</span>bobRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">timeScale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token constant">TIME_MULTIPLIER</span><span class="token punctuation">)</span></span>
<span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>whacked<span class="token punctuation">]</span><span class="token punctuation">)</span></span></code></pre>
<p>That gives us</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="poRQbVV"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/poRQbVV">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The last thing to do is pass props to our <code>Mole</code> instances that will make them behave different. But, how we generate these props could cause an issue.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"moles"</span><span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token constant">MOLES</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Mole</span>
<span class="highlight-line">      key<span class="token operator">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span></span>
<span class="highlight-line">      onWhack<span class="token operator">=</span><span class="token punctuation">{</span>onWhack<span class="token punctuation">}</span></span>
<span class="highlight-line">      speed<span class="token operator">=</span><span class="token punctuation">{</span>gsap<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">      delay<span class="token operator">=</span><span class="token punctuation">{</span>gsap<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">      points<span class="token operator">=</span><span class="token punctuation">{</span><span class="token constant">MOLE_SCORE</span><span class="token punctuation">}</span></span>
<span class="highlight-line">    <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span></code></pre>
<p>This would cause an issue because the props would change on every render as we generate the Moles. A better solution could be to generate a new <code>Mole</code> array each time we start the game and iterate over that. This way we can keep the game random without causing issues.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">generateMoles</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token constant">MOLES</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  speed<span class="token operator">:</span> gsap<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  delay<span class="token operator">:</span> gsap<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  points<span class="token operator">:</span> <span class="token constant">MOLE_SCORE</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token comment">// Create state for moles</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token punctuation">[</span>moles<span class="token punctuation">,</span> setMoles<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token function">generateMoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token comment">// Update moles on game start</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">startGame</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">setMoles</span><span class="token punctuation">(</span><span class="token function">generateMoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">setPlaying</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">setFinished</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token comment">// Destructure mole objects as props</span></span>
<span class="highlight-line"><span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"moles"</span><span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">{</span>moles<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>speed<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> points<span class="token punctuation">}</span><span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Mole</span>
<span class="highlight-line">      key<span class="token operator">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span></span>
<span class="highlight-line">      onWhack<span class="token operator">=</span><span class="token punctuation">{</span>onWhack<span class="token punctuation">}</span></span>
<span class="highlight-line">      speed<span class="token operator">=</span><span class="token punctuation">{</span>speed<span class="token punctuation">}</span></span>
<span class="highlight-line">      delay<span class="token operator">=</span><span class="token punctuation">{</span>delay<span class="token punctuation">}</span></span>
<span class="highlight-line">      points<span class="token operator">=</span><span class="token punctuation">{</span>points<span class="token punctuation">}</span></span>
<span class="highlight-line">    <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span></code></pre>
<p>And here's the result! I’ve gone ahead and added some styling along with an image of a Mole for our buttons.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="WNRYxmM"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/WNRYxmM">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We now have a fully working “Whac-a-Mole” game built in React. It took us less than 200 lines of code. At this stage you can take it away and make it your own. Style it how you like, add new features, etc. Or stick around and we can put together some extras.</p>
<h2>Tracking High Score</h2>
<p>We have a working &quot;Whac a Mole&quot;. But, how can we keep track of our high score? We could use an effect to write our score to <code>localStorage</code> every time the game ends. But, what if persisting things was a common need. We could create a custom hook called &quot;usePersistentState&quot;. This could be a wrapper around &quot;useState&quot; that reads/writes to localStorage.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">usePersistentState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> initialValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token operator">:</span> initialValue</span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> state<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> state<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And then we can use that in our game.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token punctuation">[</span>highScore<span class="token punctuation">,</span> setHighScore<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">usePersistentState</span><span class="token punctuation">(</span><span class="token string">'whac-high-score'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span></code></pre>
<p>We use it exactly the same as <code>useState</code>. And we can hook into <code>onWhack</code> to set a new high score during the game when appropriate.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">endGame</span> <span class="token operator">=</span> <span class="token parameter">points</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> highScore<span class="token punctuation">)</span> <span class="token function">setHighScore</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token comment">// play fanfare!</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>How might we be able to tell if our game result is a new high score? Another piece of state? Most likely.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ZELmpPG"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ZELmpPG">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Whimsical Touches</h2>
<p>At this stage, we've covered everything we need to. Even how to make your own custom hook. Feel free to go off and make this your own.</p>
<p>Sticking around? Let's create another custom hook for adding audio to our game.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">useAudio</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> volume <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>audio<span class="token punctuation">,</span> setAudio<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token constant">AUDIO</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token constant">AUDIO</span><span class="token punctuation">.</span>volume <span class="token operator">=</span> volume</span>
<span class="highlight-line">    <span class="token function">setAudio</span><span class="token punctuation">(</span><span class="token constant">AUDIO</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>src<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token function-variable function">play</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> audio<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function-variable function">pause</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> audio<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function-variable function">stop</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      audio<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      audio<span class="token punctuation">.</span>currentTime <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This is a rudimentary hook implementation for playing audio. We provide an audio <code>src</code> and then we get back the API to play it. We can add noise when we &quot;Whac” a Mole. Then the decision will be, is this part of <code>Mole</code>? Is it something we pass to <code>Mole</code>? Is it something we invoke in <code>onWhack</code> ?</p>
<p>These are the types of decisions that come up in component-driven development. We need to keep portability in mind. Also, what would happen if we wanted to mute the audio? How could we globally do that? It might make more sense as a first approach to control the audio within the <code>Game</code> component.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Inside Game</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token punctuation">{</span> play<span class="token operator">:</span> playAudio <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAudio</span><span class="token punctuation">(</span><span class="token string">'/audio/some-audio.mp3'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">onWhack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">playAudio</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">setScore</span><span class="token punctuation">(</span>score <span class="token operator">+</span> points<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>It’s all about design and decisions. If we bring in lots of audio, renaming the <code>play</code> variable could get tedious. Returning an Array from our hook like <code>useState</code> would allow us to name the variable whatever we want. But, it also might be hard to remember which index of the Array accounts for which API method.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="MWJzbwK"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/MWJzbwK">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>That's It!</h2>
<p>More than enough to get you started on your React journey. And we got to make something interesting.</p>
<p>We covered a lot!</p>
<ul>
<li>Creating an App</li>
<li>JSX</li>
<li>Components and props</li>
<li>Creating timers</li>
<li>Using refs</li>
<li>Creating custom hooks</li>
</ul>
<p>We made a game! And now you can use your new skills to add new features or make it your own.</p>
<p>Where did I take it? It's at this stage so far.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOyevdN"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOyevdN">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Where to Go Next!</h2>
<p>I hope building “Whac-a-Mole” has motivated you to start your React journey. Where next?</p>
<p>Here are some links to resources to check out if you’re looking to dig in more. Some of which are ones I found useful along the way.</p>
<ul>
<li><a href="https://reactjs.org/docs/">React documentation</a></li>
<li>“<a href="https://overreacted.io/making-setinterval-declarative-with-react-hooks/">Making setInterval Declarative with React Hooks</a>” – Dan Abramov</li>
<li>“<a href="https://www.robinwieruch.de/react-hooks-fetch-data">How to fetch data with React Hooks</a>” – Robin Wieruch</li>
<li>“<a href="https://kentcdodds.com/blog/usememo-and-usecallback">When to useMemo and useCallback</a>” – Kent C Dodds</li>
</ul>
<p><strong>Stay Awesome! ʕ •ᴥ•ʔ</strong></p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Going &quot;Meta GSAP&quot;: The Quest for &quot;Perfect&quot; Infinite Scrolling</title>
    <link href="https://jhey.dev/writing/going-meta-gsap-the-quest-for-perfect-infinite-scrolling/"/>
    <updated>2021-04-14T12:15:15+01:00</updated>
    <id>https://jhey.dev/writing/going-meta-gsap-the-quest-for-perfect-infinite-scrolling/</id>
    <content type="html"><![CDATA[
      <p>I'm not sure how this one came about. But, it's a story. This article is more about grokking a concept, one that's going to help you think about your animations in a different way. It so happens that this particular example features infinite scrolling — specifically the &quot;perfect&quot; infinite scroll for a deck of cards without duplicating any of them.</p>
<p>Why am I here? Well, this all started from a tweet. A tweet that got me thinking about layouts and side-scrolling content.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1329534673987506184 ?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>I took that concept and used it on <a href="https://jhey.dev">my site</a>. And it's still there in action at the time of writing.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="WNxBLbB"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/WNxBLbB">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Then I got to thinking more about gallery views and side-scrolling concepts. We hopped on a <a href="https://twitch.tv/jh3yy">livestream</a> and decided to try and make something like the old Apple &quot;Cover Flow&quot; pattern. <a href="https://www.google.com/search?q=apple+cover+flow">Remember it?</a></p>
<p>My first thoughts for making this assumed I'd make this so it works without JavaScript, as it does in the demo above, in a way that uses &quot;progressive enhancement.&quot; I grabbed <a href="https://greensock.com/gsap/">Greensock</a> and <a href="https://greensock.com/scrolltrigger/">ScrollTrigger</a>, and off we went. I came away from that work pretty disappointed. I had something but couldn't quite get infinite scrolling to work how the way I wanted. The &quot;Next” and “Previous&quot; buttons didn't want to play ball. You can see it here, and it requires horizontal scrolling.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="9087b98b088d025b16fc50aff45ba9f1"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/9087b98b088d025b16fc50aff45ba9f1">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>So I opened up a <a href="https://greensock.com/forums/topic/26922-missing-something-w-horizontal-scrolltrigger-%F0%9F%98%85/">new thread</a> on the Greensock forum.  Little did I know I was about to open myself up to some serious learning! We solved the issue with the buttons. But, being me, I had to ask whether something else was possible. Was there a &quot;clean&quot; way to do infinite scrolling? I'd tried something on stream but had no luck. I was curious. I'd tried a technique like that used in this pen which I created for the ScrollTrigger release.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="RwraKYZ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/RwraKYZ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The <a href="https://greensock.com/forums/topic/26922-missing-something-w-horizontal-scrolltrigger-%F0%9F%98%85/?do=findComment&amp;comment=131318&amp;_rid=80771">initial answer</a> was that it is kinda tricky to do:</p>
<blockquote>
<p>The hard part about infinite things on scroll is that the scroll bar is limited while the effect that you're wanting is not. So you have to either loop the scroll position like <a href="https://cdpn.io/GreenSock/pen/rNOebyo">this demo</a> (found in the <a href="https://greensock.com/st-demos/">ScrollTrigger demos section</a>) or hook directly into the scroll-related navigation events (like the wheel event) instead of actually using the actual scroll position.</p>
</blockquote>
<p>I figured that was the case and was happy to leave it &quot;as-is.&quot; A couple of days passed and Jack <a href="https://greensock.com/forums/topic/26922-missing-something-w-horizontal-scrolltrigger-%F0%9F%98%85/?do=findComment&amp;comment=131832&amp;_rid=80771">dropped a reply</a> that kinda blew my mind when I started digging into it. And now, after a bunch of going through it, I'm here to share the technique with you.</p>
<h2>Animate anything</h2>
<p>One thing that is often overlooked with GSAP, is that you can animate almost anything with it. This is often because visual things are what spring to mind when thinking about animation — the actual physical movement of something. Our first thought isn't about taking that process to a meta-level and animating from a step back.</p>
<p>But, think about animation work on a larger scale and then break it down into layers. For example, you play a cartoon. The cartoon is a collection of compositions. Each composition is a scene. And then you have the power to scrub through that collection of compositions with a remote, whether it’s on YouTube, using your TV remote, or whatever. There are almost three levels to what is happening.</p>
<p>And this is the trick we need for creating <strong>different types of infinite loops</strong>. This is the main concept right here. We animate the play head position of a timeline with a timeline. And then we can scrub that timeline with our scroll position.</p>
<p>Don't worry if that sounds confusing. We're going to break it down.</p>
<h2>Going “meta”</h2>
<p>Let's start with an example. We're going to create a tween that moves some boxes from left to right. Here it is.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="qBqxKGd"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/qBqxKGd">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Ten boxes that keep going left to right. That's quite straightforward with Greensock. Here, we use <code>fromTo</code> and <code>repeat</code> to keep the animation going. But, we have a gap at the start of each iteration. We’re also using <code>stagger</code> to space out the movement and that’s something that will play an important role as we continue.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gsap<span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  xPercent<span class="token operator">:</span> <span class="token number">100</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  xPercent<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  stagger<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  duration<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  repeat<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  ease<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>Now comes the fun part. Let's pause the tween and assign it to a variable. Then let’s create a tween that plays it. We can do this by tweening the <code>totalTime</code> of the tween, which allows us to get or set the tween’s playhead tween, while considering repeats and repeat delays.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">SHIFT</span> <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  xPercent<span class="token operator">:</span> <span class="token number">100</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  paused<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  xPercent<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  stagger<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  duration<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  repeat<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  ease<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">DURATION</span> <span class="token operator">=</span> <span class="token constant">SHIFT</span><span class="token punctuation">.</span><span class="token function">duration</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">gsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token constant">SHIFT</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  totalTime<span class="token operator">:</span> <span class="token constant">DURATION</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  repeat<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  duration<span class="token operator">:</span> <span class="token constant">DURATION</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  ease<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>This is our first “meta” tween. It looks <a href="https://codepen.io/jh3y/pen/MWbQBYL">exactly the same</a> but we’re adding another level of control. We can change things on this layer without affecting the original layer. For example, we could change the tween <code>ease</code> to <code>power4.in</code>. This completely changes the animation but without affecting the underlying animation. We're kinda safeguarding ourselves with a fallback.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ZEBrjpd"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ZEBrjpd">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Not only that, we might choose to repeat only a certain part of the timeline. We could do that with another <code>fromTo</code>, like this:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="eYBVjQp"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/eYBVjQp">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The code for that would be something like this.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gsap<span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span><span class="token constant">SHIFT</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  totalTime<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  totalTime<span class="token operator">:</span> <span class="token constant">DURATION</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  repeat<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  duration<span class="token operator">:</span> <span class="token constant">DURATION</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  ease<span class="token operator">:</span> <span class="token string">'none'</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>Do you see where this is going? Watch that tween. Although it keeps looping, the numbers flip on each repeat. But, the boxes are in the correct position.</p>
<h2>Achieving the “perfect” loop</h2>
<p>If we go back to our original example, there’s a noticeable gap between each repetition.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="MWbQBYL"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/MWbQBYL">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Here comes the trick. The part that unlocks everything. We need to build a perfect loop.</p>
<p>Let's start by repeating the shift three times. It's equal to using <code>repeat: 3</code>. Notice how we’ve removed <code>repeat: -1</code> from the tween.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getShift</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> gsap<span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  xPercent<span class="token operator">:</span> <span class="token number">100</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  xPercent<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  stagger<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  duration<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  ease<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">LOOP</span> <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">timeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getShift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getShift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getShift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></code></pre>
<p>We’ve turned the initial tween into a function that returns the tween and we add it to a new timeline three times. And this gives us the following.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="zYoRgEd"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/zYoRgEd">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>OK. But, there's still a gap. Now we can bring <a href="https://greensock.com/position-parameter/">in the <code>position</code> parameter</a> for adding and positioning those tweens. We want it to be seamless. That means inserting each each set of tweens before the previous one ends. That’s a value based on the <code>stagger</code> and the amount of elements.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> stagger <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token comment">// Used in our shifting tween</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">BOXES</span> <span class="token operator">=</span> gsap<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">LOOP</span> <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">timeline</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  repeat<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getShift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getShift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">BOXES</span><span class="token punctuation">.</span>length <span class="token operator">*</span> stagger<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getShift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">BOXES</span><span class="token punctuation">.</span>length <span class="token operator">*</span> stagger <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span></code></pre>
<p>If we update our timeline to repeat and watch it (while adjusting the <code>stagger</code> to see how it affects things)…</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="wvoyVxB"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/wvoyVxB">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>You'll notice that there's a window in the middle there that creates a &quot;seamless&quot; loop. Recall those skills from earlier where we manipulated time? That's what we need to do here: loop the window of time where the loop is &quot;seamless.&quot;</p>
<p>We could try tweening the <code>totalTime</code> through that window of the loop.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">LOOP</span> <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">timeline</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  paused<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  repeat<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getShift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getShift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">BOXES</span><span class="token punctuation">.</span>length <span class="token operator">*</span> stagger<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getShift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">BOXES</span><span class="token punctuation">.</span>length <span class="token operator">*</span> stagger <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">gsap<span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span><span class="token constant">LOOP</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  totalTime<span class="token operator">:</span> <span class="token number">4.75</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">{</span></span>
<span class="highlight-line">  totalTime<span class="token operator">:</span> <span class="token string">'+=5'</span><span class="token punctuation">,</span> <span class="token comment">// HIGHLIGHT</span></span>
<span class="highlight-line">  duration<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  ease<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  repeat<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>Here, we’re saying tween the <code>totalTime</code> from <code>4.75</code> and add the length of a cycle to that. The length of a cycle is <code>5</code>. And that’s the middle window of the timeline. We can use GSAP’s nifty <code>+=</code> to do that, which gives us this:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="oNYEKVQ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/oNYEKVQ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Take a moment to digest what's happening there. This could be the trickiest part to wrap your head around. We're calculating windows of time in our timeline. It’s kinda hard to visualise but I’ve had a go.</p>
<p>This is a demo of a watch that takes 12 seconds for the hands go round once. It's looped infinitely with <code>repeat: -1</code> and then we're using <code>fromTo</code> to animate a specific time window with a given duration. If you, reduce the time window to say <code>2</code> and <code>6</code>, then change the duration to <code>1</code>, the hands will go from 2 o'clock to 6 o'clock on repeat. But, we never changed the underlying animation.</p>
<p>Try configuring the values to see how it affects things.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="yLgOgpq"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/yLgOgpq">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>At this point, it’s a good idea to put together a formula for our window position. We could also use a variable for the duration it takes for each box to transition.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">DURATION</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">CYCLE_DURATION</span> <span class="token operator">=</span> <span class="token constant">BOXES</span><span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token constant">STAGGER</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">START_TIME</span> <span class="token operator">=</span> <span class="token constant">CYCLE_DURATION</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token constant">DURATION</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">END_TIME</span> <span class="token operator">=</span> <span class="token constant">START_TIME</span> <span class="token operator">+</span> <span class="token constant">CYCLE_DURATION</span></span></code></pre>
<p>Instead of using three stacked timelines, we could loop over our elements three times where we get the benefit of not needing to calculate the positions. Visualizing this as three stacked timelines is a neat way to grok the concept, though, and a nice way to help understand the main idea.</p>
<p>Let’s change our implementation to create one big timeline from the start.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">STAGGER</span> <span class="token operator">=</span> <span class="token number">0.5</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">BOXES</span> <span class="token operator">=</span> gsap<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">LOOP</span> <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">timeline</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  paused<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  repeat<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">SHIFTS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">BOXES</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">BOXES</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">BOXES</span><span class="token punctuation">]</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token constant">SHIFTS</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">BOX</span><span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token constant">LOOP</span><span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span><span class="token constant">BOX</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    xPercent<span class="token operator">:</span> <span class="token number">100</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    xPercent<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    duration<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    ease<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> index <span class="token operator">*</span> <span class="token constant">STAGGER</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>This is easier to put together and gives us the same window. But, we don't need to think about math. Now we loop through three sets of the boxes and position each animation according to the stagger.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="YzNPVJZ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/YzNPVJZ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>How might that look if we adjust the stagger? It will squish the boxes closer together.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="XWpJgRK"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/XWpJgRK">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>But, it’s broken the window because now the <code>totalTime</code> is out. We need to recalculate the window. Now’s a good time to plug in the formula we calculated earlier.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">DURATION</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">CYCLE_DURATION</span> <span class="token operator">=</span> <span class="token constant">STAGGER</span> <span class="token operator">*</span> <span class="token constant">BOXES</span><span class="token punctuation">.</span>length</span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">START_TIME</span> <span class="token operator">=</span> <span class="token constant">CYCLE_DURATION</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token constant">DURATION</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">END_TIME</span> <span class="token operator">=</span> <span class="token constant">START_TIME</span> <span class="token operator">+</span> <span class="token constant">CYCLE_DURATION</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">gsap<span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span><span class="token constant">LOOP</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  totalTime<span class="token operator">:</span> <span class="token constant">START_TIME</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">{</span></span>
<span class="highlight-line">  totalTime<span class="token operator">:</span> <span class="token constant">END_TIME</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  duration<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  ease<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  repeat<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>Fixed!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="YzNPrKX"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/YzNPrKX">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We could even introduce an “offset” if we wanted to change the starting position.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">STAGGER</span> <span class="token operator">=</span> <span class="token number">0.5</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">OFFSET</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token constant">STAGGER</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">START_TIME</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">CYCLE_DURATION</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token constant">STAGGER</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">OFFSET</span></span></code></pre>
<p>Now our window starts from a different position.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="VwPYMBm"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/VwPYMBm">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>But still, this isn’t great as it gives us these awkward stacks at each end. To get rid of that effect, we need to think about a &quot;physical&quot; window for our boxes. Or think about how they enter and exit the scene.</p>
<p>We’re going to use <code>document.body</code> as the window for our example. Let's update the box tweens to be individual timelines where the boxes scale up on enter and down on exit. We can use <code>yoyo</code> and <code>repeat: 1</code> to achieve entering and exiting.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token constant">SHIFTS</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">BOX</span><span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">BOX_TL</span> <span class="token operator">=</span> gsap</span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">timeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token constant">BOX</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        xPercent<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        xPercent<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        duration<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        ease<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span></span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token constant">BOX</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        scale<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        scale<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        repeat<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        yoyo<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        ease<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        duration<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token number">0</span></span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">LOOP</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">BOX_TL</span><span class="token punctuation">,</span> index <span class="token operator">*</span> <span class="token constant">STAGGER</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>Why are we using a timeline duration of <code>1</code>? It makes things easier to follow. We know the time is <code>0.5</code>  when the box is at the midpoint. It's worth noting that easing won't have the effect we usually think of here. In fact, easing will actually play a part in how the boxes position themselves. For example, an <code>ease-in</code> would bunch the boxes up on the right before they move across.</p>
<p>The code above gives us this.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="abpzVVJ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/abpzVVJ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Almost. But, our boxes disappear for a time in the middle. To fix this, let’s introduce the <code>immediateRender</code> property. It acts like <code>animation-fill-mode: none</code> in CSS. We’re telling GSAP that we don’t want to retain or pre-record any styles that are being set on a box.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token constant">SHIFTS</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">BOX</span><span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">BOX_TL</span> <span class="token operator">=</span> gsap</span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">timeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token constant">BOX</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        xPercent<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        xPercent<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        duration<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        ease<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        immediateRender<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// HIGHLIGHT</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span></span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token constant">BOX</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        scale<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        scale<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        repeat<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        zIndex<span class="token operator">:</span> <span class="token constant">BOXES</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        yoyo<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        ease<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        duration<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        immediateRender<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// HIGHLIGHT</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token number">0</span></span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">LOOP</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">BOX_TL</span><span class="token punctuation">,</span> index <span class="token operator">*</span> <span class="token constant">STAGGER</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>That small change fixes things for us! Note how we’ve also included <code>z-index: BOXES.length</code>. That should safeguard us against any <code>z-index</code> issues.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="JjEoMNa"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/JjEoMNa">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>There we have it! Our first infinite seamless loop. No duplicate elements and perfect continuation. We’re bending time! Pat yourself on the back if you’ve gotten this far! 🎉</p>
<p>If we want to see more boxes at once, we can tinker with the timing, stagger, and ease. Here, we have a <code>STAGGER</code> of <code>0.2</code> and we’ve also introduced <code>opacity</code> into the mix.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="WNRbMRM"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/WNRbMRM">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The key part here is that we can make use of <code>repeatDelay</code> so that the <code>opacity</code> transition is quicker than the scale. Fade in over 0.25 seconds. Wait 0.5 seconds. Fade back out over 0.25 seconds.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token constant">BOX</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    opacity<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// HIGHLIGHT</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    opacity<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// HIGHLIGHT</span></span>
<span class="highlight-line">    duration<span class="token operator">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    repeat<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    repeatDelay<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token comment">// HIGHLIGHT</span></span>
<span class="highlight-line">    immediateRender<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    ease<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    yoyo<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span></code></pre>
<p>Cool! We could do whatever we want with those in and out transitions. The main thing here is that we have our window of time that gives us the infinite loop.</p>
<h2>Hooking this up to scroll</h2>
<p>Now that we have a seamless loop, let’s attach it to scroll. For this we can use GSAP’s ScrollTrigger. This requires an extra tween to scrub our looping window. Note how we’ve set the loop to be <code>paused</code> now, too.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">LOOP_HEAD</span> <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">fromTo</span><span class="token punctuation">(</span><span class="token constant">LOOP</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  totalTime<span class="token operator">:</span> <span class="token constant">START_TIME</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">{</span></span>
<span class="highlight-line">  totalTime<span class="token operator">:</span> <span class="token constant">END_TIME</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  duration<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  ease<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  repeat<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  paused<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">SCRUB</span> <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token constant">LOOP_HEAD</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  totalTime<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  paused<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  duration<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  ease<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>The trick here is to use <code>ScrollTrigger</code> to scrub the play head of the loop by updating the <code>totalTime</code> of <code>SCRUB</code>. There are various ways we could set up this scroll. We could have it horizontal or bound to a container. But, what we're going to do is wrap our boxes in a <code>.boxes</code> element and pin that to the viewport. (This fixes its position in the viewport.) We'll also stick with vertical scrolling. Check the demo to see the styling for <code>.boxes</code> which sets things to the size of the viewport.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> ScrollTrigger <span class="token keyword">from</span> <span class="token string">'https://cdn.skypack.dev/gsap/ScrollTrigger'</span></span>
<span class="highlight-line">gsap<span class="token punctuation">.</span><span class="token function">registerPlugin</span><span class="token punctuation">(</span>ScrollTrigger<span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">ScrollTrigger<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  start<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  end<span class="token operator">:</span> <span class="token string">'+=2000'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  horizontal<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  pin<span class="token operator">:</span> <span class="token string">'.boxes'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token function-variable function">onUpdate</span><span class="token operator">:</span> <span class="token parameter">self</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token constant">SCRUB</span><span class="token punctuation">.</span>vars<span class="token punctuation">.</span>totalTime <span class="token operator">=</span> <span class="token constant">LOOP_HEAD</span><span class="token punctuation">.</span><span class="token function">duration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>progress</span>
<span class="highlight-line">    <span class="token constant">SCRUB</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>The important part is inside <code>onUpdate</code>. That’s where we set the <code>totalTime</code> of the tween based on the scroll progress. The <code>invalidate</code> call flushes any internally recorded positions for the scrub. The <code>restart</code> then sets the position to the new <code>totalTime</code> we set.</p>
<p>Try it out! We can go back and forth in the timeline and update the position.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="QWdwVrd"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/QWdwVrd">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>How cool is that? We can scroll to scrub a timeline that scrubs a timeline that is a window of a timeline. Digest that for a second because that's what's happening here.</p>
<h2>Time travel for infinite scrolling</h2>
<p>Up to now, we've been manipulating time. Now we're going to time travel!</p>
<p>To do this, we're going to use some other GSAP utilities and we're no longer going to scrub the <code>totalTime</code> of <code>LOOP_HEAD</code>. Instead, we're going to update it via proxy. This is another great example of going “meta” GSAP.</p>
<p>Let’s start with a proxy object that marks the playhead position.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">PLAYHEAD</span> <span class="token operator">=</span> <span class="token punctuation">{</span> position<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span></span></code></pre>
<p>Now we can update our <code>SCRUB</code> to update the <code>position</code>. At the same time, we can use GSAP’s <code>wrap</code> utility, which wraps the <code>position</code> value around the <code>LOOP_HEAD</code> duration. For example, if the duration is <code>10</code> and we provide the value <code>11</code>, we will get back <code>1</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">POSITION_WRAP</span> <span class="token operator">=</span> gsap<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">LOOP_HEAD</span><span class="token punctuation">.</span><span class="token function">duration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">SCRUB</span> <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token constant">PLAYHEAD</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  position<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token function-variable function">onUpdate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token constant">LOOP_HEAD</span><span class="token punctuation">.</span><span class="token function">totalTime</span><span class="token punctuation">(</span><span class="token constant">POSITION_WRAP</span><span class="token punctuation">(</span><span class="token constant">PLAYHEAD</span><span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  paused<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  duration<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  ease<span class="token operator">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>Last, but not least, we need to revise ScrollTrigger so it updates the correct variable on the <code>SCRUB</code>. That’s <code>position</code>, instead of <code>totalTime</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">ScrollTrigger<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  start<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  end<span class="token operator">:</span> <span class="token string">'+=2000'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  horizontal<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  pin<span class="token operator">:</span> <span class="token string">'.boxes'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token function-variable function">onUpdate</span><span class="token operator">:</span> <span class="token parameter">self</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token constant">SCRUB</span><span class="token punctuation">.</span>vars<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token constant">LOOP_HEAD</span><span class="token punctuation">.</span><span class="token function">duration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>progress</span>
<span class="highlight-line">    <span class="token constant">SCRUB</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>At this point we’ve switched to a proxy and we won’t see any changes.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="LYxEXej"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/LYxEXej">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We want an infinite loop when we scroll. Our first thought might be to scroll to the start when we complete scroll progress. And it would do exactly that, scroll back. Although that's what we want to do, we don't want the playhead to scrub backwards. This is where <code>totalTime</code> comes in. Remember? It gets or sets the position of the playhead according to the <code>totalDuration</code> which includes any repeats and repeat delays.</p>
<p>For example, say the duration of the loop head was <code>5</code> and we got there, we won't scrub back to 0. Instead, we will keep scrubbing the loop head to <code>10</code>. If we keep going, it'll go to <code>15</code>, and so on. Meanwhile, we'll keep track of an <code>iteration</code> variable because that tells us where we are in the scrub. We'll also make sure that we only update <code>iteration</code> when we hit the progress thresholds.</p>
<p>Let’s start with an <code>iteration</code> variable:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">let</span> iteration <span class="token operator">=</span> <span class="token number">0</span></span></code></pre>
<p>Now let’s update our ScrollTrigger implementation:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">TRIGGER</span> <span class="token operator">=</span> ScrollTrigger<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  start<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  end<span class="token operator">:</span> <span class="token string">'+=2000'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  horizontal<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  pin<span class="token operator">:</span> <span class="token string">'.boxes'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token function-variable function">onUpdate</span><span class="token operator">:</span> <span class="token parameter">self</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token constant">SCROLL</span> <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">SCROLL</span> <span class="token operator">></span> self<span class="token punctuation">.</span>end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token comment">// Go forwards in time</span></span>
<span class="highlight-line">      <span class="token constant">WRAP</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">SCROLL</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> self<span class="token punctuation">.</span>direction <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token comment">// Go backwards in time</span></span>
<span class="highlight-line">      <span class="token constant">WRAP</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token constant">SCRUB</span><span class="token punctuation">.</span>vars<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token punctuation">(</span>iteration <span class="token operator">+</span> self<span class="token punctuation">.</span>progress<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token constant">LOOP_HEAD</span><span class="token punctuation">.</span><span class="token function">duration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// HIGIHLIGHT</span></span>
<span class="highlight-line">      <span class="token constant">SCRUB</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>Notice how we're now factoring <code>iteration</code> into the <code>position</code> calculation. Remember that this gets wrapped with the scrubber. We're also detecting when we hit the limits of our scroll, and that's the point where we <code>WRAP</code>. This function sets the appropriate <code>iteration</code> value and sets the new scroll position.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">WRAP</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">iterationDelta<span class="token punctuation">,</span> scrollTo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  iteration <span class="token operator">+=</span> iterationDelta</span>
<span class="highlight-line">  <span class="token constant">TRIGGER</span><span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span>scrollTo<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">TRIGGER</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We have infinite scrolling! If you have one of those fancy mice with the scroll wheel that you can let loose on, give it a go! It’s fun!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="QWdwzMK"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/QWdwzMK">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Here’s a demo that displays the current <code>iteration</code> and <code>progress</code>:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="XWpJOaG"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/XWpJOaG">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Scroll snapping</h2>
<p>We're there. But, there are always ”nice to haves&quot; when working on a feature like this. Let's start with scroll snapping. GSAP makes this easy, as we can use <code>gsap.utils.snap</code> without any other dependencies. That handles snapping to a time when we provide the points. We declare the step between <code>0</code> and <code>1</code> and we have <code>10</code> boxes in our example. That means a snap of <code>0.1</code> would work for us.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">SNAP</span> <span class="token operator">=</span> gsap<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">snap</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token constant">BOXES</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span></span></code></pre>
<p>And that returns a function we can use to snap our <code>position</code> value.</p>
<p>We only want to snap once the scroll has ended. For that, we can use an event listener on ScrollTrigger. When the scroll ends, we are going to scroll to a certain <code>position</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">ScrollTrigger<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scrollEnd'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">scrollToPosition</span><span class="token punctuation">(</span><span class="token constant">SCRUB</span><span class="token punctuation">.</span>vars<span class="token punctuation">.</span>position<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>And here’s <code>scrollToPosition</code>:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">scrollToPosition</span> <span class="token operator">=</span> <span class="token parameter">position</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">SNAP_POS</span> <span class="token operator">=</span> <span class="token constant">SNAP</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">PROGRESS</span> <span class="token operator">=</span></span>
<span class="highlight-line">    <span class="token punctuation">(</span><span class="token constant">SNAP_POS</span> <span class="token operator">-</span> <span class="token constant">LOOP_HEAD</span><span class="token punctuation">.</span><span class="token function">duration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> iteration<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token constant">LOOP_HEAD</span><span class="token punctuation">.</span><span class="token function">duration</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">SCROLL</span> <span class="token operator">=</span> <span class="token function">progressToScroll</span><span class="token punctuation">(</span><span class="token constant">PROGRESS</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">TRIGGER</span><span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token constant">SCROLL</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>What are we doing here?</p>
<ol>
<li>Calculating the point in time to snap to</li>
<li>Calculating the current progress. Let’s say the <code>LOOP_HEAD.duration()</code> is <code>1</code> and we’ve snapped to <code>2.5</code>. That gives us a progress of <code>0.5</code> resulting in an <code>iteration</code> of <code>2</code>, where <code>2.5 - 1 * 2 / 1 === 0.5</code> . We calculate the progress so that it’s always between <code>1</code> and <code>0</code>.</li>
<li>Calculating the scroll destination. This is a fraction of the distance our ScrollTrigger can cover. In our example, we’ve set a distance of <code>2000</code> and we want a fraction of that. We create a new function <code>progressToScroll</code> to calculate it.</li>
</ol>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">progressToScroll</span> <span class="token operator">=</span> <span class="token parameter">progress</span> <span class="token operator">=></span></span>
<span class="highlight-line">  gsap<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">clamp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">TRIGGER</span><span class="token punctuation">.</span>end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> gsap<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> progress<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token constant">TRIGGER</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span></span></code></pre>
<p>This function takes the progress value and maps it to the largest scroll distance. But we use a clamp to make sure the value can never be <code>0</code> or <code>2000</code>. This is important. We are safeguarding against snapping to these values as it would put us in an infinite loop.</p>
<p>There is a bit to take in there. Check out this demo that shows the updated values on each snap.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="vYgEPzr"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/vYgEPzr">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Why are things a lot snappier? The scrubbing duration and ease have been altered. A smaller duration and punchier ease give us the snap.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">SCRUB</span> <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token constant">PLAYHEAD</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  position<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token function-variable function">onUpdate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token constant">LOOP_HEAD</span><span class="token punctuation">.</span><span class="token function">totalTime</span><span class="token punctuation">(</span><span class="token constant">POSITION_WRAP</span><span class="token punctuation">(</span><span class="token constant">PLAYHEAD</span><span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  paused<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  duration<span class="token operator">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  ease<span class="token operator">:</span> <span class="token string">'power3'</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>But, if you played with that demo, you'll notice there's an issue. Sometimes when we wrap around inside the snap, the playhead jumps about. We need to account for that by making sure we wrap when we snap — but, only when it's necessary.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">scrollToPosition</span> <span class="token operator">=</span> <span class="token parameter">position</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">SNAP_POS</span> <span class="token operator">=</span> <span class="token constant">SNAP</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">PROGRESS</span> <span class="token operator">=</span></span>
<span class="highlight-line">    <span class="token punctuation">(</span><span class="token constant">SNAP_POS</span> <span class="token operator">-</span> <span class="token constant">LOOP_HEAD</span><span class="token punctuation">.</span><span class="token function">duration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> iteration<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token constant">LOOP_HEAD</span><span class="token punctuation">.</span><span class="token function">duration</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">SCROLL</span> <span class="token operator">=</span> <span class="token function">progressToScroll</span><span class="token punctuation">(</span><span class="token constant">PROGRESS</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">PROGRESS</span> <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token constant">PROGRESS</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">WRAP</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token constant">PROGRESS</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">SCROLL</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">TRIGGER</span><span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token constant">SCROLL</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And now we have infinite scrolling with snapping!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="OJWVwLO"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/OJWVwLO">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>What next?</h2>
<p>We've completed the groundwork for a solid infinite scroller. We can leverage that to add things, like controls or keyboard functionality. For example, this could be a way to hook up &quot;Next&quot; and &quot;Previous&quot; buttons and keyboard controls. All we have to do is manipulate time, right?</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">NEXT</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">scrollToPosition</span><span class="token punctuation">(</span><span class="token constant">SCRUB</span><span class="token punctuation">.</span>vars<span class="token punctuation">.</span>position <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token constant">BOXES</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">PREV</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">scrollToPosition</span><span class="token punctuation">(</span><span class="token constant">SCRUB</span><span class="token punctuation">.</span>vars<span class="token punctuation">.</span>position <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token constant">BOXES</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token comment">// Left and Right arrow plus A and D</span></span>
<span class="highlight-line">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keydown'</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">37</span> <span class="token operator">||</span> event<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token constant">NEXT</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">39</span> <span class="token operator">||</span> event<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">68</span><span class="token punctuation">)</span> <span class="token constant">PREV</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.next'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token constant">NEXT</span><span class="token punctuation">)</span></span>
<span class="highlight-line">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.prev'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token constant">PREV</span><span class="token punctuation">)</span></span></code></pre>
<p>That could give us something like this.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="GRrJYpJ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/GRrJYpJ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We can leverage our <code>scrollToPosition</code> function and bump the value as we need.</p>
<h2>That’s it!</h2>
<p>See that? GSAP can animate more than elements! Here, we bent and manipulated time to create an almost perfect infinite slider. No duplicate elements, no mess, and good flexibility.</p>
<p>Let’s recap what we covered:</p>
<ul>
<li>We can animate an animation. 🤯</li>
<li>We can think about timing as a positioning tools when we manipulate time.</li>
<li>How to use ScrollTrigger to scrub an animation via proxy.</li>
<li>How to use some of GSAP’s awesome utilities to handle logic for us.</li>
</ul>
<p>You can now manipulate time! 😅</p>
<p>That concept of going &quot;meta” GSAP opens up a variety of possibilities. What else could you animate? Audio? Video? As for the ”Cover Flow” demo, here’s where that went!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="WNRvqJP"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/WNRvqJP">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p><strong>Stay Awesome! ʕ •ᴥ•ʔ</strong></p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Go Headless with Netlify CMS</title>
    <link href="https://jhey.dev/writing/go-headless-with-netlify-cms/"/>
    <updated>2021-03-31T12:15:15+01:00</updated>
    <id>https://jhey.dev/writing/go-headless-with-netlify-cms/</id>
    <content type="html"><![CDATA[
      <p>Got a site? How easy is it to make content changes? Are you using a CMS? What's a CMS? How do I set up a CMS?</p>
<p>After this article, you'll know how to get up and running with <a href="https://www.netlifycms.org/">Netlify CMS</a>. And you'll know some tricks to make your life easier.</p>
<ul>
<li>Set up Netlify CMS with Next.js</li>
<li>Use <code>netlify-cli</code></li>
<li>Make use of Netlify CMS Beta features!</li>
</ul>
<h2>What's a CMS?</h2>
<p>A content management system(CMS) is a convenient way for you to manage content. Think of it as a special place you visit that allows you to update your website. Update images, copy, content! It can live on the same domain or a completely different one.</p>
<p>What's a &quot;headless&quot; CMS? This means that our CMS is not coupled to a front end. It has no notion of how the content will get displayed. This is ideal. It gives portability to our content. Want to switch front-end frameworks? Cool! Drop all your content into something new. The underlying structure of what you're presenting doesn't have to change.</p>
<h2>Why CMS?</h2>
<p>We mentioned it there. But, &quot;Portability&quot;. Decoupling your content from the presentation layer has the benefit of &quot;Create once, display anywhere!&quot;. Also, &quot;Convenience&quot;. Realized you made a typo on your site? But, you're not at your desk? Log into your CMS, make the change, hit &quot;Publish&quot;, done! It also opens your content up for a more collaborative experience. Want to support different authors or guest posting? Create separate logins for those users.</p>
<h2>Netlify CMS</h2>
<p>Netlify CMS is a great option if you're new to CMS and even if you're not. It's an interesting offering that is &quot;Git Based&quot;. That means it creates and updates the content in your Git repo. This is great if you're new to CMSs as you have the ability to see the content changes on your machine as you develop. It's very <a href="https://www.netlifycms.org/docs/customization/">customizable</a> too. Think custom widgets and previews.</p>
<h2>Setting Up Netlify CMS</h2>
<p>For today's demo, we're going to set up Netlify CMS with a Next.js site. The set up is the same though for whatever you use. If you don't have an app to use, follow along and create a Next.js site.</p>
<p>The prerequisites?</p>
<ul>
<li>Github/Gitlab/Bitbucket account</li>
<li>Netlify account</li>
<li>Optional – An app to integrate. Or create a demo app from the steps below.</li>
</ul>
<p>For those in camp <strong>TL;DR</strong> , you can grab the demo app and starter kit from <a href="https://github.com/jh3y/netlify-cms-next-starter">this repo</a>.</p>
<h3>Create App</h3>
<p>Let's get started by creating an app.</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line"><span class="token function">yarn</span> create next-app netlify-cms-next-starter</span></code></pre>
<p>And for this app, I've gone ahead and pulled Tailwind in with the new shiny &quot;JIT&quot; compiler.</p>
<h3>Install Netlify CMS</h3>
<p>Then we need <code>netlify-cms-app</code>.</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line"><span class="token function">yarn</span> <span class="token function">add</span> netlify-cms-app</span></code></pre>
<h3>Set Up Admin Page</h3>
<p>Next, we need an &quot;admin&quot; page. This needs to be accessible via <code>/admin</code>. Different frameworks have different ways of doing this. We're using Next.js. We could drop an HTML file into <code>public</code> at <code>public/admin/index.html</code> or create <code>pages/admin/index.js</code>.</p>
<p>The straight HTML would use the CDN links for Netlify CMS and looks like this.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Admin: Netlify CMS &amp;&amp; Next.js Starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/assets/icons/favicon-32x32.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/assets/icons/logo-192x192.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/manifest.webmanifest<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://identity.netlify.com/v1/netlify-identity-widget.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token comment">&lt;!-- Include the script that builds the page and powers Netlify CMS --></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre>
<p>But, we've installed <code>netlify-cms-app</code>. That means we can start up the CMS from a module.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token constant">CMS</span> <span class="token keyword">from</span> <span class="token string">'netlify-cms-app'</span></span>
<span class="highlight-line"><span class="token comment">// Initialize the CMS object</span></span>
<span class="highlight-line"><span class="token constant">CMS</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<p>We're using Next.js though. And that means we can do something a little different with our setup.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> dynamic <span class="token keyword">from</span> <span class="token string">'next/dynamic'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">CMS_CONFIG</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Loading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"min-h-screen flex items-center justify-center"</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"text-gray-500 font-semibold text-xl"</span><span class="token operator">></span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">CMS</span> <span class="token operator">=</span> <span class="token function">dynamic</span><span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span></span>
<span class="highlight-line">    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'netlify-cms-app'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">CMS</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token constant">CMS</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">CMS_CONFIG</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">{</span> ssr<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> loading<span class="token operator">:</span> Loading <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Admin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span><span class="token constant">CMS</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">default</span> Admin</span></code></pre>
<p>Here, we load the <code>netlify-cms-app</code> dynamically into the browser with <code>next/dynamic</code> and then initialize the CMS.</p>
<h3>Set Up CMS Config</h3>
<p>The CMS is config-driven. We create a configuration file and this tells Netlify CMS what fields to show, what to update, etc. We need a <code>config.yml</code> file that our &quot;Admin&quot; page has access to. There are a variety of options for configuring the CMS. Here's a basic starting point. In this config, we're creating two collections. One handles global data such as site copy for example. The other is for standalone pages. This could be the same structure for creating blog posts, etc.</p>
<pre class="language-yaml"><code class="language-yaml"><span class="highlight-line"><span class="token key atrule">backend</span><span class="token punctuation">:</span></span>
<span class="highlight-line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> git<span class="token punctuation">-</span>gateway</span>
<span class="highlight-line">  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main</span>
<span class="highlight-line"><span class="token key atrule">publish_mode</span><span class="token punctuation">:</span> editorial_workflow</span>
<span class="highlight-line"><span class="token key atrule">media_folder</span><span class="token punctuation">:</span> <span class="token string">"public/images"</span></span>
<span class="highlight-line"><span class="token key atrule">public_folder</span><span class="token punctuation">:</span> <span class="token string">"/images"</span></span>
<span class="highlight-line"><span class="token key atrule">collections</span><span class="token punctuation">:</span></span>
<span class="highlight-line">  <span class="token punctuation">-</span> <span class="token key atrule">label</span><span class="token punctuation">:</span> <span class="token string">"Globals"</span></span>
<span class="highlight-line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"globals"</span></span>
<span class="highlight-line">    <span class="token key atrule">files</span><span class="token punctuation">:</span></span>
<span class="highlight-line">      <span class="token punctuation">-</span> <span class="token key atrule">label</span><span class="token punctuation">:</span> <span class="token string">"Site Copy"</span></span>
<span class="highlight-line">        <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"site_copy"</span></span>
<span class="highlight-line">        <span class="token key atrule">delete</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="highlight-line">        <span class="token key atrule">create</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="highlight-line">        <span class="token key atrule">file</span><span class="token punctuation">:</span> <span class="token string">"_data/copy.json"</span></span>
<span class="highlight-line">        <span class="token key atrule">fields</span><span class="token punctuation">:</span></span>
<span class="highlight-line">          <span class="token punctuation">-</span> <span class="token punctuation">{</span> <span class="token key atrule">label</span><span class="token punctuation">:</span> <span class="token string">"Tagline"</span><span class="token punctuation">,</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"tagline"</span><span class="token punctuation">,</span> <span class="token key atrule">widget</span><span class="token punctuation">:</span> <span class="token string">"string"</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">          <span class="token punctuation">-</span> <span class="token punctuation">{</span> <span class="token key atrule">label</span><span class="token punctuation">:</span> <span class="token string">"Headline"</span><span class="token punctuation">,</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"headline"</span><span class="token punctuation">,</span> <span class="token key atrule">widget</span><span class="token punctuation">:</span> <span class="token string">"string"</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"standalone pages"</span></span>
<span class="highlight-line">    <span class="token key atrule">label</span><span class="token punctuation">:</span> <span class="token string">"Standalone Pages"</span></span>
<span class="highlight-line">    <span class="token key atrule">folder</span><span class="token punctuation">:</span> <span class="token string">"standalone-pages"</span></span>
<span class="highlight-line">    <span class="token key atrule">slug</span><span class="token punctuation">:</span> <span class="token string">""</span></span>
<span class="highlight-line">    <span class="token key atrule">file</span><span class="token punctuation">:</span> <span class="token string">"standalone-pages/.mdx"</span></span>
<span class="highlight-line">    <span class="token key atrule">create</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="highlight-line">    <span class="token key atrule">extension</span><span class="token punctuation">:</span> mdx</span>
<span class="highlight-line">    <span class="token key atrule">format</span><span class="token punctuation">:</span> frontmatter</span>
<span class="highlight-line">    <span class="token key atrule">fields</span><span class="token punctuation">:</span></span>
<span class="highlight-line">      <span class="token punctuation">-</span> <span class="token punctuation">{</span> <span class="token key atrule">label</span><span class="token punctuation">:</span> <span class="token string">"Title"</span><span class="token punctuation">,</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token key atrule">widget</span><span class="token punctuation">:</span> <span class="token string">"string"</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token punctuation">-</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">          <span class="token key atrule">label</span><span class="token punctuation">:</span> <span class="token string">"SEO Meta Title"</span><span class="token punctuation">,</span></span>
<span class="highlight-line">          <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"metaTitle"</span><span class="token punctuation">,</span></span>
<span class="highlight-line">          <span class="token key atrule">widget</span><span class="token punctuation">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span></span>
<span class="highlight-line">          <span class="token key atrule">required</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        <span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token punctuation">-</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">          <span class="token key atrule">label</span><span class="token punctuation">:</span> <span class="token string">"SEO Meta Description"</span><span class="token punctuation">,</span></span>
<span class="highlight-line">          <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"metaDesc"</span><span class="token punctuation">,</span></span>
<span class="highlight-line">          <span class="token key atrule">widget</span><span class="token punctuation">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span></span>
<span class="highlight-line">          <span class="token key atrule">required</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        <span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token punctuation">-</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">          <span class="token key atrule">label</span><span class="token punctuation">:</span> <span class="token string">"Social Image"</span><span class="token punctuation">,</span></span>
<span class="highlight-line">          <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"socialImage"</span><span class="token punctuation">,</span></span>
<span class="highlight-line">          <span class="token key atrule">widget</span><span class="token punctuation">:</span> <span class="token string">"image"</span><span class="token punctuation">,</span></span>
<span class="highlight-line">          <span class="token key atrule">required</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        <span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token punctuation">-</span> <span class="token punctuation">{</span> <span class="token key atrule">label</span><span class="token punctuation">:</span> <span class="token string">"Body"</span><span class="token punctuation">,</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"body"</span><span class="token punctuation">,</span> <span class="token key atrule">widget</span><span class="token punctuation">:</span> <span class="token string">"markdown"</span> <span class="token punctuation">}</span></span></code></pre>
<p>We've got so many options for setting up Netlify CMS. The main things here are the &quot;backend&quot;, &quot;media_folder&quot;, and how our collections work.</p>
<p>When it comes to collections, we can define the types of files, where they live, how we create the content. For example, our standalone page collection. We are stating that the files will have the MDX <code>extension</code> and live under <code>standalone-pages/</code>. Each field under <code>fields</code> makes up the managed content for a page. In our example, we're using the <code>string</code> widget for text fields. But, the <code>body</code> of the file will be <code>markdown</code>. Note the <code>format</code> field on our collection? This tells Netlify CMS that we want to store the data in <code>frontmatter</code> and follow it with the content for <code>body</code>. It's worth checking out the &quot;<a href="https://www.netlifycms.org/docs/configuration-options/">Configuration</a>&quot; docs and &quot;<a href="https://www.netlifycms.org/docs/widgets/">Fields</a>&quot; docs.</p>
<h3>Creating An Identity</h3>
<p>If we start up our app and visit <code>/admin</code> we're hit with a login screen. The CMS is working! But, we don't have any credentials to log in with.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9ras3tzbxxyjwxr0knn.png" alt="Blank Netlify CMS login screen"></p>
<p>We need an identity for authentication. You can use different auth options. But, we're going to use Netlify Identity for auth. It's the quickest to set up and will give you exposure to using Netlify Identity if you've not used it before.</p>
<p>Open up your Netlify dashboard and you'll want to create a &quot;New site from Git&quot;. That's assuming you've pushed your app to a Git repository.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eau6wdrmxqztqvkxvrnh.png" alt="&quot;New site from Git&quot; button on Netlify dashboard"></p>
<p>This will take you through your site setup. Follow the prompts and Netlify will detect your build settings for you. Note how in our case, we get the neat &quot;Essential Next.js&quot; build plugin installed for us.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q2riuhpvyzov3rub9os.png" alt="New site set up on Netlify"></p>
<p>Now we need to enable &quot;Identity&quot; for our site. Navigate to the &quot;Identity&quot; tab and hit &quot;Enable Identity&quot;.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpxp1o5rlerrjmprx9oa.png" alt="Enabling Identity on Netlify dashboard"></p>
<p>Go into &quot;Settings and usage&quot; and hit &quot;Enable Git Gateway&quot;. It's a bit of scrolling down.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rqtbaqvomvxdvhjrs3l.png" alt="Enabling Git Gateway"></p>
<p>We are almost there! Now we need to invite a user to use our CMS. Hit &quot;Invite users&quot; and send an invite to an email address you want to use.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7r9nnrrwgjbwldf5c4y.png" alt="Inviting users"></p>
<p>Once you've done that, you'll see the user in the list.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu7pqiaip68cegv71vsc.png" alt="Updated users list"></p>
<p>Check your email and you should see one inviting you to join the app. But, if you hit the link, you'll get directed to your hosted site and nothing will happen. That's because we need to drop the identity widget into the page and run a piece of code for it.</p>
<p>This only needs to doing on our root page. We need the following code to run.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>netlifyIdentity<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  window<span class="token punctuation">.</span>netlifyIdentity<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'init'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      window<span class="token punctuation">.</span>netlifyIdentity<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'/admin/'</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And this script included.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://identity.netlify.com/v1/netlify-identity-widget.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span></code></pre>
<p>For our Next.js app, we could update our &quot;Home&quot; page to run the code in an effect and use <code>next/head</code> to include the script.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span></span>
<span class="highlight-line"><span class="token keyword">import</span> Head <span class="token keyword">from</span> <span class="token string">'next/head'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>netlifyIdentity<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      window<span class="token punctuation">.</span>netlifyIdentity<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'init'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">          window<span class="token punctuation">.</span>netlifyIdentity<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">            document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'/admin/'</span></span>
<span class="highlight-line">          <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">        <span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Head<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>title<span class="token operator">></span>Netlify <span class="token constant">CMS</span> <span class="token operator">&amp;&amp;</span> Next<span class="token punctuation">.</span>js Starter<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://identity.netlify.com/v1/netlify-identity-widget.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>Head<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>main className<span class="token operator">=</span><span class="token string">"min-h-screen flex items-center justify-center mx-auto flex-col prose"</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"text-center"</span><span class="token operator">></span>Netlify <span class="token constant">CMS</span> <span class="token operator">&amp;&amp;</span> Next<span class="token punctuation">.</span>js Starter<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3>Re-Deploy</h3>
<p>For the changes to take effect, we need to re-deploy our site. We can do this by pushing our changes up to our git repo. Netlify will detect the changes and re-deploy for us.</p>
<p>Or, we could use <code>netlify-cli</code> to re-deploy our site. I recommend making use of <code>netlify-cli</code>. It can improve your workflow a lot. Especially if you've already got your terminal open. To use <code>netlify-cli</code>, install it first.</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line"><span class="token function">npm</span> i -g netlify-cli</span></code></pre>
<p>Once installed, login with</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line">netlify login</span></code></pre>
<p>And then from within your repo directory, link your repo to your site with</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line">netlify <span class="token function">link</span></span></code></pre>
<p>Now you can build and deploy from the command line. Your build settings including plugins get pulled down for you too. It's a great way to get a deploy preview without opening a pull request too.</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line">netlify build</span>
<span class="highlight-line">netlify deploy</span></code></pre>
<p>When you're happy with what you're deploying.</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line">netlify build</span>
<span class="highlight-line">netlify deploy --prod</span></code></pre>
<h2>Access the CMS</h2>
<p>Once that's deployed, use your invite link from the email and you'll see a form to &quot;Complete your signup&quot;. Create a password and you'll get logged in.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wr8dtdez49ujdojzjbk.png" alt="Complete sign up form"></p>
<p>Now visit <code>/admin</code> and you'll get prompted for your CMS login details. Log in and we're in! We've set up a CMS for your site with Netlify CMS.</p>
<h2>Update Content</h2>
<p>Now we're in the CMS, have a poke around and explore what you can do. For example, upload an image or change the content in one of your collections. Here I've changed the content under a &quot;Tagline&quot; field in our &quot;Globals&quot; collection. When we're ready to push the changes, we hit &quot;Save&quot;, update the status to &quot;Ready&quot;, and then hit &quot;Publish&quot;.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwumfx60lbaukqsj4ars.png" alt="Publishing copy changes"></p>
<p>Next, it's a waiting game. Wait for the changes to get pushed. Pull them down to your repo in your terminal and you'll see that in our case <code>_data/copy.json</code> has updated. This was the path we defined in our <code>config.yml</code> file.</p>
<p>Now you can integrate your content any way you like with your frontend. For example, in our demo app, I've added an import path for <code>_data</code>. And I've updated the &quot;Home&quot; page to display the headline and tagline.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span></span>
<span class="highlight-line"><span class="token keyword">import</span> Head <span class="token keyword">from</span> <span class="token string">'next/head'</span></span>
<span class="highlight-line"><span class="token keyword">import</span> copy <span class="token keyword">from</span> <span class="token string">'@data/copy.json'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Head<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>title<span class="token operator">></span>Netlify <span class="token constant">CMS</span> <span class="token operator">&amp;&amp;</span> Next<span class="token punctuation">.</span>js<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://identity.netlify.com/v1/netlify-identity-widget.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>Head<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>main className<span class="token operator">=</span><span class="token string">"min-h-screen flex items-center justify-center mx-auto flex-col prose"</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"text-center"</span><span class="token operator">></span><span class="token punctuation">{</span>copy<span class="token punctuation">.</span>headline<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span>copy<span class="token punctuation">.</span>tagline<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>At this stage, you've got a working CMS for your app. Explore <a href="https://www.netlifycms.org/docs/">the docs</a> and manage your content any way you like. But, we're not quite done yet. Let's improve this setup.</p>
<h2>Local Backend</h2>
<p>We've got a working CMS. But, the workflow could be slow. Especially if we're feeling out what we're going to put in our CMS. We haven't got time to keep deploying, making changes in the CMS, and waiting for things to get pushed to Git. Builds take time and they'll use up your build minutes on Netlify.</p>
<p>To get around this we're going to use a <a href="https://www.netlifycms.org/docs/beta-features/">Beta feature</a>, <code>local_backend</code>. In fact, if you've been using Netlify CMS already, this trick might help you out a bunch if you didn't know about it.</p>
<p>To use <code>local_backend</code>, add it to our <code>config.yml</code> file.</p>
<pre class="language-yaml"><code class="language-yaml"><span class="highlight-line"><span class="token key atrule">local_backend</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="highlight-line"><span class="token key atrule">backend</span><span class="token punctuation">:</span></span>
<span class="highlight-line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> git<span class="token punctuation">-</span>gateway</span>
<span class="highlight-line">  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main</span>
<span class="highlight-line"><span class="token key atrule">publish_mode</span><span class="token punctuation">:</span> editorial_workflow</span>
<span class="highlight-line"><span class="token key atrule">media_folder</span><span class="token punctuation">:</span> <span class="token string">"public/images"</span></span>
<span class="highlight-line"><span class="token key atrule">public_folder</span><span class="token punctuation">:</span> <span class="token string">"/images"</span></span></code></pre>
<p>And then we have one more step. We need to use <code>netlify-cms-proxy-server</code> when we are developing. We can update our <code>dev</code> script to accommodate this.</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"npx netlify-cms-proxy-server &amp; next dev"</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Run our dev server and visit <code>/admin</code>. We're in! No log-in screen required. Make some content changes, hit publish, and the content gets updated in your directory. Awesome. This improves our workflow tenfold. No more waiting.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjzuvwv2u2e5awkps93n.png" alt="Netlify CMS locally"></p>
<p>This is all possible because of <code>netlify-cms-proxy-server</code> which creates a local unauthenticated server. This is what the CMS runs on when we use <code>local_backend</code>. You can configure <code>local_backend</code> in different ways. And you don't have to worry if you deploy a <code>config.yml</code> file with <code>local_backend</code> on.</p>
<p>But, if that doesn't sit right with you, you can write a node script that you run when running your dev server.</p>
<p>Here's a script you can use that copies your <code>config.yml</code> to the <code>public</code> directory on change. It uses <code>chokidar</code> to watch the file changes and logs any activity with <code>pino</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> chokidar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'chokidar'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'pino'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span> prettyPrint<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token comment">// Write file to public/config.yml</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">writeConfig</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Updating Netlify CMS Config'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">CONFIG</span> <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./admin/config.yml'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/public/config.yml</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">local_backend: true\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CONFIG</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token string">'utf-8'</span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token comment">// Set up Netlify CMS Config Watching</span></span>
<span class="highlight-line">logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Setting up Netlify CMS config watch'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">chokidar<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/admin/config.yml</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> writeConfig<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token comment">// Write on script run so it's there</span></span>
<span class="highlight-line"><span class="token function">writeConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<p>In this script, we are copying the config and appending the <code>local_backend</code> option. This means we no longer need a committed version of <code>config.yml</code> inside <code>public</code>. In the demo app, I've moved it into an <code>admin</code> directory along with the watch script.</p>
<p>To have that run at dev time, we can update our <code>package.json</code> script to run this alongside <code>netlify-cms-proxy-server</code>.</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"npx netlify-cms-proxy-server &amp; next dev &amp; node admin/config-watcher.js"</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>That's It!</h2>
<p>That's how to get up and running with a &quot;Headless&quot; CMS. In this case, Netlify CMS. It's a neat solution and a great entry point if you've not set up a CMS for yourself before.</p>
<p>I'd recommend setting up a CMS for your sites. Especially your personal portfolio sites. How about trying Netlify CMS? Get set up, have a look around <a href="https://www.netlifycms.org/docs/">the docs</a>, <a href="https://www.netlifycms.org/docs/customization/">customize it</a> to your needs!</p>
<p>Want to try it out with Next.js? Check out the <a href="https://github.com/jh3y/netlify-cms-next-starter">demo repository</a> that's set up with Tailwind and use that as a starting point.</p>
<p>As always, thanks for reading. Wanna know more? Wanna see something else? Come find me on <a href="https://twitter.com/jh3yy">Twitter</a>!</p>
<p><strong>Stay awesome! ʕ •ᴥ•ʔ</strong></p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Squeaky Portraits: Having Fun with the CSS path() Function</title>
    <link href="https://jhey.dev/writing/squeaky-portraits-having-fun-with-the-css-path-function/"/>
    <updated>2021-03-25T13:15:15+00:00</updated>
    <id>https://jhey.dev/writing/squeaky-portraits-having-fun-with-the-css-path-function/</id>
    <content type="html"><![CDATA[
      <p>With the Chrome 88 release, we got support for <code>clip-path: path()</code>. That means it now has support in &quot;most&quot; major browsers!</p>
<p>With <code>path()</code>, we’re able to use path definitions for a <code>clip-path</code> (Catch up on what <code>clip-path</code> is here). These path definition strings are the same as those we can use with the SVG path element. What's cool about this is that it provides a way to create shapes that before may have meant using SVG. We can even create paths that break without requiring any tricks.</p>
<p>With the increased support came an opportunity to try something fun with it! Let’s make “Squeaky Portraits”! A fun take on using <code>clip-path: path()</code> to clip the viewable area of an element into these “Nickelodeon-esque” splats.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1360019670393360389?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h2>Creating a Path</h2>
<p>First up, we need our own SVG style path definition string. And in this case, more than one. The neat thing with <code>clip-path</code> is that we can transition them with CSS. As long as the <code>clip-path</code> function and number of nodes are consistent, we can transition.</p>
<p>To make some paths, we can hop in any vector graphic editor. In this case, I’m using Figma. And instead of creating the paths from scratch, we can use a desired &quot;splat&quot; as a foundation. This one looks good!</p>
<p><img src="https://res.cloudinary.com/jh3yy/image/upload/v1619726065/jhey.dev/squeaky-portraits/splat_ego6zy.png" alt="Splat Example Found Online"></p>
<p>The trick here is to create more splats based on the foundation splat. And we need to do this without introducing or removing any nodes. These are the three splats I came up with. But, you could make any shapes you like as long as you stick to that rule!</p>
<p><img src="https://res.cloudinary.com/jh3yy/image/upload/v1619726065/jhey.dev/squeaky-portraits/splats_nrfhns.png" alt="Three Different Splats Built From One Splat"></p>
<p>You may notice that the third splat has two blobs that separate off from the main shape. This is fine. Because SVG path definitions allow us to do this. We can start a line, close it, and move to another point to start another.</p>
<p>But didn't I say they needed a consistent number of points? They do. And they do! Those two blobs appear for each splat. But, the trick is that we can move them behind the rest of the path when they aren't needed.</p>
<p><img src="https://res.cloudinary.com/jh3yy/image/upload/v1619726065/jhey.dev/squeaky-portraits/splat-path_vnebjl.png" alt="Figma Showing Two Blobs Behind Main Path"></p>
<p>Once we have our splats, we can export them and grab the path definition strings.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ExZxbNW"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ExZxbNW">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Applying Splats</h2>
<p>To apply the splats, we're going to create variables for each path.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.portrait</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--splat</span><span class="token punctuation">:</span> <span class="token string">"M161 188.375C170 193.5 177.919 193.854 186 188.375C197.919 180.294..."</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--splattier</span><span class="token punctuation">:</span> <span class="token string">"M161 188.375C170 193.5 177.919 193.854 186 188.375C197.919..."</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--splatted</span><span class="token punctuation">:</span> <span class="token string">"M232.5 256C225 251 209.5 262.5 224 281.5C232.736 292.948..."</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>These are the paths we’ve lifted straight out of the exported SVG.</p>
<p>We’re going with the names “splat”, “splattier”, and “splatted”. Naming things is hard. Ha! But, if we take for example the “splatted” SVG.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 300 300<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M232.5 256C225 251 209.5 262.5 224 281.5C232.736 292.948 238.561 297.756 251 290.5C257 287 256.114 271.924 250 264.5C243.886 257.076 240 261 232.5 256ZM147 92.5C118.738 94.6708 118 17 93 44C68 71 123.543 76.5 108 101.5C90.5 115 70.81 98.3664 64 115C56.7766 132.643 91.1967 136.948 90.5 156C89.4406 184.974 19.1766 161.499 24.5 190C29.9178 219.006 78.6461 172.635 100 193C130.207 221.808 1 248.5 58.5 291.5C94.5576 318.465 114.991 206.551 140.5 211C183.5 218.5 134.5 294 186.5 279.5C207.5 273 174.638 224.658 196 204C223.117 177.777 275.916 253 291.5 218.5C311.375 174.5 228.698 194.565 224 160C219.553 127.282 291.5 123.5 267.5 87.5C238.5 57 247 125.5 196 105.5C147 92.5 229.5 13.5 173.5 2.5C140.5 2.49999 183.532 89.694 147 92.5ZM45 92.5C36.8766 80.3149 14.1234 75.3149 6.00001 87.5C0.584412 95.6234 2.00001 120.357 14.5 115C27.9606 109.231 36.8766 124.685 45 112.5C50.4156 104.377 50.4156 100.623 45 92.5Z<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#A91CFF<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span></span></code></pre>
<p>We’re lifting out the <code>d</code> attribute from the <code>path</code> elements and creating CSS variables for them. Next, we need an element to apply these to. Let's create an element with the class &quot;portrait&quot;.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>portrait<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>Next, apply some styling to it:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.portrait</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--splat</span><span class="token punctuation">:</span> <span class="token string">"M161 188.375C170 193.5 177.919 193.854 186 188.375C197.919 180.294..."</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--splattier</span><span class="token punctuation">:</span> <span class="token string">"M161 188.375C170 193.5 177.919 193.854 186 188.375C197.919..."</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--splatted</span><span class="token punctuation">:</span> <span class="token string">"M232.5 256C225 251 209.5 262.5 224 281.5C232.736 292.948..."</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--none</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> #daa3f5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">path</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--clip<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--none<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transition</span><span class="token punctuation">:</span> clip-path 0.2s<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Here’s a demo where you can switch between the different clip states:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="wvobxVy"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/wvobxVy">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Note how the shape transitions between the three splat shapes. But, also note how we've given our element an explicit height and width. This size matches the dimensions of our SVG exports. This is <em>important</em>. This is the one drawback of using <code>clip-path: path()</code>. It's not responsive. The path definition is relative to the dimensions of your element. This is the same problem faced by CSS motion paths.</p>
<p>This is fine if we're mindful of the sizes of things we're clipping. We could also create different path variables for different viewport sizes. But, if you have images that resize in a fluid way, other solutions using SVG are going to be more robust.</p>
<h2>Interaction</h2>
<p>For our demo, we want the splat to be interactive. We can do this with CSS alone. We can use a scoped CSS variable <code>--clip</code> to control the current clip. And then we can update that variable on both <code>:hover</code> and <code>:active</code>. The <code>--active</code> state is triggered when we press our pointer down.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.portrait</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">path</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--clip<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--splat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.portrait:hover</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--splattier<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.portrait:active</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--splatted<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Throw that together and we get something like this. Try hovering over the splat and pressing it.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="yLVdewB"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/yLVdewB">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Adding Some Character</h2>
<p>Now we can transition the splat, it needs a little something extra. What if we transform it in those states too?</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.portrait</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transition</span><span class="token punctuation">:</span> clip-path 0.2s<span class="token punctuation">,</span> transform 0.2s<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--scale<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--rotate<span class="token punctuation">,</span> 0deg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.portrait:hover</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--scale</span><span class="token punctuation">:</span> 1.15<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--rotate</span><span class="token punctuation">:</span> 30deg<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.portrait:active</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--scale</span><span class="token punctuation">:</span> 0.85<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--rotate</span><span class="token punctuation">:</span> -10deg<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Using scoped CSS variables to apply a <code>transform</code>, we can add something. Here we update the <code>scale</code> and <code>rotation</code> of our splat. We can experiment with different values and play with different effects here. Translating the element a little could look good?</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="wvoLGJL"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/wvoLGJL">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Adding a Portrait.</h2>
<p>Now for the fun stuff! I wouldn't recommend using these pictures of me. But, you can if you want ha! I had this idea that I'd take three silly pictures of myself and have them respond to the user. I got some help and ended up with these three pictures.</p>
<p><img src="https://res.cloudinary.com/jh3yy/image/upload/v1619726066/jhey.dev/squeaky-portraits/silly-poses_amqe68.png" alt="Three Silly Poses"></p>
<p>Then we need to put them into the portrait.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>portrait<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>portrait__img<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/me--standing.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Me<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>portrait__img<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/me--noticing.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Me<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>portrait__img<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/me--falling.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Me<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>That won’t look great. They need some styles.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.portrait</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.portrait__img</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Almost.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOVjrEB"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOVjrEB">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>How can we show and hide them on <code>:hover</code> and <code>:active</code>. It's a little verbose but we can use <code>nth-of-type</code> with <code>display: none</code>.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.portrait__img</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.portrait__img:nth-of-type(1)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="token selector">.portrait:hover .portrait__img:nth-of-type(1),
.portrait:hover .portrait__img:nth-of-type(3)</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.portrait:hover .portrait__img:nth-of-type(2)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="token selector">.portrait:active .portrait__img:nth-of-type(1),
.portrait:active .portrait__img:nth-of-type(2)</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.portrait:active .portrait__img:nth-of-type(3)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Why not refactor those styles and group them up? The cascade will kick in and we won't get the effect we want.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="qBqzNrv"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/qBqzNrv">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Parallax Icons</h2>
<p>We're getting there but it looks a little bland. We could create a rudimentary parallax effect if we pull in an icon. Let's go with this one.</p>
<p><img src="https://res.cloudinary.com/jh3yy/image/upload/v1619726066/jhey.dev/squeaky-portraits/code-brackets_nmzba9.png" alt="Code Brackets Icon"></p>
<p>The trick here is to use an image as a background for our element but size it so that it tiles with <code>background-repeat</code>.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.portrait</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"/code-icon.svg"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>10<span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 70%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Neat.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="XWNLKqy"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/XWNLKqy">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>But, we want parallax! To get that parallax effect, we can update the <code>background-position</code> in response to pointer movement. And we can map the pointer position against some limit that we define.</p>
<p>Let's start by creating a utility that generates a mapping function for us. The returned function will give us the result of a value in one range mapped onto another.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">genMapper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">inputLower<span class="token punctuation">,</span> inputUpper<span class="token punctuation">,</span> outputLower<span class="token punctuation">,</span> outputUpper</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> inputRange <span class="token operator">=</span> inputUpper <span class="token operator">-</span> inputLower</span>
<span class="highlight-line">  <span class="token keyword">const</span> outputRange <span class="token operator">=</span> outputUpper <span class="token operator">-</span> outputLower</span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token function-variable function">MAP</span> <span class="token operator">=</span> <span class="token parameter">input</span> <span class="token operator">=></span> outputLower <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>input <span class="token operator">-</span> inputLower<span class="token punctuation">)</span> <span class="token operator">/</span> inputRange<span class="token punctuation">)</span> <span class="token operator">*</span> outputRange <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token constant">MAP</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Take a moment to understand what’s happening here. For example, if our input range was <code>0</code> to <code>500</code> and our output range was <code>0</code> to <code>100</code>. What would the result of calling the returned function be with <code>250</code>? It would be <code>50</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Generate a function</span></span>
<span class="highlight-line"><span class="token function">genMapper</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token comment">// Returns a function by going through these steps</span></span>
<span class="highlight-line"><span class="token keyword">const</span> inputRange <span class="token operator">=</span> <span class="token number">500</span></span>
<span class="highlight-line"><span class="token keyword">const</span> outputRange <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token parameter"><span class="token constant">MAP</span></span> <span class="token operator">=></span> <span class="token parameter">input</span> <span class="token operator">=></span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>input <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token comment">// If our input value is 250</span></span>
<span class="highlight-line"><span class="token punctuation">(</span><span class="token number">250</span> <span class="token operator">/</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span></span>
<span class="highlight-line"><span class="token number">0.5</span> <span class="token operator">*</span> <span class="token number">100</span></span>
<span class="highlight-line"><span class="token comment">// The result!</span></span>
<span class="highlight-line"><span class="token number">50</span></span></code></pre>
<p>Once we have our utility function to generate the mapping functions, we need a limit to use with it. And we need to generate a mapper for both the horizontal and vertical axes.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">LIMIT</span> <span class="token operator">=</span> <span class="token number">25</span> <span class="token comment">// The amount our icons can move in pixels in either direction</span></span>
<span class="highlight-line"><span class="token keyword">const</span> getX <span class="token operator">=</span> <span class="token function">genMapper</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token constant">LIMIT</span><span class="token punctuation">,</span> <span class="token constant">LIMIT</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> getY <span class="token operator">=</span> <span class="token function">genMapper</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token constant">LIMIT</span><span class="token punctuation">,</span> <span class="token constant">LIMIT</span><span class="token punctuation">)</span></span></code></pre>
<p>The final part is tying that up to an event listener. We destructure the <code>x</code> and <code>y</code> value from the event and set CSS variables on the portrait element. The value comes from passing <code>x</code> and <code>y</code> into the respective mapping functions.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">PORTRAIT</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.portrait'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pointermove'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token constant">PORTRAIT</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--x'</span><span class="token punctuation">,</span> <span class="token function">getX</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">PORTRAIT</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--y'</span><span class="token punctuation">,</span> <span class="token function">getY</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>And now we have parallax icons!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="vYyqKQL"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/vYyqKQL">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>The Squeak</h2>
<p>Last touch. It's in the title. We need some squeaks. I usually find audio bytes on sites like <a href="https://freesound.org">freesound.org</a>. You can get them in all places though and even record them yourself if you want.</p>
<p>It’s not a bad idea to create an object where you can reference your <code>Audio</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">AUDIO</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token constant">IN</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token string">'/squeak-in.mp3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token constant">OUT</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token string">'/squeak-out.mp3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Then, to play an audio clip, all we need do is</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token constant">AUDIO</span><span class="token punctuation">.</span><span class="token constant">IN</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<p>We need to integrate this with our portrait. We can use the <code>pointerdown</code> and <code>pointerup</code> events here – the idea being that we play one squeak when we press and another on release.</p>
<p>If a user clicks the portrait a lot in quick succession this could cause undesirable effects. The trick is to play the desired sound and at the same time, stop the other. To &quot;stop&quot; a piece of <code>Audio</code>, we can pause it and set the <code>currentTime</code> to <code>0</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token constant">PORTRAIT</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pointerdown'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token constant">AUDIO</span><span class="token punctuation">.</span><span class="token constant">OUT</span><span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">AUDIO</span><span class="token punctuation">.</span><span class="token constant">IN</span><span class="token punctuation">.</span>currentTime <span class="token operator">=</span> <span class="token constant">AUDIO</span><span class="token punctuation">.</span><span class="token constant">OUT</span><span class="token punctuation">.</span>currentTime <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="highlight-line">  <span class="token constant">AUDIO</span><span class="token punctuation">.</span><span class="token constant">IN</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">PORTRAIT</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pointerup'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token constant">AUDIO</span><span class="token punctuation">.</span><span class="token constant">IN</span><span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">AUDIO</span><span class="token punctuation">.</span><span class="token constant">IN</span><span class="token punctuation">.</span>currentTime <span class="token operator">=</span> <span class="token constant">AUDIO</span><span class="token punctuation">.</span><span class="token constant">OUT</span><span class="token punctuation">.</span>currentTime <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="highlight-line">  <span class="token constant">AUDIO</span><span class="token punctuation">.</span><span class="token constant">OUT</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>And that gives us a “Squeaky Portrait”!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOVjMQR"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOVjMQR">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>That’s It!</h2>
<p>That's how you make &quot;Squeaky Portraits&quot;. But, the actionable thing here is having fun while trying out new things.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="qBqqKRw"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/qBqqKRw">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>I could have morphed a couple of shapes and left it there. But, why stop there? Why not come up with an idea and have some fun with it? It's a great way to try things out and explore techniques.</p>
<p>We:</p>
<ul>
<li>Created the clips</li>
<li>Morphed them with transitions</li>
<li>Made interactive images</li>
<li>Added Audio</li>
<li>Created parallax with a mapping utility</li>
</ul>
<p>What could you do with <code>clip-path: path()</code>? What would your &quot;Squeaky Portrait&quot; look like? It could do something completely different. I'd love to see what you make!</p>
<p>As always, thanks for reading. Wanna see more? Come find me on <a href="https://twitter.com/jh3yy">Twitter</a> or check out the <a href="https://twitch.tv/jh3yy">the live stream</a>!</p>
<p>p.s If you want to grab all the code. It’s here in this <a href="https://codepen.io/collection/nkONJa">CodePen collection</a>.</p>
<p><strong>Stay Awesome! ʕ •ᴥ•ʔ</strong></p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Paint Your Github Profile with Serverless</title>
    <link href="https://jhey.dev/writing/paint-your-github-profile-with-serverless/"/>
    <updated>2021-03-08T00:00:00+00:00</updated>
    <id>https://jhey.dev/writing/paint-your-github-profile-with-serverless/</id>
    <content type="html"><![CDATA[
      <p>I'm often asked things like &quot;What should I make?&quot; or &quot;Where do the ideas come from?&quot;. I've <a href="https://dev.to/jh3y/playfulness-in-code-supercharge-your-learning-by-having-fun-39hf">covered how I generate ideas before</a>. The gist being, write down all your ideas, great or small.</p>
<p>This works great for demos. But what about when you want to learn something a little more applied? Like putting together a project or trying out more tools.</p>
<p>One thing I advocate is building tools. Tools that you want to use. Tools that solve a problem for you. That's right, make for yourself.</p>
<p>This has many benefits:</p>
<ul>
<li>You're invested in the idea.</li>
<li>You get to learn many things to solve your problem.</li>
<li>You have something to show potential employers/clients that's different.</li>
</ul>
<p>That last point could be particularly useful. Interesting side projects make for good talking points. I can't tell you how many times I've had comments because of my <a href="https://github.com/jh3y">Github profile</a>. Because the hiring staff check it out and see an image painted in the contributions graph.</p>
<p>Today, we're going to walk through a project I made last year. &quot;<a href="https://github.com/jh3y/vincent-van-git">Vincent van Git</a>&quot; gives you a way to paint your Github contributions graph. I want to cover the &quot;What?&quot;, the &quot;Why?&quot;, and the &quot;How?&quot;.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1324811198857125890?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<hr>
<h2>What?</h2>
<p>As mentioned above, &quot;Vincent van Git&quot; helps you paint your Github contributions graph. It's a web app that generates a shell script for you to run on your machine. The result is that you populate your graph with commits that paint a picture. Over time (around 3 months), that picture will move and you'll need to recreate it.</p>
<p><img src="https://res.cloudinary.com/jh3yy/image/upload/f_auto,q_auto/v1615228999/jhey.dev/jh3y-github-profile_tqakr3.png" alt="Github profile for jh3y with painting"></p>
<h2>Why?</h2>
<p>This part's split into two, &quot;Why make it?&quot; and &quot;Why make it?&quot; ha.</p>
<p>First. Before making &quot;Vincent&quot;, I'd always used the package &quot;<a href="https://github.com/gelstudios/gitfiti">gitfiti</a>&quot;. It's a command-line tool for applying graffiti to your contributions graph. It uses Python and you draw images with Arrays.</p>
<pre class="language-python"><code class="language-python"><span class="highlight-line">KITTY <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">]</span></span></code></pre>
<p>If you squint hard enough, you'll see the kitty. But, the fact it's a non-visual tool for a visual result made it tricky for me to use. It's a great tool, don't get me wrong. But, I always wanted a visual way to make my creations.</p>
<p>Now, I could've created a front end to generate that Array. And then used it with gitfiti. But, why stop there? Why not have a go at creating my own version from scratch?</p>
<p>This leads us to the second &quot;Why?&quot;. Because there's an opportunity to learn a variety of different tools here. There's also the opportunity to try new things out. And this goes back to the point we made in the introduction. With side projects that aren't the norm, you get to solve problems that aren't the norm. And that will help you develop your skills as a problem solver.</p>
<p>Before diving into the things learned and how. Here are some of the things I got to try out more.</p>
<ul>
<li><a href="https://react-hook-form.com/"><code>react-hook-form</code></a></li>
<li><a href="https://moment.github.io/luxon/"><code>luxon</code></a></li>
<li><a href="https://cheerio.js.org/"><code>cheerio</code></a></li>
<li><a href="https://github.com/sindresorhus/electron-store"><code>electron-store</code></a></li>
<li><a href="https://github.com/sindresorhus/electron-dl"><code>electron-dl</code></a></li>
<li><a href="https://tonejs.github.io/"><code>tone.js</code></a></li>
</ul>
<p>They aren't likely to pop up in a tutorial CRUD app. That's not to say we shouldn't follow those tutorials when we're starting out. But, when we start looking for &quot;What's next?&quot;, there are advantages to being adventurous.</p>
<p><img src="https://res.cloudinary.com/jh3yy/image/upload/f_auto,q_auto/v1615214203/jhey.dev/todo-app-todo-app_iknloh.jpg" alt="Spider Man pointing at Spider Man meme with the words &quot;Todo App by X&quot; and &quot;Todo App by Y&quot;"></p>
<h2>How?</h2>
<p>It's time for &quot;How?&quot;. I'm going to break this part down into different sections. I won't dig in too deep but I will go over how certain things are possible. The talking points so to speak.</p>
<h3>Electron</h3>
<p>I had it in my head I wanted to create an <code>electron</code> app for &quot;Vincent&quot;. A desktop app I could fire up, draw something, and hit &quot;Submit&quot;. It didn't pan out that way but that's how it started.</p>
<p>And this was a key part of the project. I had chosen to use <code>electron</code> because I wanted to make a React app that could use Node on the user's machine. That would provide a way to invoke &quot;git&quot; from within <code>electron</code>.</p>
<p>I hadn't played with this idea much before but it was a chance to get familiar with the <a href="https://www.electronjs.org/docs/api/ipc-renderer">ipcRenderer</a>. That's a way you can communicate between the <code>renderer</code> and the <code>main</code> process. That means you can hit a button in React world and fire a function in Node world.</p>
<p>I put together <a href="https://github.com/jh3y/electron-parcel-react-starter">this repo</a> that shows how this is possible. On OSX, if you press a message button in the front end, it uses <code>say</code> on the command line to read out the message.</p>
<h3>Front End</h3>
<p>I had a good idea of what I wanted here. We needed a grid that resembled the Github contributions graph. A user can use their pointer to paint the grid. Each cell can either be transparent or one of four shades of green. Here's what the final grid looks like.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ExNdwEy"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ExNdwEy">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The tricky part with these types of interaction and React is that we don't want to update the state on every paint. That would cause lots of rerendering. Instead, we can use refs to keep track of what's going on.</p>
<p>Making something different challenges us to use the tools we use in a different way. Something like Vincent is great for working with DOM manipulation and React. I've done this for other projects too like <a href="https://pxl.netlify.app">&quot;PxL&quot;</a>.</p>
<p>This part of the project was all about generating the Array we mentioned earlier. We're giving the user a way to generate the Array of digits from 0 to 4 without having to type it out.</p>
<h3>Web Scraping with Serverless</h3>
<p>Now, what makes &quot;Vincent&quot; possible is empty commits. The way it works is that we generate hundreds of empty commits and commit them to a repository of your choice. And those empty commits show up in the contribution graph.</p>
<p>How do you get the four different greens? Well, this depends on the amounts of commits. For example, if we say your max commits per year is 100. Then to get the 4 levels, we can use 400, 300, 200, and 100 commits per day. That will generate the four shades of green.</p>
<p>The main thing we need is the max number of commits for the username. To grab that we make some checks and then scrape the activity page on Github. In &quot;Vincent&quot;, we ask for a user name, branch name, and repository name. &quot;Vincent&quot; checks that they exist and that they're empty before scraping for commits.</p>
<p>We're making about 4 or 5 requests here. This is where serverless comes in handy. We can put them requests into a <a href="https://www.netlify.com/products/functions/">Netlify function</a> and then the front end only needs to make one request.</p>
<p>This is the important part of that function. Here we make a request for the &quot;contributions&quot; page. And then we use <code>cheerio</code> to scrape for the highest amount of commits over the last year.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getCommitMultiplier</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">username</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token comment">// Grab the page HTML</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">PAGE</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://github.com/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/contributions</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// Use Cheerio to parse the highest commit count for a day</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token constant">PAGE</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// Instantiate an Array</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">COUNTS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token comment">// Grab all the commit days from the HTML</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">COMMIT_DAYS</span> <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[data-count]'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// Loop over the commit days and grab the "data-count" attribute</span></span>
<span class="highlight-line">  <span class="token comment">// Push it into the Array</span></span>
<span class="highlight-line">  <span class="token constant">COMMIT_DAYS</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">DAY</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token constant">COUNTS</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token constant">COMMIT_DAYS</span><span class="token punctuation">[</span><span class="token constant">DAY</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attribs<span class="token punctuation">[</span><span class="token string">'data-count'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// console.info(`Largest amount of commits for a day is ${Math.max(...COUNTS)}`)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token constant">COUNTS</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>You could create a local version of this too and parse the response. Try making that request with your own username.</p>
<h3>Generating a Shell Script</h3>
<p>Next up we need a shell script to push all these generated empty commits. This part is about creating a big string in a loop. For every commit, we are assigning a date and many commits based on the draw level.</p>
<p>The first part requires the use of <code>luxon</code> (<a href="https://momentjs.com/docs/#/-project-status/">We don't need <code>moment.js</code> anymore</a>) to match dates to commits. There is a little Math around the dates that was a little tricky on the first couple of tries. But once it's sussed, your good!</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">processCommits</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">commits<span class="token punctuation">,</span> multiplier<span class="token punctuation">,</span> onCommit<span class="token punctuation">,</span> dispatch</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">TODAY</span> <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">local</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">START_DAY</span> <span class="token operator">=</span> <span class="token constant">TODAY</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token punctuation">{</span> days<span class="token operator">:</span> commits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="highlight-line">  <span class="token keyword">let</span> genArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> commits<span class="token punctuation">.</span>length<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token constant">LEVEL</span> <span class="token operator">=</span> commits<span class="token punctuation">[</span>c<span class="token punctuation">]</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token constant">NUMBER_COMMITS</span> <span class="token operator">=</span> <span class="token constant">LEVEL</span> <span class="token operator">*</span> multiplier</span>
<span class="highlight-line">    total <span class="token operator">+=</span> <span class="token constant">NUMBER_COMMITS</span></span>
<span class="highlight-line">    genArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">NUMBER_COMMITS</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token comment">// Dispatch a message.</span></span>
<span class="highlight-line">  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">    type<span class="token operator">:</span> <span class="token constant">ACTIONS</span><span class="token punctuation">.</span><span class="token constant">TOASTING</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    toast<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      type<span class="token operator">:</span> <span class="token constant">TOASTS</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      message<span class="token operator">:</span> <span class="token constant">MESSAGES</span><span class="token punctuation">.</span><span class="token constant">TOTAL</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      life<span class="token operator">:</span> <span class="token number">4000</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// Loop through the commits matching up the dates and creating empty commits</span></span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> d <span class="token operator">&lt;</span> genArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token comment">// Git commit structure</span></span>
<span class="highlight-line">    <span class="token comment">// git commit --allow-empty --date "Mon Oct 12 23:17:02 2020 +0100" -m "Vincent paints again"</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token constant">COMMITS</span> <span class="token operator">=</span> genArr<span class="token punctuation">[</span>d<span class="token punctuation">]</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">COMMITS</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">const</span> <span class="token constant">COMMIT_DAY</span> <span class="token operator">=</span> <span class="token constant">START_DAY</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token punctuation">{</span> days<span class="token operator">:</span> d <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token constant">COMMITS</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token function">onCommit</span><span class="token punctuation">(</span><span class="token constant">COMMIT_DAY</span><span class="token punctuation">.</span><span class="token function">toISO</span><span class="token punctuation">(</span><span class="token punctuation">{</span> includeOffset<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Once we have all the commit data ready it's time to generate that script. It's a long string based on the commit dates, the username, branch, etc.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">generateShellScript</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
  <span class="token parameter">commits<span class="token punctuation">,</span>
<span class="highlight-line">  username<span class="token punctuation">,</span></span>
<span class="highlight-line">  multiplier<span class="token punctuation">,</span></span>
<span class="highlight-line">  repository<span class="token punctuation">,</span></span>
<span class="highlight-line">  branch<span class="token punctuation">,</span></span>
<span class="highlight-line">  repoPath<span class="token punctuation">,</span></span>
  dispatch</span>
<span class="highlight-line"><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
  <span class="token keyword">let</span> <span class="token constant">SCRIPT</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">mkdir </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>repoPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
<span class="highlight-line">cd </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>repoPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="highlight-line">git init</span>
</span><span class="token template-punctuation string">`</span></span>
<span class="highlight-line">  <span class="token keyword">await</span> <span class="token function">processCommits</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    commits<span class="token punctuation">,</span></span>
<span class="highlight-line">    multiplier<span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">(</span><span class="token parameter">date</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token constant">SCRIPT</span> <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git commit --allow-empty --date "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)}" -m "Vincent paints again"\n</span><span class="token template-punctuation string">`</span></span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    dispatch</span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">SCRIPT</span> <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git remote add origin https://github.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>repository<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.git\n</span><span class="token template-punctuation string">`</span></span></span>
<span class="highlight-line">  <span class="token constant">SCRIPT</span> <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git push -u origin </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>branch<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span></span>
<span class="highlight-line">  <span class="token constant">SCRIPT</span> <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">cd ../\n</span><span class="token template-punctuation string">`</span></span></span>
<span class="highlight-line">  <span class="token constant">SCRIPT</span> <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rm -rf </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>repoPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token constant">SCRIPT</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3>Ditching Electron</h3>
<blockquote>
<p>&quot;Wait. I thought you wanted to use electron?&quot; – Reader</p>
</blockquote>
<p>I did.</p>
<p>I got quite far with it. But, I hit some blockers, and that's OK. The issues were around pushing the commits via Node. It would take a long time and sometimes run out of buffer. The other issue was that I couldn't communicate this to the front end in a clean way.</p>
<p>This is why I started generating the shell scripts. And I'd started digging in with <code>electron-dl</code> and <code>electron-store</code> when it hit me. &quot;This belongs on the web&quot;.</p>
<p>I'd only read up on how to package a desktop app for different platforms and it looked OK. But, from testing and feedback, there were some issues already with Windows.</p>
<p>There was also the factor of usability. This isn't a tool you use every day. And the web is more accessible than downloading and installing an app, etc.</p>
<p>I decided to ditch electron at this point. And this is where React is great. Because I'd created various building blocks for the front end, it was painless to port those into a web app.</p>
<p>Was it a waste of time? No!</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1322184887936450563?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Because I didn't use electron for the final product, doesn't mean it was a waste of time to try. In fact, I learned a lot about <code>electron</code> in a short space of time which was neat.</p>
<h3>UI Fun</h3>
<p>At this stage, I had a working proof of concept 🙌</p>
<p>Now I could have some fun with it and put together all the conveniences for users. A form to configure, the ability to save and load drawings, animations, etc.</p>
<p>These are the things that stood out for me.</p>
<h4>Configuration</h4>
<p>I needed forms for configuration. Somewhere for a user to put their username, branch, and repository information. But, I also wanted to create a sliding drawer effect.</p>
<p>For form handling, I could've reached for <code>formik</code> or created the form handling myself. But instead, I thought I'd give <code>react-hook-form</code> a try and it was great. It was another opportunity to try something different. Here's how the sliding drawer looks.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="VwmEMeP"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/VwmEMeP">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The other benefit to building things like this is that you can look for patterns to refactor. This drawer became a reusable component. I reuse it for an &quot;info&quot; drawer on the right side in the app.</p>
<h4>Audio</h4>
<p>I like to add a little whimsy to my projects. It's something people associate with me. Sound was a must and I hooked up some button clicks and actions to audio with a quick custom hook.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">useSound</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> soundRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token function-variable function">play</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    soundRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>currentTime <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="highlight-line">    soundRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token function-variable function">pause</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> soundRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token function-variable function">stop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    soundRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    soundRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>currentTime <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    play<span class="token punctuation">,</span></span>
<span class="highlight-line">    stop<span class="token punctuation">,</span></span>
<span class="highlight-line">    pause<span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">default</span> useSound</span></code></pre>
<p>But, the real joy would be audio when painting the grid. I wanted to try out Tone.js some more after seeing it on <a href="https://www.learnwithjason.dev/get-weird-with-audio-on-the-web">&quot;Learn with Jason&quot;</a>. And this seemed like a great opportunity. Different levels play different notes. Erasing plays a dull note.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="BaQqRXE"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/BaQqRXE">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h4>Toasts</h4>
<p>The app needed some little toast components to let the user know what's happening. For example, confirming a save or telling the user that the commits are being generated.</p>
<p>I could've reached for off-the-shelf ones. But, I couldn't remember making any myself in open source. This felt like a good opportunity to do that. With a little React and GreenSock, I had a nice Toasts component. The neat thing about creating a Toast component is that it makes you think more about components. You need to use the state to trigger creation. But, you don't tie state to the Toasts. It's worth checking the code on that one.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ZEBqXVb"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ZEBqXVb">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h4>Animation</h4>
<p>I love to put some animation somewhere. And with this being my own project I can put as much as I like in.</p>
<p>What better than a loading animation when the shell script gets generated? Playing on the project name and writing code, I settled on this.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="eYzvQzq"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/eYzvQzq">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Some audio and 8-bit style music tops it off!</p>
<h4>Zip Files</h4>
<p>If you try and download a shell script for users, you're prompted with a security warning. It's not something I've needed to do before and this was new to me.</p>
<p>The audience on live stream suggested trying out <code>jszip</code>. And this solved a problem in a neat way. Using <code>jszip</code> I could bundle a <code>README</code> and the shell script for the user and have them download a single zip file. This way the user has instructions to run the file too.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">FILE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zip</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">FILE</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'vincent-van-git.sh'</span><span class="token punctuation">,</span> <span class="token constant">SCRIPT</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">FILE</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'README.md'</span><span class="token punctuation">,</span> <span class="token constant">README</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">ZIP_FILE</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token constant">FILE</span><span class="token punctuation">.</span><span class="token function">generateAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">'blob'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token function">downloadFile</span><span class="token punctuation">(</span><span class="token constant">ZIP_FILE</span><span class="token punctuation">,</span> <span class="token string">'vincent-van-git.zip'</span><span class="token punctuation">)</span></span></code></pre>
<p>This was convenient and another opportunity to try something new that I wouldn't have.</p>
<h2>That's It!</h2>
<p>I deployed it, made a quick video, and shared it!
All the code is open source. And you can use <a href="https://vincent-van-git.netlify.app">the app</a> to paint commits to your Github profile with serverless. I learned a bunch from creating &quot;<a href="https://vincent-van-git.netlify.app">Vincent van Git</a>&quot;. And it solves a problem for me. There were techniques for me to try and opportunities to try out different packages.</p>
<p>What's the actionable advice here?</p>
<p>Make for yourself. That's the actionable advice here. Make something that you will find useful. Make a tool or something you're interested in. It could solve a particular problem for yourself. It will likely solve a problem for others too. And it gives you an outlet to learn and try new things.</p>
<p>Make for yourself.</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Exploring @property and its Animating Powers</title>
    <link href="https://jhey.dev/writing/exploring-property-and-its-animating-powers/"/>
    <updated>2021-03-04T13:15:15+00:00</updated>
    <id>https://jhey.dev/writing/exploring-property-and-its-animating-powers/</id>
    <content type="html"><![CDATA[
      <p>Uh, what’s <code>@property</code>? It’s a new CSS feature! It gives you superpowers. No joke, there is stuff that <code>@property</code> can do that unlocks things in CSS we’ve never been able to do before.</p>
<p>While everything about <code>@property</code> is exciting, perhaps the most interesting thing is that it provides a way to specify a type for custom CSS properties. A type provides more contextual information to the browser, and that results in something cool: We can give the browser the information is needs to transition and animate those properties!</p>
<p>But before we get too giddy about this, it’s worth noting that support isn’t quite there. As it current stands at the time of this writing, <code>@property</code> is supported in Chrome and, by extension, Edge. We need to keep an eye on <a href="https://caniuse.com/mdn-css_at-rules_property">browser support</a> for when we get to use this in other places, like Firefox and Safari.</p>
<h2>First off, we get type checking</h2>
<pre class="language-css"><code class="language-css"><span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --spinAngle</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token comment">/* An initial value for our custom property */</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token comment">/* Whether it inherits from parent set values or not */</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token comment">/* The type. Yes, the type. You thought TypeScript was cool */</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;angle>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> spin</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--spinAngle</span><span class="token punctuation">:</span> 360deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That’s right! Type checking in CSS. It’s sorta like creating our very own mini CSS specification. And that's a simple example. Check out all of the various types we have at our disposal:</p>
<ul>
<li><code>length</code></li>
<li><code>number</code></li>
<li><code>percentage</code></li>
<li><code>length-percentage</code></li>
<li><code>color</code></li>
<li><code>image</code></li>
<li><code>url</code></li>
<li><code>integer</code></li>
<li><code>angle</code></li>
<li><code>time</code></li>
<li><code>resolution</code></li>
<li><code>transform-list</code></li>
<li><code>transform-function</code></li>
<li><code>custom-ident</code> (a custom identifier string)</li>
</ul>
<p>Before any of this, we may have relied on using &quot;tricks&quot; for powering animations with custom properties.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1191695646752948225?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>What cool stuff can we do then? Let’s take a look to spark your imagination.</p>
<h2>Let's animate color</h2>
<p>How might you animate an element either through a series of colors or between them? I’m a big advocate for the HSL color space which breaks things down into fairly understandable numbers: hue, saturation, and lightness, respectively.</p>
<p>Animating a hue feels like something fun we can do. What’s colorful? A rainbow! There’s a variety of ways we could make a rainbow. Here’s one:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="rNWypbj"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/rNWypbj">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>In this example, CSS Custom Properties are set on the different bands of the rainbow using <code>:nth-child()</code>  to scope them to individual bands. Each band also has an <code>--index</code> set to help with sizing.</p>
<p>To animate those bands, we might use that <code>--index</code> to set some negative animation delays, but then use the same keyframe animation to cycle through hues.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.rainbow__band</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--hue<span class="token punctuation">,</span> 10<span class="token punctuation">)</span><span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> rainbow 2s <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--index<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> * -0.2s<span class="token punctuation">)</span> infinite linear<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%, 100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--hue</span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">14%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--hue</span><span class="token punctuation">:</span> 35<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">28%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--hue</span><span class="token punctuation">:</span> 55<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">42%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--hue</span><span class="token punctuation">:</span> 110<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">56%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--hue</span><span class="token punctuation">:</span> 200<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">70%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--hue</span><span class="token punctuation">:</span> 230<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">84%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--hue</span><span class="token punctuation">:</span> 280<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That might work out okay if you want a &quot;stepped&quot; effect. But, those keyframe steps aren’t particularly accurate. I’ve used steps of <code>14%</code> as a rough jump.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="oNYZExP"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/oNYZExP">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We could animate the <code>border-color</code> and that would get the job done. But, we'd still have a keyframe step calculation issue. And we need to write a lot of CSS to get this done:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%, 100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>10<span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">14%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>35<span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">28%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>55<span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">42%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>110<span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">56%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>200<span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">70%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>230<span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">84%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>280<span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Enter <code>@property</code>. Let’s start by defining a custom property for hue. This tells the browser our custom property, <code>--hue</code>, is going to be a number (not a string that looks like a number):</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --hue</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;number>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Hue values in HSL can go from <code>0</code> to <code>360</code>. We start with an initial value of <code>0</code>. The value isn't going to inherit. And our value, in this case, is a number. The animation is as straightforward as:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--hue</span><span class="token punctuation">:</span> 360<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Yep, that’s the ticket:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="JjbWpEZ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/JjbWpEZ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>To get the starting points accurate, we could play with delays for each band. This gives us some cool flexibility. For example, we can up the <code>animation``-``duration</code> and we get a slow cycle. Have a play with the speed in this demo.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="KKNWQxq"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/KKNWQxq">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>It may not be the “wildest” of examples, but I think animating color has some fun opportunities when we use color spaces that make logical use of numbers. Animating through the color wheel before required some trickiness. For example, generating keyframes with a preprocessor, like Stylus:</p>
<pre class="language-stylus"><code class="language-stylus"><span class="highlight-line"><span class="token atrule-declaration"><span class="token atrule">@keyframes</span> party</span></span>
<span class="highlight-line">  <span class="token statement"><span class="token keyword">for</span> $frame <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..</span><span class="token number">100</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">    <span class="token selector"><span class="token interpolation variable"><span class="token delimiter punctuation">{</span>$frame <span class="token operator">*</span> <span class="token number">1</span><span class="token unit">%</span><span class="token delimiter punctuation">}</span></span></span></span>
<span class="highlight-line">      <span class="token property-declaration"><span class="token property">background</span> <span class="token string">'hsl(%s, 65%, 40%)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>$frame <span class="token operator">*</span> <span class="token number">3.6</span><span class="token punctuation">)</span></span></span></code></pre>
<p>We do this purely because this isn’t understood by the browser. It sees going from 0 to 360 on the color wheel as an instant transition because both hsl values show the same color.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> party</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">from</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>360<span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The keyframes are the same, so the browser assumes the animation stays at the same <code>background</code> value when what we actually want is for the browser to go through the entire hue spectrum, starting at one value and ending at that same value after it goes through the motions.</p>
<p>Think of all the other opportunities we have here. We can:</p>
<ul>
<li>animate the saturation</li>
<li>use different easings</li>
<li>animate the lightness</li>
<li>Try <code>rgb()</code></li>
<li>Try degrees in <code>hsl()</code> and declare our custom property type as  <code>&lt;angle&gt;</code></li>
</ul>
<p>What's neat is that we can share that animated value across elements with scoping! Consider this button. The border and shadow animate through the color wheel on hover.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="OJRLMxE"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/OJRLMxE">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Animating color leads me to think… wow!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="oNYxRXb"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/oNYxRXb">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Straight-up numbering</h2>
<p>Because we can define types for numbers—like <code>integer</code> and <code>number</code>—that means we can also animate numbers instead of using those numbers as part of something else. <a href="https://css-tricks.com/author/carterli/">Carter Li</a> actually wrote an article on this <a href="https://css-tricks.com/animating-number-counters/">over on CSS-Tricks</a>. The trick is to use an <code>integer</code> in combination with CSS counters. This is similar to how we can work the counter in &quot;Pure CSS&quot; games like this one.</p>
<p>The use of <code>counter</code> and pseudo-elements provides a way to convert a number to a string. Then we can use that string for the <code>content</code> of a pseudo-element. Here are the important bits:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --milliseconds</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;integer>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.counter</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">counter-reset</span><span class="token punctuation">:</span> ms <span class="token function">var</span><span class="token punctuation">(</span>--milliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> count 1s <span class="token function">steps</span><span class="token punctuation">(</span>100<span class="token punctuation">)</span> infinite<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.counter:after</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">counter</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> count</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--milliseconds</span><span class="token punctuation">:</span> 100<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Which gives us something like this. Pretty cool.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="vYyxoPr"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/vYyxoPr">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Take that a little further and you’ve got yourself a working stopwatch made with nothing but CSS and HTML. Click the buttons! The rad thing here is that this actually works as a timer. <a href="https://twitter.com/jaffathecake/status/1362471942238961665?s=20">It won’t suffer from drift</a>. In some ways it may be more accurate than the JavaScript solutions we often reach for such as <code>setInterval</code>. Check out this <a href="https://www.youtube.com/watch?v=MCi6AZMkxcU">great video</a> from Google Chrome Developer about JavaScript counters.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOVmJBL"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOVmJBL">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Who'd have thought it? Making a working stopwatch with nothing but CSS! In fact, people were pretty interested in that stopwatch. It prompted a walkthrough over on <a href="https://youtube.com/jheytompkins">YouTube</a>.</p>
<div class="post__embed-container">
      <iframe loading="lazy" class="post__embed" src="https://www.youtube.com/embed/K1jqqIDpUV4" allow="encrypted-media; picture-in-picture"></iframe>
    </div>
<p>What other things could you use animated numbers for? A countdown perhaps?</p>
<h2>Animated gradients</h2>
<p>You know the ones, <a href="https://css-tricks.com/a-complete-guide-to-css-gradients/">linear, radial, and conic</a>. Ever been in a spot where you wanted to transition or animate the color stops? Well, <code>@property</code> can do that!</p>
<p>Consider a gradient where we're creating some waves on a beach. Once we've layered up some images we could make something like this.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">body</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background-image</span><span class="token punctuation">:</span></span>
<span class="highlight-line">    <span class="token function">linear-gradient</span><span class="token punctuation">(</span>transparent 0 <span class="token function">calc</span><span class="token punctuation">(</span>35% + <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span> * 0.5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--wave-four<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>75% + <span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span><span class="token punctuation">)</span> 100%<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function">linear-gradient</span><span class="token punctuation">(</span>transparent 0 <span class="token function">calc</span><span class="token punctuation">(</span>35% + <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span> * 0.5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--wave-three<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% + <span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>75% + <span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function">linear-gradient</span><span class="token punctuation">(</span>transparent 0 <span class="token function">calc</span><span class="token punctuation">(</span>20% + <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span> * 0.5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--wave-two<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>35% + <span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% + <span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function">linear-gradient</span><span class="token punctuation">(</span>transparent 0 <span class="token function">calc</span><span class="token punctuation">(</span>15% + <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span> * 0.5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--wave-one<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>25% + <span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>35% + <span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--sand<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>There is quite a bit going on there. But, to break it down, we're creating each color stop with <code>calc``()</code>. And in that calculation, we add the value of <code>--wave</code>. The neat trick here is that when we animate that <code>--wave</code> value, all the wave layers move.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="wvodwVz"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/wvodwVz">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This is all the code we needed to make that happen:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">body</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> waves 5s infinite ease-in-out<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> waves</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--wave</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Without the use of <code>@property</code>, our waves would <a href="https://codepen.io/jh3y/pen/GRNmRgp">step between high and low tide</a>. But, with it, we get a nice chilled effect like this.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="YzpKKoN"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/YzpKKoN">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>It's exciting to think other neat opportunities that we get when manipulating images. Like rotation. Or how about animating the angle of a <code>conic-gradient</code>… but, within a <code>border-image</code>. Bramus Van Damme does a <a href="https://www.bram.us/2021/01/29/animating-a-css-gradient-border/">brilliant job of covering this concept</a>.</p>
<p>Let's break it down by creating a charging indicator. We’re going to animate an angle and a hue at the same time. We can start with two custom properties:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --angle</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;angle>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --hue</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;number>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The animation will update the angle and hue with a slight pause on each iteration.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> load</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%, 10%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--angle</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--hue</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--angle</span><span class="token punctuation">:</span> 360deg<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--hue</span><span class="token punctuation">:</span> 100<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now let’s apply it as the <code>border-image</code> of an element.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.loader</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--charge</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--hue<span class="token punctuation">)</span><span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border-image</span><span class="token punctuation">:</span> <span class="token function">conic-gradient</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--charge<span class="token punctuation">)</span> <span class="token function">var</span><span class="token punctuation">(</span>--angle<span class="token punctuation">)</span><span class="token punctuation">,</span> transparent <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--angle<span class="token punctuation">)</span> * 0.5deg<span class="token punctuation">)</span><span class="token punctuation">)</span> 30<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> load 2s infinite ease-in-out<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Pretty cool.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOVNOeg"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOVNOeg">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Unfortunately, <code>border-image</code> doesn't play nice with <code>border-radius</code>. But, we could use a pseudo-element behind it. Combine it with the number animation tricks from before and we've got a full charging/loading animation. (Yep, it changes when it gets to 100%.)</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="xxRdbdE"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/xxRdbdE">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Transforms are cool, too</h2>
<p>One issue with animating transforms is transitioning between certain parts. It often ends up breaking or not looking how it should. Consider the classic example of a ball being throw. We want it to go from point A to point B while imitating the effect of gravity.</p>
<p>An initial attempt might look like this</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> throw</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-500%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -250%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>500%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>But, we’ll soon see that it doesn’t look anything like we want.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="XWNRbdg"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/XWNRbdg">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Before, we may have reached for wrapper elements and animated them in isolation. But, with <code>@property</code>, we can animate the individual values of the transform. And all on one timeline. Let's flip the way this works by defining custom properties and then setting a transform on the ball.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --x</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;percentage>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --y</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;percentage>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --rotate</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;angle>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.ball</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> throw 1s infinite alternate ease-in-out<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--rotate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now for our animation, we can compose the transform we want against the keyframes:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> throw</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -500%<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--rotate</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> -250%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 500%<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--rotate</span><span class="token punctuation">:</span> 360deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The result? The curved path we had hoped for. And we can make that look different depending on the different timing functions we use. We could split the animation into three ways and use different timing functions. That would give us different results for the way the ball moves.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="PobmqXq"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/PobmqXq">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Consider another example where we have a car that we want to drive around a square with rounded corners.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="vYyBKeW"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/vYyBKeW">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We can use a similar approach to what we did with the ball:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --x</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;number>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --y</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;number>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --r</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;angle>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The car's <code>transform</code>  is using calculated with <code>vmin</code> to keep things responsive:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.car</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--x<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--y<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now can write an extremely accurate frame-by-frame journey for the car. We could start with the value of <code>--x</code>.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> journey</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%, 100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">25%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">75%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The car makes the right journey on the x-axis.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="zYoOBWq"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/zYoOBWq">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Then we build upon that by adding the travel for the y-axis:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> journey</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%, 100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">25%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">75%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Well, that’s not quite right.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="mdObELx"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/mdObELx">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Let’s drop some extra steps into our <code>@keyframes</code> to smooth things out:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> journey</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%, 100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">12.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">25%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">37.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">62.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">75%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">87.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Ah, much better now:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="BaQBzVG"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/BaQBzVG">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>All that's left is the car's rotation. We're going with a 5% window around the corners. It's not precise but it definitely shows the potential of what’s possible:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> journey</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">10%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">12.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">15%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 90deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">25%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">35%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 90deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">37.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">40%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 180deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">60%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 180deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">62.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">65%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 270deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">75%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">85%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 270deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">87.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">90%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 360deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 360deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And there we have it, a car driving around a curved square! No wrappers, no need for complex Math. And we composed it all with custom properties.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOVNqjv"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOVNqjv">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Powering an entire scene with variables</h2>
<p>When you start putting it all together, <code>@property</code> opens up new opportunities. You can start to power scenes with few properties. Consider this 404 concept page. Two registered properties power the different moving parts. We have a moving gradient we clip with the text using <code>-webkit-background-clip</code>. We make the shadow move by reading the values of the properties. And we swing another element for the light effect.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="MWbvzKb"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/MWbvzKb">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>That’s it!</h2>
<p>It's exciting to think about what types of things we can do with the ability to define types with <code>@property</code>. By giving the browser additional context about a custom property, we can go nuts in ways we couldn’t before with basic strings.</p>
<p>What ideas do you have for the other types? Time and resolution would make for interesting transitions, though I’ll admit I wasn't able to make them work that way I was hoping. <code>url</code> could also be neat, like perhaps transitioning between a range of sources the way an image carousel typically does. Just brainstorming here!</p>
<p>I hope this quick look at <code>@property</code> inspires you to go check it out and make your own awesome demos! I look forward to seeing what you make. In fact, please share them with me here in the comments!</p>
<hr>
<p>As always, thanks for reading. Wanna know more? Wanna see something else? Come find me on <a href="https://twitter.com/jh3yy">Twitter</a>!</p>
<p><strong>Stay awesome! ʕ •ᴥ•ʔ</strong></p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Add A Little Whimsy to Your Forms</title>
    <link href="https://jhey.dev/writing/add-a-little-whimsy-to-your-forms/"/>
    <updated>2021-02-22T00:00:00+00:00</updated>
    <id>https://jhey.dev/writing/add-a-little-whimsy-to-your-forms/</id>
    <content type="html"><![CDATA[
      <p>It's the little things. Recently <a href="https://jhey.dev">jhey.dev</a> got the honor of making it onto <a href="https://whimsical.club/">whimsical.club</a>. It's &quot;A curated list of sites with an extra bit of fun&quot;.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/mxbck/status/1363121393446105089?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>What's whimsy? It's that little bit of fun we can add to our projects. Something that gives our audience a little insight into who we are. It's also another way to connect with your viewers. Sarah Drasner summed this up well in a <a href="https://css-tricks.com/in-defense-of-a-fussy-website/">recent article</a>.</p>
<blockquote>
<p>&quot;While we’re all laser-focused on shipping the newest feature with the hottest software and the best Lighthouse scores, I’ve been missing a bit of the joy on the web. Apps are currently conveying little care for UX, guidance, richness, and — well, for humans trying to communicate through a computer, we’re certainly bending a lot to… the computer.&quot;</p>
</blockquote>
<p>So. Today we're going to add a confetti blast when users submit a form. It could be a little joy when someone signs up for your newsletter. This is what I'm using it for. I added it You can see it in action at <a href="https://jhey.dev">jhey.dev</a>.</p>
<hr>
<p>Let's start with a form, a <a href="https://codepen.io/jh3y/pen/vYyeayV">very basic form</a>. For example, this form will take you to the sign-up for my newsletter.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whimsy-form<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.getrevue.co/profile/jh3y/add_subscriber<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whimsy-form__group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Email address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>whimsy-form__actions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Subscribe<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span></code></pre>
<p>Let's take that further and add some extra markup and styles to make it a little &quot;friendlier&quot;. Here's a quick form we've put together with Tailwind.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="bGBojrG"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/bGBojrG">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>At this point, it looks fine. You can always add a little &quot;character&quot; here with the copy you use. Use these opportunities to make a connection. &quot;Want to stay in touch? I'd like to share things I learn with you&quot; sounds better than &quot;Sign up for my newsletter&quot;. Anyway, that's another post in itself!</p>
<p>But, we want confetti!</p>
<p><img src="https://media.giphy.com/media/9RrdV7o2kJFy8/giphy.gif" alt="Pitchforks"></p>
<p>Let's hop into some JavaScript. We're going to use the <code>canvas-confetti</code> package. It's perfect for our use case. You've got many options for grabbing this. We can use <code>skypack</code> for our demos. You might want to install it in your project and <code>import</code> it.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> confetti <span class="token keyword">from</span> 'https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>cdn<span class="token punctuation">.</span>skypack<span class="token punctuation">.</span>dev<span class="token operator">/</span>canvas<span class="token operator">-</span>confetti</span></code></pre>
<p>Then we need to grab the submit button for our form along with the form itself.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">FORM</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">SUBMIT</span> <span class="token operator">=</span> <span class="token constant">FORM</span><span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'[type="submit"]'</span><span class="token punctuation">)</span></span></code></pre>
<p>Then tie up the confetti blast to our form submission.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token constant">FORM</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">confetti</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="QWGqVpM"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/QWGqVpM">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Well. That works. But, not how we want it to. For one, we miss the confetti as the browser opens a new tab. When we return, we see the confetti. But, it blasts out from the middle of the screen.</p>
<p>Let's sort that out. We need to prevent the default action for the form from happening. We can <code>preventDefault</code> on the event for that. And then, we will get the button position with <code>getBoundingClientRect</code>. We can use that to determine where we want to fire the confetti from.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> confetti <span class="token keyword">from</span> <span class="token string">'https://cdn.skypack.dev/canvas-confetti'</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">FORM</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">SUBMIT</span> <span class="token operator">=</span> <span class="token constant">FORM</span><span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'[type="submit"]'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">onSubmit</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">BOUNDS</span> <span class="token operator">=</span> <span class="token constant">SUBMIT</span><span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">confetti</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">    origin<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      x<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token constant">BOUNDS</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span></span>
<span class="highlight-line">      y<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token constant">BOUNDS</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token constant">FORM</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> onSubmit<span class="token punctuation">)</span></span></code></pre>
<p>The last thing to do is submit our form after a desired delay. We could wait until the end of the confetti. But, around a second is likely enough.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">FORM</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span></code></pre>
<p>Putting it all together.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> confetti <span class="token keyword">from</span> <span class="token string">'https://cdn.skypack.dev/canvas-confetti'</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">FORM</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">SUBMIT</span> <span class="token operator">=</span> <span class="token constant">FORM</span><span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'[type="submit"]'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">onSubmit</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">BOUNDS</span> <span class="token operator">=</span> <span class="token constant">SUBMIT</span><span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">confetti</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">    origin<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      x<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token constant">BOUNDS</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span></span>
<span class="highlight-line">      y<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token constant">BOUNDS</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">FORM</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token constant">FORM</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> onSubmit<span class="token punctuation">)</span></span></code></pre>
<p>Hurrah! 🎉 We have a little whimsy for our form.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="zYoEJPy"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/zYoEJPy">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>It's worth exploring <a href="https://www.npmjs.com/package/canvas-confetti">the docs</a> for <code>canvas-confetti</code>. You can tweak the settings to your tastes and generate different effects. One option we should pay attention to is <code>disableForReducedMotion</code>. I'd recommend setting this to &quot;true&quot; so we respect users with vestibular disorders.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function">confetti</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  disableForReducedMotion<span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>Now we have some confetti, we could even take this a little further with some audio. Drop an <code>audio</code> element into our markup and use the <code>preload</code> attribute.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://assets.codepen.io/605876/horn.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">preload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span></span></code></pre>
<p>Using <code>preload</code> ensures that the audio is ready for playback as soon as we hit our &quot;Subscribe&quot; button.</p>
<p>All we need to do is tie that into our &quot;onSubmit&quot; function. Grab the audio element and use the &quot;play&quot; method.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">AUDIO</span> <span class="token operator">=</span> <span class="token constant">FORM</span><span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'audio'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token comment">// Then inside "onSubmit"</span></span>
<span class="highlight-line"><span class="token constant">AUDIO</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<p>And there we have it. A whimsical sign up form that will give your users a little joy and something to remember when they submit a form. And you can take joy from knowing that you've shipped a little enhancement for your users. If a user disables JavaScript, your form still works without the bells and whistles.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="VwmMGGv"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/VwmMGGv">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>That's it!</h2>
<p>One way to add a little joy to your sites and apps. Think about combining this with some of the other things we've been looking at. You'll be well on your way to making awesome experiences for your users. As always, <a href="https://twitter.com/jh3yy">let me know</a> what you think and see you for the next one!</p>
<p><strong>Stay Awesome! ʕ •ᴥ•ʔ</strong></p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>How To: Cursor Tracking Parallax</title>
    <link href="https://jhey.dev/writing/how-to-cursor-tracking-parallax/"/>
    <updated>2021-02-18T00:00:00+00:00</updated>
    <id>https://jhey.dev/writing/how-to-cursor-tracking-parallax/</id>
    <content type="html"><![CDATA[
      <p>Ever seen those effects where elements on the screen respond to mouse movement? They're used quite often for parallax-like effects or eyes following a cursor. I use the effect on <a href="https://jhey.dev">jhey.dev</a> for the shades glare on the main bear head.</p>
<p>I don't know the technical name. Let's go with &quot;Cursor Tracking Parallax&quot;.</p>
<p>The good news is this technique doesn't take much time to make and adds a little something extra to your designs. Remember, it's the little details.</p>
<hr>
<p>Let's make a face! We'll start with some markup.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>face<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>face__eyes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye eye--left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eye eye--right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>face__mouth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>And we've gone ahead and styled it up 💅</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ExNXNjN"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ExNXNjN">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<aside class="post__aside post__aside--note">
      <svg viewBox="0 0 24 24">
        <path fill="var(--color)" d="M17,4V10L15,8L13,10V4H9V20H19V4H17M3,7V5H5V4C5,2.89 5.9,2 7,2H19C20.05,2 21,2.95 21,4V20C21,21.05 20.05,22 19,22H7C5.95,22 5,21.05 5,20V19H3V17H5V13H3V11H5V7H3M5,5V7H7V5H5M5,19H7V17H5V19M5,13H7V11H5V13Z" />
      </svg>
      <p><p>Remember, you can view the compiled HTML, CSS, and JavaScript in CodePen. Use the dropdown for a source panel and press &quot;View Compiled HTML/CSS/JavaScript&quot;.</p>
</p>
    </aside>
<p>That face is great. But, it'd be cooler if we could give it a little life.</p>
<p>To do this, we can use CSS variables with an event listener for &quot;pointermove&quot;.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pointermove'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token comment">// Make those features move by updating some CSS variables.</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>We want to limit the movement of those features though. We don't want them flying all over the place. We want &quot;subtle&quot;.</p>
<p>Let's start by updating the CSS for our eyes container. That's <strong>important</strong>. We don't need to transition each eye. We're going to use scoped CSS variables in a <code>transform</code>.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.face__eyes</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--x<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--y<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Note how we're using <code>calc</code> with the value of <code>1px</code>. It's not a bad habit to leave some CSS variables unitless. This gives us room to change to a different unit with ease.</p>
<p>There's no change yet though. The <code>--x</code> and <code>--y</code> values will fallback to <code>0</code>. But, you can play with this demo to see how value updated would affect the eyes.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="QWGgGmb"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/QWGgGmb">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Now. How about those scripts? We need a function that maps our cursor position to some defined range and outputs a value for us.</p>
<p><img src="https://res.cloudinary.com/jh3yy/image/upload/f_auto,q_auto/v1613659704/jhey.dev/transformer_duetyf.jpg" alt="A visualisation of what we want"></p>
<p>To do this we can create a mapping function.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">mapRange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">inputLower<span class="token punctuation">,</span> inputUpper<span class="token punctuation">,</span> outputLower<span class="token punctuation">,</span> outputUpper</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">INPUT_RANGE</span> <span class="token operator">=</span> inputUpper <span class="token operator">-</span> inputLower</span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">OUTPUT_RANGE</span> <span class="token operator">=</span> outputUpper <span class="token operator">-</span> outputLower</span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token parameter">value</span> <span class="token operator">=></span> outputLower <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">-</span> inputLower<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token constant">INPUT_RANGE</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token constant">OUTPUT_RANGE</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Our mapping function takes an input range and an output range. Then it returns a function we can use to map one value to another.</p>
<p>Let's run through what's happening there. We pass the function two ranges for input and output. After calculating the range, we return a function. The function does the magic.</p>
<ol>
<li>Calculates the fractional value of an input value against the input range.</li>
<li>Multiplies that by the output range.</li>
<li>Add that to the lower bounds of the output range.</li>
</ol>
<p>Consider this example with an input range of 0 to 100, an output range of 500 to 1000, and an input of 50.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token number">50</span> <span class="token operator">=></span> <span class="token number">500</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token number">50</span> <span class="token operator">=></span> <span class="token number">500</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0.5</span> <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token number">50</span> <span class="token operator">=></span> <span class="token number">500</span> <span class="token operator">+</span> <span class="token number">250</span></span>
<span class="highlight-line"><span class="token number">50</span> <span class="token operator">=></span> <span class="token number">750</span></span></code></pre>
<p>We need to tie this up to our CSS variable transform and we're there! Here's how we can hook up the x translation for our eyes.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">BOUNDS</span> <span class="token operator">=</span> <span class="token number">20</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">POS_X</span> <span class="token operator">=</span> <span class="token function">mapRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token constant">BOUNDS</span><span class="token punctuation">,</span> <span class="token constant">BOUNDS</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">EYES</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--x'</span><span class="token punctuation">,</span> <span class="token constant">POS_X</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pointermove'</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span></span></code></pre>
<p>And that works!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ExNXZKR"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ExNXZKR">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>All that's left to do is hook up the other axis and features. Notice how we are declaring a &quot;BOUNDS&quot; that we use. For the y-axis, we follow the same procedure with <code>window.innerHeight</code> as an input.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOVwyVm"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOVwyVm">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>But, what about the mouth? Well, this is where the power of scoped CSS variables comes in.</p>
<p>Instead of setting the style on the eyes container, let's set it on the face element itself.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">FACE</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.face'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">POS_X</span> <span class="token operator">=</span> <span class="token function">mapRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token constant">BOUNDS</span><span class="token punctuation">,</span> <span class="token constant">BOUNDS</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">POS_Y</span> <span class="token operator">=</span> <span class="token function">mapRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token constant">BOUNDS</span><span class="token punctuation">,</span> <span class="token constant">BOUNDS</span><span class="token punctuation">)</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">FACE</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--x'</span><span class="token punctuation">,</span> <span class="token constant">POS_X</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">FACE</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--y'</span><span class="token punctuation">,</span> <span class="token constant">POS_Y</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Making those changes <a href="https://codepen.io/jh3y/pen/rNWwjyv">won't break anything</a>. That's CSS variable scope at work. The variable values will cascade down to the eyes container still. But now the mouth also has access and we can use the same transform on it. The starting <code>translateX</code> is used to center the mouth before another translation.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.face__mouth</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--x<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--y<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And now the mouth moves too!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="NWbgdgd"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/NWbgdgd">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>But, it doesn't look right. It moves in sync with the eyes which feels a little off. This is one of those &quot;attention to detail&quot; things that's worth picking up. For example, if our faces had ears and the eyes went up, where would the ears go? Down! Check it in a mirror, I won't judge you. I've done stranger things for &quot;details&quot; 😅</p>
<p>How do we solve this then? Well, remember how I mentioned using <code>calc</code> with a unitless value back near the start? That comes in handy now.</p>
<p>We've implemented our JavaScript and CSS in a way that they have a separation of concerns. That's good! Our JavaScript is working out the cursor mapping range and passing it to our CSS. It doesn't care what we do with it there. In fact, the &quot;BOUNDS&quot; could be a nice round number like <code>100</code> and we could do what we please with it on the CSS side.</p>
<p>The individual features of the face handle their own transforms. Currently, they both use a coefficient of <code>1px</code>.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.face__eyes</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--x<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--y<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.face__mouth</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--x<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--y<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>But, what if we changed the mouth to use a coefficient of <code>-1px</code>?</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.face__mouth</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--x<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> * -1px<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--y<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> * -1px<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now the mouth moves in the opposite direction to the eyes.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="wvoegjJ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/wvoegjJ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>But, we only had to change the coefficient in our CSS. That's one of the superpowers of using scoped CSS variables but keeping them unitless. We can power a scene with one variable whilst maintaining a good separation of concerns.</p>
<p>Make a couple of tweaks and we have a cursor tracking face using CSS variables!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOVwyQY"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOVwyQY">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>But, you don't need to only use it on faces. You can use it for lots of things. Another &quot;nice touch&quot; is creating parallax-like icon backgrounds with it. The trick there is to update the <code>background-position</code> with CSS variables.</p>
<p>I'm using that effect in this demo. It's not the &quot;main event&quot;. But, it's nice little extra.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="yLVaJML"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/yLVaJML">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Here's a standalone version of an icon background to play with. The trick is to create a tile with an icon you like and then lean on <code>background-repeat</code>.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="MWboJdq"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/MWboJdq">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>In this demo, you can configure the coefficient. This plays on the fact that we are separating concerns and letting CSS do what it wants with the value.</p>
<h2>That's it!</h2>
<p>This is one way you can do &quot;Cursor Tracking Parallax&quot; with JavaScript and scoped CSS variables. I'm excited to see what you do with these techniques. What else could you make move? As always, <a href="https://twitter.com/jh3yy">let me know</a> what you think and see you for the next one!</p>
<p>All the code is available in this <a href="https://codepen.io/collection/npEvBv">CodePen Collection</a>.</p>
<p><strong>Stay Awesome!  ʕ •ᴥ•ʔ</strong></p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Creating Directionally Lit 3D Buttons with CSS</title>
    <link href="https://jhey.dev/writing/creating-directionally-lit-3d-buttons-with-css/"/>
    <updated>2021-02-16T00:00:00+00:00</updated>
    <id>https://jhey.dev/writing/creating-directionally-lit-3d-buttons-with-css/</id>
    <content type="html"><![CDATA[
      <p>I'm not too sure how I stumbled into this one. But, something led me to this <a href="https://twitter.com/JedBridges/status/1278384065087893505">tweet</a>.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/JedBridges/status/1278384065087893505?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>And, to me, that's a challenge. I took it to the live stream!</p>
<p>The button design is neat. But, I didn't want to do a direct copy. Instead, we decided on making a &quot;Twitter&quot; button. The idea is that we create an almost transparent button with a social icon on it. And then that social icon casts a shadow below. Moving our mouse across the button shines a light over it. Pressing the button pushes it onto the surface.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1355305224416669701?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>And today, we're going to look at how you can make it too. The cool thing is, you can swap the icon out to whatever you want.</p>
<h2>The Markup</h2>
<p>My first take approach for creating something like this is to scaffold the markup. Upon first inspection, we'll need to duplicate the social icon used. And a neat way to do this is to use Pug and leverage mixins.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token mixin"><span class="token keyword">mixin</span> <span class="token function">icon</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token tag">svg<span class="token attr-class">.button__icon</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">role</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">'img'</span> xmlns<span class="token operator">=</span><span class="token string">'http://www.w3.org/2000/svg'</span> viewbox<span class="token operator">=</span><span class="token string">'0 0 24 24'</span></span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">    <span class="token tag">title</span> <span class="token plain-text">Twitter icon</span></span>
<span class="highlight-line">    <span class="token tag">path<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">d</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">'M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z'</span></span><span class="token punctuation">)</span></span></span></span></code></pre>
<p>Here we’ve created a mixin for rendering an SVG of the Twitter icon. This would render the Twitter icon if we invoke it like so.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token mixin"><span class="token name function">+icon</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></code></pre>
<p>Doing that will give us a big Twitter icon.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="yLVeNBd"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/yLVeNBd">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Because social icon sets tend to use the same &quot;0 0 24 24&quot; <code>viewBox</code>, we could make the title and path arguments.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token mixin"><span class="token keyword">mixin</span> <span class="token function">icon</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> path<span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token tag">svg<span class="token attr-class">.button__icon</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">role</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">'img'</span> xmlns<span class="token operator">=</span><span class="token string">'http://www.w3.org/2000/svg'</span> viewbox<span class="token operator">=</span><span class="token string">'0 0 24 24'</span></span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">    <span class="token tag">title</span><span class="token punctuation">=</span><span class="token code"> title</span></span>
<span class="highlight-line">    <span class="token tag">path<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">d</span><span class="token punctuation">=</span><span class="token attr-value">path</span><span class="token punctuation">)</span></span></span></span></code></pre>
<p>Then our Twitter icon becomes</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token mixin"><span class="token name function">+icon</span><span class="token punctuation">(</span><span class="token string">'Twitter Icon'</span><span class="token punctuation">,</span> <span class="token string">'M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z'</span><span class="token punctuation">)</span></span></span></code></pre>
<p>But, we could pass it a key. And then have the paths stored in an object if we have many icons we wanted to use or repeat.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token mixin"><span class="token keyword">mixin</span> <span class="token function">icon</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span></span>
<span class="highlight-line">    <span class="token tag">const</span> <span class="token plain-text">PATH_MAP = {</span></span>
<span class="highlight-line">      <span class="token tag">Twitter<span class="token punctuation">:</span></span> "M23<span class="token punctuation">.</span>953 4<span class="token punctuation">.</span>57a10 10 0 01<span class="token punctuation">-</span>2<span class="token punctuation">.</span>825<span class="token punctuation">.</span>775 4<span class="token punctuation">.</span>958 4<span class="token punctuation">.</span>958 0 002<span class="token punctuation">.</span>163<span class="token punctuation">-</span>2<span class="token punctuation">.</span>723c<span class="token punctuation">-.</span>951<span class="token punctuation">.</span>555<span class="token punctuation">-</span>2<span class="token punctuation">.</span>005<span class="token punctuation">.</span>959<span class="token punctuation">-</span>3<span class="token punctuation">.</span>127 1<span class="token punctuation">.</span>184a4<span class="token punctuation">.</span>92 4<span class="token punctuation">.</span>92 0 00<span class="token punctuation">-</span>8<span class="token punctuation">.</span>384 4<span class="token punctuation">.</span>482C7<span class="token punctuation">.</span>69 8<span class="token punctuation">.</span>095 4<span class="token punctuation">.</span>067 6<span class="token punctuation">.</span>13 1<span class="token punctuation">.</span>64 3<span class="token punctuation">.</span>162a4<span class="token punctuation">.</span>822 4<span class="token punctuation">.</span>822 0 00<span class="token punctuation">-.</span>666 2<span class="token punctuation">.</span>475c0 1<span class="token punctuation">.</span>71<span class="token punctuation">.</span>87 3<span class="token punctuation">.</span>213 2<span class="token punctuation">.</span>188 4<span class="token punctuation">.</span>096a4<span class="token punctuation">.</span>904 4<span class="token punctuation">.</span>904 0 01<span class="token punctuation">-</span>2<span class="token punctuation">.</span>228<span class="token punctuation">-.</span>616v<span class="token punctuation">.</span>06a4<span class="token punctuation">.</span>923 4<span class="token punctuation">.</span>923 0 003<span class="token punctuation">.</span>946 4<span class="token punctuation">.</span>827 4<span class="token punctuation">.</span>996 4<span class="token punctuation">.</span>996 0 01<span class="token punctuation">-</span>2<span class="token punctuation">.</span>212<span class="token punctuation">.</span>085 4<span class="token punctuation">.</span>936 4<span class="token punctuation">.</span>936 0 004<span class="token punctuation">.</span>604 3<span class="token punctuation">.</span>417 9<span class="token punctuation">.</span>867 9<span class="token punctuation">.</span>867 0 01<span class="token punctuation">-</span>6<span class="token punctuation">.</span>102 2<span class="token punctuation">.</span>105c<span class="token punctuation">-.</span>39 0<span class="token punctuation">-.</span>779<span class="token punctuation">-.</span>023<span class="token punctuation">-</span>1<span class="token punctuation">.</span>17<span class="token punctuation">-.</span>067a13<span class="token punctuation">.</span>995 13<span class="token punctuation">.</span>995 0 007<span class="token punctuation">.</span>557 2<span class="token punctuation">.</span>209c9<span class="token punctuation">.</span>053 0 13<span class="token punctuation">.</span>998<span class="token punctuation">-</span>7<span class="token punctuation">.</span>496 13<span class="token punctuation">.</span>998<span class="token punctuation">-</span>13<span class="token punctuation">.</span>985 0<span class="token punctuation">-.</span>21 0<span class="token punctuation">-.</span>42<span class="token punctuation">-.</span>015<span class="token punctuation">-.</span>63A9<span class="token punctuation">.</span>935 9<span class="token punctuation">.</span>935 0 0024 4<span class="token punctuation">.</span>59z"</span>
<span class="highlight-line">    }</span>
<span class="highlight-line">  <span class="token tag">svg<span class="token attr-class">.button__icon</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">role</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">'img'</span> xmlns<span class="token operator">=</span><span class="token string">'http://www.w3.org/2000/svg'</span> viewbox<span class="token operator">=</span><span class="token string">'0 0 24 24'</span></span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">    <span class="token tag">title</span><span class="token punctuation">=</span><span class="token code"> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> Icon</span><span class="token template-punctuation string">`</span></span></span></span>
<span class="highlight-line">    <span class="token tag">path<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">d</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token constant">PATH_MAP</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span></span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token mixin"><span class="token name function">+icon</span><span class="token punctuation">(</span><span class="token string">'Twitter'</span><span class="token punctuation">)</span></span></span></code></pre>
<p>This can be a neat way to create an icon mixin to reuse. It's a little overkill for our example, but worth noting.</p>
<p>Now, we need some markup for our button.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag"><span class="token attr-class">.scene</span></span></span>
<span class="highlight-line">  <span class="token tag">button<span class="token attr-class">.button</span></span></span>
<span class="highlight-line">    <span class="token tag">span<span class="token attr-class">.button__shadow</span></span></span>
<span class="highlight-line">      <span class="token mixin"><span class="token name function">+icon</span><span class="token punctuation">(</span><span class="token string">'Twitter'</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">    <span class="token tag">span<span class="token attr-class">.button__content</span></span></span>
<span class="highlight-line">      <span class="token mixin"><span class="token name function">+icon</span><span class="token punctuation">(</span><span class="token string">'Twitter'</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">      <span class="token tag">span<span class="token attr-class">.button__shine</span></span></span></code></pre>
<p>It's always good to be mindful of accessibility. We can check what our button gives off by checking the &quot;Accessibility&quot; panel in Dev Tools.</p>
<p><img src="https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613444375a11y-panel.png" alt="Accessibility panel showing the text read for our button"></p>
<p>Might be a good idea to put a <code>span</code> in for our button text and hide the icons with <code>aria-hidden</code>. We can hide the <code>span</code> text too whilst making it available to screen readers.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag"><span class="token attr-class">.scene</span></span></span>
<span class="highlight-line">  <span class="token tag">button<span class="token attr-class">.button</span></span></span>
<span class="highlight-line">    <span class="token tag">span<span class="token attr-class">.button__shadow</span></span></span>
<span class="highlight-line">      <span class="token mixin"><span class="token name function">+icon</span><span class="token punctuation">(</span><span class="token string">'Twitter'</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">    <span class="token tag">span<span class="token attr-class">.button__content</span></span></span>
<span class="highlight-line">      <span class="token tag">span<span class="token attr-class">.button__text</span></span> <span class="token plain-text">Twitter</span></span>
<span class="highlight-line">      <span class="token mixin"><span class="token name function">+icon</span><span class="token punctuation">(</span><span class="token string">'Twitter'</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">      <span class="token tag">span<span class="token attr-class">.button__shine</span></span></span></code></pre>
<p>We've got different options for applying those <code>aria-hidden</code> attributes. The one we will use is changing the mixin code to apply <code>aria-hidden</code>.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token mixin"><span class="token keyword">mixin</span> <span class="token function">icon</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span></span>
<span class="highlight-line">    <span class="token tag">const</span> <span class="token plain-text">PATH_MAP = {</span></span>
<span class="highlight-line">      <span class="token tag">Twitter<span class="token punctuation">:</span></span> "<span class="token punctuation">...</span>path code"</span>
<span class="highlight-line">    }</span>
<span class="highlight-line">  <span class="token tag">svg<span class="token attr-class">.button__icon</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">role</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">'img'</span> aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span> xmlns<span class="token operator">=</span><span class="token string">'http://www.w3.org/2000/svg'</span> viewbox<span class="token operator">=</span><span class="token string">'0 0 24 24'</span></span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">    <span class="token tag">title</span><span class="token punctuation">=</span><span class="token code"> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> Icon</span><span class="token template-punctuation string">`</span></span></span></span>
<span class="highlight-line">    <span class="token tag">path<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">d</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token constant">PATH_MAP</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span></span><span class="token punctuation">)</span></span></span></span></code></pre>
<p>Another neat way with Pug is to pass through all attributes to a mixin. This is useful in scenarios where we only want to pass some attributes through.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token mixin"><span class="token keyword">mixin</span> <span class="token function">icon</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span></span>
<span class="highlight-line">    <span class="token tag">const</span> <span class="token plain-text">PATH_MAP = {</span></span>
<span class="highlight-line">      <span class="token tag">Twitter<span class="token punctuation">:</span></span> "<span class="token punctuation">...</span>path code"</span>
<span class="highlight-line">    }</span>
<span class="highlight-line">  <span class="token tag">svg<span class="token attr-class">.button__icon</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">role</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">'img'</span> xmlns<span class="token operator">=</span><span class="token string">'http://www.w3.org/2000/svg'</span> viewbox<span class="token operator">=</span><span class="token string">'0 0 24 24'</span></span><span class="token punctuation">)</span></span><span class="token attributes"><span class="token operator">&amp;</span><span class="token function">attributes</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">    <span class="token tag">title</span><span class="token punctuation">=</span><span class="token code"> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> Icon</span><span class="token template-punctuation string">`</span></span></span></span>
<span class="highlight-line">    <span class="token tag">path<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">d</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token constant">PATH_MAP</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span></span><span class="token punctuation">)</span></span></span></span></code></pre>
<p>If we check the “Accessibility” panel again, our button only reads “Twitter”. And that’s what we want!</p>
<h2>The Styles</h2>
<p>Here's the part you came for. How we style the thing. To start, we've dropped this in;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">*</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That allows us to create the 3D transforms we need for our button. Try switching that off in the final demo and you'll see that everything breaks.</p>
<p>Let's hide the span text from our eyes. We can do this in many ways.  One recommended way to hide an element from our eyes, but not those of the screenreader is to use these styles.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.button__text</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">margin</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">clip</span><span class="token punctuation">:</span> <span class="token function">rect</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border-width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Before we start working on our button, we're going to tilt the scene. We can do this using a <code>transform</code>. Here we chain the <code>transform</code> to get it into the position we want. I spent a bit of time tinkering with values here on live stream to get it close to the original.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.scene</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-40deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>18deg<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>You’ll notice a <code>size</code> variable there too. We're going to drive certain things for our button with CSS variables. This will make it handy for tinkering with values and the effect. Usually, we would put these under the scope they're required in. But, for demos like this, putting them under the <code>:root</code> at the top of our file makes it easier for us to play with.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">:root</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--blur</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--shine-blur</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--blur<span class="token punctuation">)</span> * 4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--size</span><span class="token punctuation">:</span> 25vmin<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--transition</span><span class="token punctuation">:</span> 0.1s<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--depth</span><span class="token punctuation">:</span> 3vmin<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--icon-size</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--radius</span><span class="token punctuation">:</span> 24%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--shine</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>0.85<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--button-bg</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.025<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--shadow-bg</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.115<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--shadow-icon</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.35<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--bg</span><span class="token punctuation">:</span> #e8f4fd<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>These are the variables, we’re working with and these will make sense as we build up our button.</p>
<h2>The Button</h2>
<p>Let's move onto the button!</p>
<p>First things first. The actual button element. This is going to fill the scene element. We could have applied the sizing and transforms direct on the button. But, if we were to introduce other buttons and elements, we'd have to transform and size them all. This is something to be mindful of with CSS in general. Try and make your container elements dictate the layout.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.button</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">outline</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Here we strip the button styles. And that gives us this.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="gOLPBjB"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/gOLPBjB">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Next we need to create a common start point for the button content and the shadow. We can do this by giving each element absolute positioning. The content will have a 3D translate based on the depth variable we defined before.</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.button__content,
.button__shadow</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--radius<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">place-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.button__content</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Note how we’re also making use of the <code>--radius</code> variable too.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="oNYbaKq"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/oNYbaKq">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>It's hard to distinguish between the two icons at this stage. And now's a good time to style them. We can apply some basic icon styling and use a scoped fill for each SVG icon.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.button__content</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--fill</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--icon-fill<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.button__shadow</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--fill</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shadow-fill<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.button__icon</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--icon-size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">fill</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fill<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--icon-size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>It’s getting there! The icons aren’t the same size at the moment though. We’ll get to that.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="mdOVQJv"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/mdOVQJv">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Let’s get the button press in place. This part is real quick to integrate.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.button__content</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transition</span><span class="token punctuation">:</span> transform <span class="token function">var</span><span class="token punctuation">(</span>--transition<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.button:active</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--depth</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That’s it! Using scoped CSS variables we’re saying remove the z-axis translation on <code>:active</code>. Adding the <code>transition</code> to the <code>transform</code> stops it from being so instant.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="VwmeVKE"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/VwmeVKE">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>All that's left to do is style the button layers and the shine. Let's start with the shadow.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.button__shadow</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg-shadow<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--blur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transition</span><span class="token punctuation">:</span> filter <span class="token function">var</span><span class="token punctuation">(</span>--transition<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.button:active</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--blur</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Another scoped style here. We’re saying that when we press the button, the shadow is no longer blurred. And to blur the shadow, we use the CSS <code>filter</code> property with a <code>blur</code> filter. The value of which we defined in our CSS variables. Have a play with the <code>--blur</code> variable and see what happens.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="OJbMawy"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/OJbMawy">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>For the content layer, we're going to use a background color and then apply a backdrop filter. Much like filter, <code>backdrop-filter</code> is a way for us to apply visual effects to elements. A common use case currently is using blur for &quot;Glassmorphism&quot;.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.button__content</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">backdrop-filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--blur<span class="token punctuation">)</span> * 0.25<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--button-bg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transition</span><span class="token punctuation">:</span> transform <span class="token function">var</span><span class="token punctuation">(</span>--transition<span class="token punctuation">)</span><span class="token punctuation">,</span> backdrop-filter <span class="token function">var</span><span class="token punctuation">(</span>--transition<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We use the value of <code>--blur</code> and apply a transition for <code>backdrop-filter</code>. Because of the way we scoped our <code>--blur</code> variable on <code>:active</code>, we get the transition almost for free. Why the <code>overflow: hidden</code>? We’re anticipating that shine element that will move around the button. We don’t want it wandering off outside though.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="dyOGQQL"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/dyOGQQL">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>And now, the last piece of the puzzle. That light shine. This is what has been causing the icons to be a different size. Because it has no styles, it's affecting the layout. Let's give it some styles.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.button__shine</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--shine-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--size<span class="token punctuation">)</span> * 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shine<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shine-size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--shine-blur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">brightness</span><span class="token punctuation">(</span>1.25<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shine-size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That <code>absolute</code> positioning will sort out the icon sizing. Applying a border radius will make the spotlight round. And we use <code>filter</code> again to give the blurry spot light effect. You’ll notice we’ve chained a <code>brightness</code> filter on the end there to brighten things up a bit after they’re blurred.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="abBdQxR"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/abBdQxR">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Using the 3D translation ensures that the shine sits above the button which it would do. This way, there’s no chance of it getting cut by z-fighting with other elements.</p>
<p>That's all we need for the styles for now. Now it's time for some scripts.</p>
<h2>Scripts</h2>
<p>We're going to use <a href="https://greensock.com">GreenSock</a> today for convenience. They have some neat utilities for what we want. But, we could achieve the same result with vanilla JavaScript. Because we're using scripts with type &quot;module&quot;, we can take advantage of <a href="https://skypack.dev">SkyPack</a>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> gsap <span class="token keyword">from</span> <span class="token string">'https://cdn.skypack.dev/gsap'</span></span></code></pre>
<p>And now we're ready to start tinkering. We want our button to respond to pointer movement. The first thing we want is to translate the shine as if it follows our pointer. The second is to shift the button dependant on where our pointer is.</p>
<p>Let's grab the elements we need and set up some basic event listeners on the document.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> gsap <span class="token keyword">from</span> <span class="token string">'https://cdn.skypack.dev/gsap'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">BUTTON</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.button'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">CONTENT</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.button__content'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">SHINE</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.button__shine'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">UPDATE</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pointermove'</span><span class="token punctuation">,</span> <span class="token constant">UPDATE</span><span class="token punctuation">)</span></span>
<span class="highlight-line">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pointerdown'</span><span class="token punctuation">,</span> <span class="token constant">UPDATE</span><span class="token punctuation">)</span></span></code></pre>
<p>Try moving your pointer around in this demo to see the valuables we get returned for <code>x</code> and <code>y</code>.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="YzpwdVy"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/YzpwdVy">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This is the trickiest bit. We need some math to work out the shine position. We're going to translate the shine after it's initial reset. We need to first update the shine styles to accommodate this. We’re using the scoped CSS variables <code>--x</code> and <code>--y</code>. We give them a fallback of <code>-150</code> so they’ll be out of shot when the demo loads.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.button__shine</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">,</span> 1vmin<span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--x<span class="token punctuation">,</span> -150<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--y<span class="token punctuation">,</span> -150<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Then, in our update function we calculate the new position for the shine. We're basing this on a percentage of the button size. We can calculate this by subtracting the button position from our pointer position. Then we divide that by the position. To finish, multiply by 200 to get a percentage.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">BOUNDS</span> <span class="token operator">=</span> <span class="token constant">CONTENT</span><span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">POS_X</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">POS_Y</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span></span></code></pre>
<p>For example, <code>POS_X</code>.</p>
<ol>
<li>Grab pointer position x.</li>
<li>Subtract button position x.</li>
<li>Divide by button width.</li>
<li>Multiply by 200.</li>
</ol>
<p>We multiply by 200 because the shine is half the size of the button. This particular part is tricky because we’re trying to track the pointer and map it into 3D space.</p>
<p>To apply that to the button, we can set those CSS variables using <code>gsap.set</code>. That’s a GSAP method that works as a zero second tween. It’s particularly useful for setting values on elements.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gsap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">SHINE</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token string">'--x'</span><span class="token operator">:</span> <span class="token constant">POS_X</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token string">'--y'</span><span class="token operator">:</span> <span class="token constant">POS_Y</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>But, if we want to take it one step further, we can use a <code>quickSetter</code> from GSAP which would be better for performance in real-world scenarios where we’re making lots of updates.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> xySet <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">quickSetter</span><span class="token punctuation">(</span><span class="token constant">SHINE</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token comment">// Then to update the values</span></span>
<span class="highlight-line"><span class="token function">xySet</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token string">'--x'</span><span class="token operator">:</span> <span class="token constant">POS_X</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token string">'--y'</span><span class="token operator">:</span> <span class="token constant">POS_Y</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>That makes our update function look something like this.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">UPDATE</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">BOUNDS</span> <span class="token operator">=</span> <span class="token constant">CONTENT</span><span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">POS_X</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">POS_Y</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span></span>
<span class="highlight-line">  <span class="token function">xySet</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token string">'--x'</span><span class="token operator">:</span> <span class="token constant">POS_X</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token string">'--y'</span><span class="token operator">:</span> <span class="token constant">POS_Y</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The accuracy of following the pointer would need more calculations to be precise. Have a play with this demo where the overflow on the button is visible and the shine is more prominent. You can see how the shine element loses it's tracking.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="MWbKZrP"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/MWbKZrP">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This demo puts everything where it should be.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="rNWxPgW"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/rNWxPgW">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Last feature. Let’s shift the button for an added touch. Here, we're going to base the shift of the button on pointer position. But, we're going to limit it's movement. To do this, we can use another GSAP utility. We're going to use mapRange. This allows us to map one set of values to another. We can then pass a value in and get a mapped value back out.</p>
<p>First, we’ll define a limit for movement. This will be a percentage of the button size.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">LIMIT</span> <span class="token operator">=</span> <span class="token number">10</span></span></code></pre>
<p>Now in our update function we can calculate the percentage of shift.  We do this by mapping the the window width against the limit. And we input our pointer position to get the mapped percentage back.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> xPercent <span class="token operator">=</span> gsap<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">mapRange</span><span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token operator">-</span><span class="token constant">LIMIT</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token constant">LIMIT</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  x</span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>In this block we’re mapping the range of <code>0</code> to <code>window.innerWidth</code> against <code>-10</code> to <code>10</code>. Passing pointer position <code>x</code> will give us a value between <code>-10</code> and <code>10</code>. And then we can apply that percentage shift to our button. We do the same for vertical shift and this gives us an update function like the following.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> buttonSet <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">quickSetter</span><span class="token punctuation">(</span><span class="token constant">BUTTON</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> xySet <span class="token operator">=</span> gsap<span class="token punctuation">.</span><span class="token function">quickSetter</span><span class="token punctuation">(</span><span class="token constant">SHINE</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">LIMIT</span> <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">UPDATE</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">BOUNDS</span> <span class="token operator">=</span> <span class="token constant">CONTENT</span><span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">POS_X</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">POS_Y</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token constant">BOUNDS</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span></span>
<span class="highlight-line">  <span class="token function">xySet</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token string">'--x'</span><span class="token operator">:</span> <span class="token constant">POS_X</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token string">'--y'</span><span class="token operator">:</span> <span class="token constant">POS_Y</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> xPercent <span class="token operator">=</span> gsap<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">mapRange</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token operator">-</span><span class="token constant">LIMIT</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token constant">LIMIT</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    x</span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> yPercent <span class="token operator">=</span> gsap<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">mapRange</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token operator">-</span><span class="token constant">LIMIT</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token constant">LIMIT</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    y</span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">buttonSet</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">    xPercent<span class="token punctuation">,</span></span>
<span class="highlight-line">    yPercent<span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>That’s it!</h2>
<p>That’s how you create a directional lit 3D button with CSS and a little scripting. The cool thing is that we can make changes with relative ease.</p>
<p>For the final demo, I’ve added some extra details and changed the icon. You might recognise it.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="bGBEZqd"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/bGBEZqd">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>As always, thanks for reading. Wanna see more? Come find me on <a href="https://twitter.com/jh3yy">Twitter</a> or <a href="https://twitch.tv/jh3yy">check out the live stream</a>!</p>
<div class="post__embed-container">
      <iframe loading="lazy" class="post__embed" src="https://www.youtube.com/embed/79ufI5x0_NU" allow="encrypted-media; picture-in-picture"></iframe>
    </div>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>A Guide to Clipping Paths</title>
    <link href="https://jhey.dev/writing/a-guide-to-clipping-paths/"/>
    <updated>2021-02-10T00:00:00+00:00</updated>
    <id>https://jhey.dev/writing/a-guide-to-clipping-paths/</id>
    <content type="html"><![CDATA[
      <p>Seen a bunch about <code>clip-path</code> recently. And with <code>path</code> values now supported in major browsers, figured it was time to write up a guide.</p>
<h2>What's a <code>clip-path</code>?</h2>
<p>It does what it says on the tin. It clips the viewable parts of an element to a given path.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token comment">/* What shape would this give you? Try walking the coordinates in your head */</span></span>
<span class="highlight-line"><span class="token selector">.clipped</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>100% 0<span class="token punctuation">,</span> 20% 50%<span class="token punctuation">,</span> 35% 50%<span class="token punctuation">,</span> 0% 100%<span class="token punctuation">,</span> 70% 50%<span class="token punctuation">,</span> 50% 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>When to <code>clip-path</code>?</h2>
<p>It comes in handy when a combination of <code>overflow</code>, <code>transform</code>, <code>border-radius</code>, and other properties won't cut it. In most cases, we're able to achieve what we want without reaching for it. But, some shapes are tricky without it.</p>
<p>For example, how to make a <a href="https://codepen.io/jh3y/pen/XWNjBQM">star shape</a>!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="XWNjBQM"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/XWNjBQM">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>How to <code>clip-path</code>?</h2>
<p>This <a href="https://codepen.io/jh3y/pen/XqVQqa">demo</a> will throw you straight in so you can see some of the things we can do with it (<em>Best viewed in its own tab</em>).</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="XqVQqa"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/XqVQqa">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>You'll notice that each value is using percentages. We could use other sizing units such as <code>px</code>, <code>rem</code>, etc. But, this will vary per design and use case. Using percentages has the benefit of keeping things responsive (<em>More on this later</em>). What are those values relative to? Clip paths work off the same coordinate system that we use with other CSS properties. Think about it the same as using <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code>. Each value or coordinate is relative to the element it's applied to.</p>
<hr>
<p>With that out of the way, let's dig into the different values and what we can do with them.</p>
<h2>Inset</h2>
<p>Define an inset rectangle where everything outside is hidden away. But, this is a little misleading. It doesn't have to be &quot;inset&quot;. Inset has two particularly good use cases. Clipping blocks of an element and using it as a &quot;controlled&quot; overflow. Whereas <code>overflow: hidden</code> will hide everything outside the bounding box. We can use an inset <code>clip-path</code> to allow overflow in certain directions. And that's because we can use negative values with <code>clip-path</code>.</p>
<p>For example, this <code>clip-path</code> would allow overflow out of the top edge and not the others.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.overflow--top</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>-100% 0 0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Consider this demo of an animated rocket. We want the rocket to only be clipped from the bottom as it comes out of the opening. This is a good use case for controlled overflow.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="gOLwBdR"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/gOLwBdR">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The last thing to mention for <code>inset</code> is that you can apply a corner radius. To do this, use <code>round</code> followed by a radius. This works with short-hand much like <code>padding</code>, <code>margin</code>, etc.</p>
<p>For example,</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.rounded-inset</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>0 0 50% 0 round 10% 25% 50% 0%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.rounded-inset</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>0 0 50% 0 round 10% 25%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Have a play with <a href="https://codepen.io/jh3y/pen/JjbRayB">this demo</a> to see how controlled overflow can work. Rounded corners are applied in the demo and notice how they disappear at certain values.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="JjbRayB"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/JjbRayB">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Circle</h2>
<p>Circle clips aren't ones that come up often. This is partly due to the fact we can achieve the same result with the use of <code>border-radius</code> in many cases.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.circle-clip</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">circle</span><span class="token punctuation">(</span>50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The value for <code>circle</code> is the <code>radius</code> relative to the element. A <code>50%</code> radius will create a circle that covers an element. Equal to using this.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.circle-clip</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The magic with using <code>circle</code> is when we define both a <code>radius</code> and a <code>position</code>.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.clipped-offset-circle</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">circle</span><span class="token punctuation">(</span>50% at 100% 25%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Those two final values are position <code>x</code> and position <code>y</code>. The use of positioning is what gives us interesting use cases for <code>circle</code> clipping. This defaults to <code>50% 50%</code> if not defined.</p>
<p>For example, how about an image reveal on <code>:hover</code>? In this demo, we overlay two images. Then we reveal a color version using a transitioned <code>clip-path</code>. Play with the values to make the image bloom from different positions.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="VwmKVrr"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/VwmKVrr">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Here's the same demo without the reveal. It will get you comfortable with <code>circle</code> clips. Try changing the positions and radius.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="BaQLvjX"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/BaQLvjX">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Ellipse</h2>
<p>The <code>ellipse</code> value works almost exactly the same as <code>circle</code>. The only difference is that we get to define both a horizontal and vertical radius. Again, the position is optional.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.ellipse-clip</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">ellipse</span><span class="token punctuation">(</span>50% 25% at 50% 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Try it out!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="KKNgbrq"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/KKNgbrq">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Polygon</h2>
<p>Now things get interesting. The <code>polygon</code> clip allows you to define a polygon with as many points as you like for clipping an element. Each point is a coordinate relative to the element. When approaching a <code>polygon</code> clip, try walking the coordinates in your head. This I find is the best approach for <code>polygon</code> paths.</p>
<p>For example, start with this basic polygon.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.polygon-clip</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span> 100% 0<span class="token punctuation">,</span> 100% 100%<span class="token punctuation">,</span> 0 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That's right! It would be the same as <code>inset(0 0 0 0)</code>. The clip we defined right at the top of this article?</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.clipped</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>100% 0<span class="token punctuation">,</span> 20% 50%<span class="token punctuation">,</span> 35% 50%<span class="token punctuation">,</span> 0% 100%<span class="token punctuation">,</span> 70% 50%<span class="token punctuation">,</span> 50% 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This would give you a thunderbolt like shape!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="vYyXbKN"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/vYyXbKN">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The cool thing about <code>polygon</code> is that you can create any polygon you can think of. For fun, I recreated the ever-popular <a href="https://css-tricks.com/the-shapes-of-css/">&quot;Shapes of CSS&quot;</a> article shapes with <code>polygon</code> clips.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="gOpLBEa"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/gOpLBEa">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Try adding and removing nodes in this demo to make different polygons.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="RwoGvZR"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/RwoGvZR">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>You may have noticed something when playing with the nodes. You can create &quot;faux&quot; breaks in the path depending on the route you take.</p>
<p>If you cross the paths between nodes, you're able to cut parts away.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="dyOOOPB"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/dyOOOPB">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>If you duplicate some of the points and walk a line, you can create separated shapes.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="QWGGGLv"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/QWGGGLv">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This has the benefit of maintaining responsiveness.</p>
<h2>Path</h2>
<p>For everything else with <code>clip-path</code>, there's <code>path</code>. This one's the most flexible. It's now supported in all the major browsers! But, it has its caveats. Using a <code>path</code> value means passing in a path definition string. This is the same path we use for an SVG path. And it's relative to the dimensions of our element.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token comment">/* Any guess at what shape this is? */</span></span>
<span class="highlight-line"><span class="token selector">.path-clipped</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">path</span><span class="token punctuation">(</span>"M 10<span class="token punctuation">,</span>30</span>
<span class="highlight-line">           A 20<span class="token punctuation">,</span>20 0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>1 50<span class="token punctuation">,</span>30</span>
<span class="highlight-line">           A 20<span class="token punctuation">,</span>20 0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>1 90<span class="token punctuation">,</span>30</span>
<span class="highlight-line">           Q 90<span class="token punctuation">,</span>60 50<span class="token punctuation">,</span>90</span>
<span class="highlight-line">           Q 10<span class="token punctuation">,</span>60 10<span class="token punctuation">,</span>30 z"<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>It means we can create some interesting effects that could otherwise be very tricky. The alternative would be reaching for SVG or using CSS masking.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="oNYzVNY"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/oNYzVNY">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Consider this clip. It's a sunshine clip. The <code>path</code> breaks into different segments. This is something we can't achieve with the other clip values. Unless we use a lot of Math or the &quot;faux&quot; technique we mentioned with <code>polygon</code>. We're combining rounded shapes with polygons too. This is the power of using <code>path</code>. The ability to create irregular shapes or paths that break. This gives us lots of opportunity. To note, I created the path there by resizing an SVG icon in Figma, and then lifting the path definition out of the file. That took maybe a minute or so.</p>
<p>The caveat to using <code>path</code> is the path definition itself. As mentioned, it's relative to the dimensions of our element.
This is where things get tricky. It's not responsive. A path definition uses pixels that are relative to an SVG viewBox. When applied to an element, the element's width and height become an implied viewBox. This is the same hurdle that CSS motion path faces. I wrote about <a href="https://css-tricks.com/create-a-responsive-css-motion-path-sure-we-can/">ways to tackle this before</a>. The best approach if we decide to use <code>path</code> is to go with concrete sizing. Or create scaled versions of our path to complement.</p>
<p>We should only reach for <code>path</code> when we need very irregular shapes. The lack of responsiveness adds a hurdle. With that in mind, if we can create the shape we need with regular &quot;responsive&quot; clips and shapes, do that. Alternatively, use SVG or CSS masking if possible.</p>
<hr>
<h2>Animation &amp;&amp; Transition</h2>
<p>As seen in some of the demos above, we can transition or animate <code>clip-path</code>. There's one condition. The <code>path</code> must have a consistent structure. For example, if we transition a polygon, that polygon must have a consistent number of points.</p>
<p>Consider this &quot;Avengers&quot; themed animation that cycles through different <code>polygon</code> clips.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="xjYmVg"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/xjYmVg">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This demo for image reveals showcases a variety of different shapes being transitioned. The &quot;start&quot; and &quot;end&quot; clips are inlined as CSS variables for each image container.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="LYGaNby"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/LYGaNby">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This will even work with <code>path</code> paths. Try hovering over the moon here.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="qBqavMX"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/qBqavMX">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The key thing is that the paths transitioned to and from have the same number of nodes or points. And that they have the same type of <code>clip-path</code>.</p>
<h2>Case Studies &amp;&amp; Use Cases</h2>
<p>There isn't a great place to put these observations. But, &quot;Case Studies&quot; kinda feels right. These are things that could be worth noting and make you consider approaches. In particular, whether <code>clip-path</code> is right for the job.</p>
<h3>Reveal Scenarios</h3>
<p>The use of <code>clip-path</code> is perfect for any type of &quot;Reveal&quot; scenario. This is where we can make a clear distinction between a reveal and a scale. A reveal <strong>does not</strong> distort its content.</p>
<p>Consider this demo. It's a Twitch stream overlay concept where the banners animate in.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="poNEXZo"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/poNEXZo">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>But, the transition uses <code>scaleX</code> and that distorts the banner content. This is a great use case for a reveal.</p>
<p>In that demo, we're doing this.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> growIn</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">from</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--rotate<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> * 1deg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">scaleX</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>But, it would make more sense if we switched that animation around. For this, we could use scoped variables.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.banner</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>0 0 0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.banner--horizontal</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>0 0 0 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.banner--vertical</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>0 100% 0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> growIn</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">from</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And now our banners would reveal the information and not distort it!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="XWNjLyj"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/XWNjLyj">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Reveals make a great use case for clip-path usage. We can use this image reveal demo again for another example.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="LYGaNby"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/LYGaNby">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>Skewed Sections</h3>
<p>This design phenomenon has taken off in recent years. The skewing of page sections and content. I got thinking about this when approached about how to create a certain effect. Let's look at some examples.</p>
<p>Consider this page with some basic sections.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="bGBwJaE"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/bGBwJaE">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We want each division to have an angle. It's tempting to reach for a <code>clip-path</code> here. Using <code>polygon</code> would seem apt.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">section</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 20%<span class="token punctuation">,</span> 100% 0%<span class="token punctuation">,</span> 100% 80%<span class="token punctuation">,</span> 0 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And, that works to an extent. All we'd need is a way to cover those corners for the first section.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ExNgJEL"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ExNgJEL">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We could change it so that it's applied to <code>even</code> sections. But, then we'll get an issue at the end of the document.</p>
<p>What if want to apply a background color to every section? That's tricky because the sections don't meet now that they're clipped.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="dyOpLjr"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/dyOpLjr">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We could make use of pseudo-elements and use coordinates that go outside the bounds of the section. But, that could get complicated and hard to maintain. We have to start managing overlaps and using extra elements. Plus we need to calculate the angle.</p>
<p>The trick here is to think about what we're trying to do. The clue is in the goal. We want to skew the sections. And CSS transforms will let us do this.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">section</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewY</span><span class="token punctuation">(</span>-11deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">section > *</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewY</span><span class="token punctuation">(</span>11deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That small snippet of CSS gets us most of the way and we don't need to handle clip management. This is a rudimentary approach.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="xxREeeQ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/xxREeeQ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Take it a little further with pseudo-elements and you've got something quite usable.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ExNgzxO"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ExNgzxO">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>In fact, Nils Binder <a href="https://9elements.com/blog/pure-css-diagonal-layouts/">covers different ways to approach these diagonal sections</a>. This playground using the <code>transform</code> approach is perfect and handles how to cover the corners, etc.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="yLyrmyg"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/yLyrmyg">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The gist here is that because we can with <code>clip-path</code> doesn't mean we should. It's an interesting case of looking at different ways to approach the same problem. Something that often comes up when we do things with CSS.</p>
<h3>Glitchy Effects</h3>
<p>Glitchy effects are a great use case for using <code>clip-path</code>. Because we can animate a <code>clip-path</code>, moving an <code>inset</code> clip over an element can create the effect. It's what's used for these CSS Cyberpunk 2077 buttons.</p>
<p>The &quot;trick&quot; for animated glitch effects is using an animated clip on a clone element.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOMBRmY"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOMBRmY">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>A few steps later with the buttons and we get to this.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="PoGbxLp"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/PoGbxLp">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>You can read about how to make them <a href="https://jhey.dev/writing/css-cyberpunk-2077-buttons-taking-your-css-to-night-city/">here</a>.</p>
<h2>That's It!</h2>
<p>That's all you might need to know about <code>clip-path</code>... for now. Got a cool demo or a use case that's of interest. Share it with me!</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Make Your Elements Full With requestFullscreen</title>
    <link href="https://jhey.dev/writing/make-your-elements-full-with-requestfullscreen/"/>
    <updated>2021-01-29T00:00:00+00:00</updated>
    <id>https://jhey.dev/writing/make-your-elements-full-with-requestfullscreen/</id>
    <content type="html"><![CDATA[
      <p>Let's put it out there. This isn't one you're going to need often. But, it's cool to know about. There are so many neat native APIs that we often never use or overlook.</p>
<p>I only looked this one up because of a tweet thread Kent started</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1350081180327059460?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>And the React hook <code>useFull</code> was born! 😅</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="poEqyJE"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/poEqyJE">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>A React hook for making an element fullscreen.</p>
<p>But, this made me take a closer look at the method <code>requestFullscreen</code> from the Element API.</p>
<hr>
<p>For those in camp <strong>TL;DR</strong>, you can make an element fullscreen with <code>requestFullscreen</code>(There are <a href="https://developers.google.com/web/fundamentals/native-hardware/fullscreen"><em>prefixes</em></a>).</p>
<p>The request requires some form of user gesture. You can't request fullscreen without it.</p>
<p>Have a play with this demo!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="rNMgPxg"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/rNMgPxg">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<aside class="post__aside post__aside--note">
      <svg viewBox="0 0 24 24">
        <path fill="var(--color)" d="M17,4V10L15,8L13,10V4H9V20H19V4H17M3,7V5H5V4C5,2.89 5.9,2 7,2H19C20.05,2 21,2.95 21,4V20C21,21.05 20.05,22 19,22H7C5.95,22 5,21.05 5,20V19H3V17H5V13H3V11H5V7H3M5,5V7H7V5H5M5,19H7V17H5V19M5,13H7V11H5V13Z" />
      </svg>
      <p><p>The <code>requestFullscreen</code> method has different prefixes. Of course it does! There&#39;s a neat script in <a href="https://developers.google.com/web/fundamentals/native-hardware/fullscreen">this article</a> that will show a nice way to deal with it.</p>
</p>
    </aside>
<hr>
<h2>Why?</h2>
<p>True. It's not something you'll use often. A common use case? Displaying media, documents, etc. Think YouTube videos, etc.</p>
<h2>How?</h2>
<p>It's as straightforward as</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">makeFullscreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  element<span class="token punctuation">.</span><span class="token function">requestFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That needs to happen as the result of a user gesture. You might make the request as a result of clicking a button for example.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token constant">BUTTON</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> makeFullscreen<span class="token punctuation">)</span></span></code></pre>
<p>The cool thing is that you can make anything fullscreen. As long as it's not a <code>dialog</code>.</p>
<h2>Detect Changes</h2>
<p>How do you detect when you're in fullscreen mode? The method returns a <code>Promise</code>. But, not in all browsers 🤦‍♂️</p>
<p>The most compatible way currently is to listen to a <code>fullscreenchange</code> event on the <code>document</code>. Then check for the existence of <code>document.fullscreenElement</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'fullscreenchange'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>fullscreenElement<span class="token punctuation">)</span></span>
<span class="highlight-line">    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'We are fullscreen!!!'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">else</span></span>
<span class="highlight-line">    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Do nothing...'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>This gives you a neat hook to make changes to elements. You could apply different styles for example. In the React example above, I trigger an animation when the element goes into fullscreen mode. I do this by adding/removing a class on <code>fullscreenchange</code>.</p>
<h2>Leaving</h2>
<p>When you want to get out of fullscreen mode</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">document<span class="token punctuation">.</span><span class="token function">exitFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<h2>That's It!</h2>
<p>That's all there is to it.</p>
<p>The fun thing here is, what could you make with it? What kinda experience could you offer up to people with it? Where does your imagination take you?</p>
<p>What other cool browser APIs are out there to play with?</p>
<p>For example, in this demo, particle animations happen upon button click. It's like a &quot;mock&quot; screensaver you could provide your users!</p>
<p><strong>NOTE::</strong> There's a reason you can't create fullscreen screensavers that would show after some inactivity. One reason. Think of the popups!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="YzpzYaj"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/YzpzYaj">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Stay awesome!</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>CSS Animation Superpowers with @property</title>
    <link href="https://jhey.dev/writing/css-animation-superpowers-with-property/"/>
    <updated>2021-01-27T00:00:00+00:00</updated>
    <id>https://jhey.dev/writing/css-animation-superpowers-with-property/</id>
    <content type="html"><![CDATA[
      <p>There's a new CSS feature on the way that will give you CSS animation superpowers!</p>
<p>For those in camp <strong>TL;DR</strong>, <code>@property</code> provides a way for the browser to type check your CSS variables. By doing that, the browser is then able to animate and transition those properties!</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --spinAngle</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;angle>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> spin</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--spinAngle</span><span class="token punctuation">:</span> 360deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p><a href="https://caniuse.com/mdn-css_at-rules_property">Browser compatibility</a> is getting there too.</p>
<p>Have a play with the demos in this <a href="https://codepen.io/collection/AazyEP">CodePen collection</a>.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="OJRLMxE"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/OJRLMxE">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>You can also watch this screencast where I go through how to use it.</p>
<div class="post__embed-container">
      <iframe loading="lazy" class="post__embed" src="https://www.youtube.com/embed/qrU88BoVFB0" allow="encrypted-media; picture-in-picture"></iframe>
    </div>
<p>For those sticking around, let's dig in and see what we can do with CSS variables and animation.</p>
<hr>
<p>Something I've always enjoyed doing is trying to push the limits on my CSS animation. When CSS variables came about, one of my first questions was &quot;Can we animate them?&quot;. The answer was &quot;No&quot;.</p>
<p>But, we could still use them in our CSS animations for different reasons.</p>
<p>We couldn't animate the properties. But, we could use them to make our animation dynamic. In fact, I tweeted about it when I found out.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1191695646752948225?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>This demo even got printed in a magazine!</p>
<p><img src="https://res.cloudinary.com/jh3yy/image/upload/v1611767145/jhey.dev/Posts/netmagazine-mention_pnwc9b.jpg" alt="Demo shown in net magazine - January 2020"></p>
<p>This makes for some very interesting opportunities when you start inlining properties. Check out <a href="https://jhey.dev/writing/the-power-and-fun-of-scope-with-css-custom-properties/">this article</a> about the power and fun of variable scope.</p>
<p>One of the neatest things you can do with CSS variables and animation is using them for composition. By that, we mean using them to define the speeds and delays of animations. That makes it easier to manage things like timelines. In fact, Carl Schoof did a fun animation challenge series on this. Here was my 3b solution.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="dyYbxda"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/dyYbxda">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Here's a roundup of how this is working (Skip to the 6-minute mark).</p>
<div class="post__embed-container">
      <iframe loading="lazy" class="post__embed" src="https://www.youtube.com/embed/J8DpbqSR-r8" allow="encrypted-media; picture-in-picture"></iframe>
    </div>
<h2>The New @property</h2>
<p>What does the new <code>@property</code> give us then? Let's start by saying it's still making its way into browsers. Currently, Chrome and Edge have good support. You can check out <a href="https://caniuse.com/mdn-css_at-rules_property">browser compatibility here</a>.</p>
<p>This new feature allows us to define types for your custom properties. Types like <code>angle</code>, <code>number</code>, <code>percentage</code>, etc.</p>
<p>This &quot;type checking&quot; gives the browser extra contextual information. It can use this to transition and animate custom property values. That's the magic right there.</p>
<p>This means we can animate things that once we could not.</p>
<ul>
<li>Color stops in a <code>linear-gradient</code></li>
<li>Angle of a <code>conic-gradient</code></li>
<li>Hue of a HSL color</li>
<li>Individual transform values</li>
<li>Whatever else your imagination can think of!</li>
</ul>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="YzpKKoN"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/YzpKKoN">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>How do we register a custom property? It's as straight forward as</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --spinAngle</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;angle>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<ul>
<li><code>inherits</code> - Whether the property inherits the value from its parent</li>
<li><code>initial-value</code> - Fallback/initial value</li>
<li><code>syntax</code> - Property type. Check out <a href="https://web.dev/at-property/#syntax">other types here</a>.</li>
</ul>
<h2>Examples</h2>
<p>Let's walk through some examples.</p>
<h3>Waves</h3>
<p>Let's start with some waves. For this example, we don't even need any elements. We're going to animate a <code>linear-gradient</code> on the <code>body</code>.</p>
<p>Let's start by defining our custom property <code>--wave</code>.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --wave</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;percentage>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Then we'll create a <code>linear-gradient</code> that makes waves using <code>calc</code> and our <code>wave</code> property.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>transparent 0 <span class="token function">calc</span><span class="token punctuation">(</span>35% + <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span> * 0.5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--wave-four<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>75% + <span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span><span class="token punctuation">)</span> 100%<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">            <span class="token function">linear-gradient</span><span class="token punctuation">(</span>transparent 0 <span class="token function">calc</span><span class="token punctuation">(</span>35% + <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span> * 0.5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--wave-three<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% + <span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>75% + <span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">            <span class="token function">linear-gradient</span><span class="token punctuation">(</span>transparent 0 <span class="token function">calc</span><span class="token punctuation">(</span>20% + <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span> * 0.5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--wave-two<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>35% + <span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% + <span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">            <span class="token function">linear-gradient</span><span class="token punctuation">(</span>transparent 0 <span class="token function">calc</span><span class="token punctuation">(</span>15% + <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span> * 0.5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--wave-one<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>25% + <span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>35% + <span class="token function">var</span><span class="token punctuation">(</span>--wave<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--sand<span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<aside class="post__aside post__aside--note">
      <svg viewBox="0 0 24 24">
        <path fill="var(--color)" d="M17,4V10L15,8L13,10V4H9V20H19V4H17M3,7V5H5V4C5,2.89 5.9,2 7,2H19C20.05,2 21,2.95 21,4V20C21,21.05 20.05,22 19,22H7C5.95,22 5,21.05 5,20V19H3V17H5V13H3V11H5V7H3M5,5V7H7V5H5M5,19H7V17H5V19M5,13H7V11H5V13Z" />
      </svg>
      <p><p>That might look a little confusing. We&#39;re layering up background images to create many waves. We then use <code>calc</code> to calculate the color stops for each individual gradient.</p>
</p>
    </aside>
<p>Here are the static waves.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="GRNKqWy"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/GRNKqWy">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>To bring them to life. Animate that value.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">body</span> <span class="token punctuation">{</span></span>
<span class="highlight-line"> <span class="token property">animation</span><span class="token punctuation">:</span> waves 5s infinite ease-in-out<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> waves</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--wave</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And we have animated waves</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="YzpKKoN"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/YzpKKoN">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>Party Button</h3>
<p>Playing with HSL is a lot of fun. But creating a good animation that loops through the hue wheel is a little tricky. It's doable with preprocessors. I've done things like this in the past</p>
<pre class="language-stylus"><code class="language-stylus"><span class="highlight-line"><span class="token atrule-declaration"><span class="token atrule">@keyframes</span> party</span></span>
<span class="highlight-line">  <span class="token statement"><span class="token keyword">for</span> $frame <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..</span><span class="token number">100</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">    <span class="token selector"><span class="token interpolation variable"><span class="token delimiter punctuation">{</span>$frame <span class="token operator">*</span> <span class="token number">1</span><span class="token unit">%</span><span class="token delimiter punctuation">}</span></span></span></span>
<span class="highlight-line">      <span class="token property-declaration"><span class="token property">background</span> <span class="token string">'hsl(%s, 65%, 40%)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>$frame <span class="token operator">*</span> <span class="token number">3.6</span><span class="token punctuation">)</span></span></span></code></pre>
<p>But, with @property, we can animate the hue itself! Hover the button in this pen.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="OJRLMxE"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/OJRLMxE">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The border color will animate through the hue spectrum. And it's as easy as this</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --hue</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;integer>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> true<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">button</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--border</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--hue<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">,</span> 0%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--border<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">button:hover</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--border</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--hue<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> hueJump 0.75s infinite linear<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> hueJump</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--hue</span><span class="token punctuation">:</span> 360<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span></code></pre>
<h3>Travelling Car</h3>
<p>This last one's interesting. We want to make a little car go around the track. And we're going to use <code>transform</code>. This is already possible if we use wrapper elements. But, with <code>@property</code>, we won't have to. We can animate separate properties on the same keyframes.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="vYyBKeW"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/vYyBKeW">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>To position the car, we've created three properties.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --x</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;number>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --y</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;number>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@property</span> --r</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">initial-value</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">'&lt;angle>'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The <code>--x</code> and <code>--y</code> properties will dictate the x and y position of the car. Whilst, <code>--r</code> will dictate the rotation. We're using <code>number</code> because we want to keep the scene responsive and I know the road is a <code>50vmin</code> square.</p>
<p>The transform for the car looks like this:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--x<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--y<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>To animate the car, we'll create one set of keyframes called &quot;journey&quot;. And let's start by animating the <code>--x</code> property.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> journey</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%, 100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">25%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">75%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That's going to give us the correct x-coordinate animation.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="zYoOBWq"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/zYoOBWq">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Let's add the <code>--y</code> property updates to the keyframes.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> journey</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%, 100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">25%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">75%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And now the car moves in a diamond shape. Not quite right.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="mdObELx"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/mdObELx">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>To combat that, we need to make sure we have the correct <code>--x</code> and <code>--y</code> at the corners. We could do that with some extra steps in the keyframes.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> journey</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%, 100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">12.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">25%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">37.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">62.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">75%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">87.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And that gives us the car in the right position!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="BaQBzVG"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/BaQBzVG">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Last up, the rotation. For this, we can update the <code>--r</code> property where we want by adding in extra steps for our keyframes. Here, we've gone with a 5% window around the corners.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> journey</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">10%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">12.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">15%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 90deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">25%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">35%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 90deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">37.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">40%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 180deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">60%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 180deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">62.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">65%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 270deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">75%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">85%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 270deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">87.5%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">90%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 360deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--x</span><span class="token punctuation">:</span> -22.5<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--y</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">--r</span><span class="token punctuation">:</span> 360deg<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And that's it! The little car image will make it's journey around the square. No wrapper elements required. We don't even need to write out extra transforms.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOVNqjv"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOVNqjv">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>That's it!</h2>
<p>Check out the demos in this <a href="https://codepen.io/collection/AazyEP">collection</a>. There are exciting times ahead with CSS Houdini. I'm excited about it. I'm also excited to see what you'll make!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="OJRLMxE"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/OJRLMxE">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>CSS Aspect Ratio</title>
    <link href="https://jhey.dev/writing/css-aspect-ratio/"/>
    <updated>2021-01-25T00:00:00+00:00</updated>
    <id>https://jhey.dev/writing/css-aspect-ratio/</id>
    <content type="html"><![CDATA[
      <p>Aspect ratio is an interesting problem. How do you tackle it with CSS? Especially if you don't know the dimensions you're dealing with. CSS has a new property on the way to deal with this. We'll give this a <em>very</em> quick look. And then, let's take a look at other ways you can handle this that currently have better browser support.</p>
<h2><code>aspect-ratio</code></h2>
<p>CSS has a new property on the way. It's for <em>prescribing</em> aspect ratio to an element 🙌</p>
<p>And it's as straightforward as</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.element</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">aspect-ratio</span><span class="token punctuation">:</span> 16 / 9<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>It's important to note that this property prescribes an aspect ratio. Our elements won't respect it if we define both a height and width for an element.</p>
<p>The <a href="https://caniuse.com/mdn-css_properties_aspect-ratio">support isn't quite there yet</a> though.</p>
<p>Here's a <a href="https://codepen.io/jh3y/pen/OJRYmGr">demo</a> to play with. It <em>should</em> work in Chrome 88+.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="OJRYmGr"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/OJRYmGr">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>And here's a screencast.</p>
<div class="post__embed-container">
      <iframe loading="lazy" class="post__embed" src="https://egghead.io/lessons/css-use-css-aspect-ratio-to-prescribe-an-aspect-ratio-for-an-element/embed?af=8ajh64" allow="encrypted-media; picture-in-picture"></iframe>
    </div>
<h2>The <code>padding</code> Trick</h2>
<p>If you don't know the dimensions of your content but your content has a constrained width, you can use this. The trick is to wrap your content in a container and pad that container out using <code>padding-bottom</code>. You then absolutely position your element into that container.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.wrap</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 56.25%</span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.element</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">object-fit</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The trick here is to work out the correct padding for your desired aspect ratio.</p>
<p>If the ratio was <code>16:9</code>, the padding required is 56.25%. We can work this out with</p>
<pre><code>aspect ratio height / aspect ratio width
</code></pre>
<p>For example, <code>9 / 16 = 56.25</code>.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="abmgRZe"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/abmgRZe">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This works because of the absolute positioning. We are letting the browser determine what height the container should be.</p>
<h2>Use CSS Variables</h2>
<p>The last way works if you know one of the dimensions for your element. We can use CSS variables and <code>calc</code> to make CSS work out the element size for us. This is the gist of it.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token property">--aspect-ratio</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>16 / 9<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token property">--width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token property">--height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--aspect-ratio<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>You could swap that around so the width is being calculated. Or, you might use the aspect-ratio variable scoped when you need it.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.element</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 160px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>160px * <span class="token function">var</span><span class="token punctuation">(</span>--aspect-ratio<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This way has a lot of possibilities. And it's down to your design how you'd go about using this approach.</p>
<p>Have a play with this <a href="https://codepen.io/MWjMzwW">demo</a></p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="MWjMzwW"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/MWjMzwW">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>And here's a walkthrough using it.</p>
<div class="post__embed-container">
      <iframe loading="lazy" class="post__embed" src="https://egghead.io/lessons/css-use-css-variables-to-maintain-the-aspect-ratio-for-an-element/embed?af=8ajh64" allow="encrypted-media; picture-in-picture"></iframe>
    </div>
<hr>
<h2>That's it!</h2>
<p>That's a look at different ways to handle aspect ratio with CSS. The new way looks like it's going to be a great addition and will save us some styles.</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Get the Picture - Responsive Image Sizing &amp;&amp; Formatting</title>
    <link href="https://jhey.dev/writing/get-the-picture-responsive-image-sizing-formatting/"/>
    <updated>2021-01-21T13:15:15+00:00</updated>
    <id>https://jhey.dev/writing/get-the-picture-responsive-image-sizing-formatting/</id>
    <content type="html"><![CDATA[
      <p>How do you display an image in the browser?</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>awesome.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span></code></pre>
<p>If it's decorative, you use CSS?</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.decorative</span> <span class="token punctuation">{</span> <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>awesome.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span></code></pre>
<p>Both are valid solutions. But.</p>
<ul>
<li>What do you do when you want to make your images responsive?</li>
<li>What about different screen resolutions?</li>
<li>What if you want to display modern formats to the user?</li>
<li>What's the <code>picture</code> element?</li>
</ul>
<p>These are things I wish someone had told me in a concise way earlier in my career. Things that we're often abstracted away from depending on the tools we use. This is one of the more complicated HTML elements to deal with.</p>
<p>Let's dig in!</p>
<h2>The TL;DR</h2>
<p>Use the <code>&lt;picture&gt;</code> element to wrap your images and provide modern image formats to your users. You can also use it for &quot;Art Direction&quot;. Although, it's not uncommon to CSS properties leveraged for this now.</p>
<p>Why? Speed up page load times and reduce bandwidth. This provides a better experience for your users. Modern image formats can reduce file size whilst retaining image quality.</p>
<p>Check out this demo across different browsers at different viewport sizes 👍</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="WNGWgoZ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/WNGWgoZ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>And here's what the code might look like 🤓</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span>
<span class="highlight-line">    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/avif<span class="token punctuation">"</span></span></span>
    <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lion.avif 400w,
            lion--large.avif 800w<span class="token punctuation">"</span></span>
    <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-width: 800px) 800px,
           400px<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span>
<span class="highlight-line">    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span></span>
    <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lion.webp 400w,
            lion--large.webp 800w<span class="token punctuation">"</span></span>
    <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-width: 800px) 800px,
           400px<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span>
<span class="highlight-line">    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/png<span class="token punctuation">"</span></span></span>
    <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lion.png 400w,
            lion--large.png 800w<span class="token punctuation">"</span></span>
    <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-width: 800px) 800px,
           400px<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lion.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span></span></code></pre>
<aside class="post__aside post__aside--note">
      <svg viewBox="0 0 24 24">
        <path fill="var(--color)" d="M17,4V10L15,8L13,10V4H9V20H19V4H17M3,7V5H5V4C5,2.89 5.9,2 7,2H19C20.05,2 21,2.95 21,4V20C21,21.05 20.05,22 19,22H7C5.95,22 5,21.05 5,20V19H3V17H5V13H3V11H5V7H3M5,5V7H7V5H5M5,19H7V17H5V19M5,13H7V11H5V13Z" />
      </svg>
      <p><p>Browsers adopt different approaches for loading responsive images. You can see this by loading up the demos in this article and resizing the viewport, refreshing, disabling the cache etc. For example, Chrome will always try to load the largest image from cache. Other browsers will respond to viewport resizing and you can see the image changes in realtime. Cache first is a fine approach as you can&#39;t resize a mobile device 😅 But, it&#39;s an interesting observation for those that like to play with viewport resizing. We see you!</p>
</p>
    </aside>
<h2>Why?</h2>
<p>It comes down to two things.</p>
<ol>
<li>Reducing download sizes for your users</li>
<li>Making things look good across the board</li>
</ol>
<h3>Reducing Download Size</h3>
<p>This might not seem <em>important</em>. But consider users that are viewing your site on a mobile device or smaller viewport. Or even those who don't have a great internet connection. A reduced download size results in a quicker rendering time. That means content getting delivered to your audience quicker.</p>
<p>We have different ways to combat this.</p>
<ol>
<li>Provide smaller sized images to the browser.</li>
<li>Provide images with modern formats that are smaller in file size but also keep quality.</li>
</ol>
<p>The only issue here is that newer formats such as <code>avif</code> and <code>webp</code> aren't supported by all browsers. This means falling back to supported formats that might have a larger file size. But, if we're able to tell the browser to grab a smaller sized image when we're on a mobile device, that's going to help.</p>
<h3>Making Things Look Good Across the Board</h3>
<p>When your users are on a smaller device, delivering desktop-sized images may not be ideal. This is where the term &quot;Art Direction&quot; comes in. You might show a high detail image on the desktop. But when you're users are viewing on mobile, they can't squint to see the important details. That's where serving a smaller cropped image could make sense.</p>
<p>And we can do this with the <code>picture</code> element or via the <code>srcset</code> attribute.</p>
<figure class="post__figure">
      <img src="/assets/images/lion-mocks.png" alt="Possible phone mocks comparison"/>
      <figcaption>Possible phone mockup comparison</figcaption>
    </figure>
<aside class="post__aside post__aside--note">
      <svg viewBox="0 0 24 24">
        <path fill="var(--color)" d="M17,4V10L15,8L13,10V4H9V20H19V4H17M3,7V5H5V4C5,2.89 5.9,2 7,2H19C20.05,2 21,2.95 21,4V20C21,21.05 20.05,22 19,22H7C5.95,22 5,21.05 5,20V19H3V17H5V13H3V11H5V7H3M5,5V7H7V5H5M5,19H7V17H5V19M5,13H7V11H5V13Z" />
      </svg>
      <p><p>It&#39;s not uncommon to see &quot;Art Direction&quot; handled to an extent with CSS these days. Properties like <code>object-fit</code> make this kinda possible. But, we wouldn&#39;t be taking advantage of the fact you can serve up a smaller file to your users.</p>
</p>
    </aside>
<hr>
<h2>How?</h2>
<p>We know what we want to do. But how do we go about doing it?</p>
<h3><code>srcset</code> Attribute</h3>
<p>The <code>srcset</code> attribute gives us a way to define a set of images for the browser to choose from.</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat.png 300w,
             cat--large.png 600w<span class="token punctuation">"</span></span>
     <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>awesome.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre>
<p>We provide a comma-separated list with the format <code>&lt;URL&gt; &lt;SIZE&gt;w</code>. The <code>w</code> refers to the image's intrinsic width. Use the <code>src</code> attribute as a fallback for browsers that don't support <code>srcset</code>.</p>
<p>The browser will load whichever image it deems appropriate and for the most part, it will get it right. This relies on your assets having appropriate sizing 👍</p>
<p>Try resizing this <a href="https://codepen.io/jh3y/pen/RwGOMPE">demo</a> to see it for yourself! (<em>IMO, the behavior for Firefox is most intuitive</em>).</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="RwGOMPE"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/RwGOMPE">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<aside class="post__aside post__aside--note">
      <svg viewBox="0 0 24 24">
        <path fill="var(--color)" d="M17,4V10L15,8L13,10V4H9V20H19V4H17M3,7V5H5V4C5,2.89 5.9,2 7,2H19C20.05,2 21,2.95 21,4V20C21,21.05 20.05,22 19,22H7C5.95,22 5,21.05 5,20V19H3V17H5V13H3V11H5V7H3M5,5V7H7V5H5M5,19H7V17H5V19M5,13H7V11H5V13Z" />
      </svg>
      <p><p>Note how the image stays the same size in the demo. That&#39;s because we&#39;re using CSS to constrain its size. And that&#39;s an important thing to note. It&#39;s not uncommon that we size our images with CSS and then forget about it. More on this below.</p>
</p>
    </aside>
<h2>Resolution</h2>
<p>You can also use the <code>srcset</code> attribute to define the image that should be should at different screen resolutions. This is often referred to as DPR(Device Pixel Ratio). You can even simulate this in DevTools.</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat.png,
             cat--high-res.png 2x<span class="token punctuation">"</span></span>
     <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre>
<p>Try it out with this <a href="https://cdpn.io/jh3y/debug/WNGWyRP">demo</a>.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="WNGWyRP"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/WNGWyRP">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>It comes in useful when you want to serve high-res images for retina screens for example. This was something that was more of an issue with icon sets. But, these days, most are using SVG which scale well on their own.</p>
<h2><code>sizes</code> Attribute</h2>
<p>The <code>sizes</code> attribute provides the browser a more informed choice about which image to display.</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat.png 400w,
             cat--large.png 800w<span class="token punctuation">"</span></span>
     <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-width: 800px) 800px,
            400px<span class="token punctuation">"</span></span>
     <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre>
<p>Again, a comma-separated list, the browser will choose the size based on a media-condition. It will choose the first size that has a matching media condition. And then the browsers chooses the appropriate image from the <code>srcset</code> using that size. This would mean showing <code>cat.png</code> at viewports smaller than <code>800px</code> in this example. You can use any sizing unit to define a side aside from percentage.</p>
<p>Try resizing your browser window with this demo.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="LYRvmxP"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/LYRvmxP">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>The <code>picture</code> element</h2>
<p>If you only need to provide different sizes for an image, we can finish up there. But, the magic comes when we bring the <code>picture</code> element in. This allows us to define &quot;Art Direction&quot; or provide modern image formats to our users if we have them.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span>
<span class="highlight-line">    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/avif<span class="token punctuation">"</span></span></span>
    <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lion.avif 400w,
            lion--large.avif 800w<span class="token punctuation">"</span></span>
    <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-width: 800px) 800px,
           400px<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span>
<span class="highlight-line">    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/webp<span class="token punctuation">"</span></span></span>
    <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lion.webp 400w,
            lion--large.webp 800w<span class="token punctuation">"</span></span>
    <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-width: 800px) 800px,
           400px<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span>
<span class="highlight-line">    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/png<span class="token punctuation">"</span></span></span>
    <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lion.png 400w,
            lion--large.png 800w<span class="token punctuation">"</span></span>
    <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-width: 800px) 800px,
           400px<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lion.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span></span></code></pre>
<aside class="post__aside post__aside--note">
      <svg viewBox="0 0 24 24">
        <path fill="var(--color)" d="M17,4V10L15,8L13,10V4H9V20H19V4H17M3,7V5H5V4C5,2.89 5.9,2 7,2H19C20.05,2 21,2.95 21,4V20C21,21.05 20.05,22 19,22H7C5.95,22 5,21.05 5,20V19H3V17H5V13H3V11H5V7H3M5,5V7H7V5H5M5,19H7V17H5V19M5,13H7V11H5V13Z" />
      </svg>
      <p><p>There are plenty of image converters out there. You could even use a Node package to generate the images for you. I use <a href="https://www.11ty.dev/docs/plugins/image/">eleventy-img</a> for <a href="https://jhey.dev">jhey.dev</a>.</p>
</p>
    </aside>
<p>What's happening here then? What we have here is like a super-powered <code>srcset</code>. We've wrapped our <code>img</code> in a <code>picture</code> tag to start. But, we've also introduced the <code>source</code> element.</p>
<h3><code>source</code> Element</h3>
<p>Imagine picture is like a big <code>srcset</code>. We work our way down the source elements to find the first one whose conditions pass. The <code>srcset</code> and <code>sizes</code> attribute of that source element are then used to display our image.</p>
<p>You may have noticed the <code>type</code> attribute. And that does exactly what you'd expect. It defines the image type for that source. And this is how the fallback works. In our example, if there is <code>avif</code> support, we use the <code>avif</code> source. Else, we check for <code>webp</code> support and so on. If there is no support for any source, we fallback to the <code>img</code>.</p>
<figure class="post__figure">
      <img src="/assets/images/chrome-avif-hover.png" alt="Hovering element to see current source"/>
      <figcaption>Hovering element in DevTools to see current source</figcaption>
    </figure>
<p>You can check which source is being used by checking the <code>Network</code> tab in your DevTools. That will show you which format and size gets downloaded.</p>
<figure class="post__figure">
      <img src="/assets/images/avif-network-panel.png" alt="Inspecting Network panel for image type"/>
      <figcaption>Inspecting Network panel for image type</figcaption>
    </figure>
<p>The source tag does support one other attribute which is <code>media</code>. As you can guess, this attribute is another condition that source <em>could</em> meet. But, if you use <code>media</code>. Don't use media conditions in your sizes too!</p>
<hr>
<h2>That's it!</h2>
<p>That's the info you need to get started with responsive images and dynamic formats. It's important to know about. &quot;Art Direction&quot; is important in some situations. But, knowing these things becomes vital when you start looking into site performance. Being able to get content to your users quicker by not consuming bandwidth is excellent UX.</p>
<p>To put it in numbers, I've seen some image file sizes reduce to a third of the size by using modern formats.</p>
<p>Have a play with the demo and I hope this helps you out! You can visibly see the image quality change if you resize it in Firefox.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="WNGWgoZ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/WNGWgoZ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>CSS Cyberpunk 2077 Buttons - Taking your CSS to Night City</title>
    <link href="https://jhey.dev/writing/css-cyberpunk-2077-buttons-taking-your-css-to-night-city/"/>
    <updated>2020-12-16T17:55:37+00:00</updated>
    <id>https://jhey.dev/writing/css-cyberpunk-2077-buttons-taking-your-css-to-night-city/</id>
    <content type="html"><![CDATA[
      <p>If you're in the slightest interested in video games, you're no doubt aware of Cyberpunk 2077. It's one of the most anticipated games of 2020. The world it paints has a certain style to it. The game's website does a brilliant job of portraying that aesthetic. Its design does a great job of communicating the look and feel. As you can imagine that means for some rather slick looking UI components.</p>
<p>Someone first reached out to me asking how I would create an image effect used on the site. If you hover images in the image galleries, they have this neat &quot;noise&quot; effect.</p>
<figure class="post__figure">
      <img src="https://paper-attachments.dropbox.com/s_79694710E747B132338AE17BCD270CA87F7E232DA522C6038DE5C208A1D5DE4C_1607711515207_glitch-image.gif" alt="Glitchy gallery effect"/>
      <figcaption>Glitchy gallery effect</figcaption>
    </figure>
<p>I accepted the challenge. I dug in to take a look at the site's source. After some digging, I discovered it was being implemented with shaders and WebGL. I'm completely new to writing shaders and WebGL. This did spur me to give it a try. But, for now, I've put learning WebGL and shader code on the backburner.</p>
<p>What did catch our eyes as I proceeded to look around the site on my live stream, was the neat glitchy effect buttons. I'm no stranger to creating glitchy effects with CSS. We decided I'd attempt to recreate them.</p>
<figure class="post__figure">
      <img src="https://paper-attachments.dropbox.com/s_79694710E747B132338AE17BCD270CA87F7E232DA522C6038DE5C208A1D5DE4C_1607711419571_original.gif" alt="Desired button glitch"/>
      <figcaption>The desired button glitch</figcaption>
    </figure>
<p>And here's how you can do it!</p>
<hr>
<p>Let’s start with some Markup</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cybr-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  Beginning_</span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span></code></pre>
<p>The thing we need to get sorted first is sizing, color, and font. The best way to get this right? Dive into the source and see how it's done. From the first inspection, we see that a custom font is being used.</p>
<p>Let's grab the font &quot;Blender Pro Bold&quot; font and create a custom <code>@font-face</code> rule.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">font-family</span><span class="token punctuation">:</span> Cyber<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://assets.codepen.io/605876/Blender-Pro-Bold.otf"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">font-display</span><span class="token punctuation">:</span> swap<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Once we have that, we can put the basic styling in place. Using CSS variables for things like color and font size gives us opportunities later. This is also the reason for using the HSL color space. We'll show why later.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token property">--primary</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--primary-hue<span class="token punctuation">)</span><span class="token punctuation">,</span> 85%<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--primary-lightness<span class="token punctuation">,</span> 50<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token property">--shadow-primary</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--shadow-primary-hue<span class="token punctuation">)</span><span class="token punctuation">,</span> 90%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token property">--primary-hue</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token property">--primary-lightness</span><span class="token punctuation">:</span> 50<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token property">--color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0%<span class="token punctuation">,</span> 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token property">--font-size</span><span class="token punctuation">:</span> 26px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token property">--shadow-primary-hue</span><span class="token punctuation">:</span> 180<span class="token punctuation">;</span></span></code></pre>
<p>Putting that together gives us this starting point. Notice how we use an inset box-shadow instead of a border for that blue line? That's because a border would knock our text off-center. The inset box-shadow won't affect text-alignment.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="zYKZXoM"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/zYKZXoM">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<hr>
<p>A noticeable feature of the button is that clipped corner. My first thought here is to use a clip-path. But, to my surprise, the shape of the buttons on the site is being achieved with a background-image.</p>
<p>We can clip the corner using a <code>clip-path</code>.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>-10% -10%<span class="token punctuation">,</span> 110% -10%<span class="token punctuation">,</span> 110% 110%<span class="token punctuation">,</span> 10% 110%<span class="token punctuation">,</span> -10% 40%<span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>Note how we're not clipping to the edges of the button. We're giving the button 10% of breathing room. That's because we need to account for the &quot;R25&quot; tag and the fact that the glitchy effect flows outside of the button. That's a neat trick with <code>clip-path</code>. We can use it as a controlled <code>overflow: hidden</code>. We're saying, &quot;Yeah, you can overflow a little. But only this much&quot;.</p>
<p>Adding that to our button gives us the clipped effect we desire.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOMBRya"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOMBRya">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<hr>
<p>Next, let's create that &quot;R25&quot; tag. We could reach for a pseudo-element here and use the content property. In fact, this is how it's done on the site. There's something to be mindful of with this approach though. The fact that a screen reader might read it out. The same goes for the actual button text. Each button on the site has text succeeded by an underscore. Would we want that read out by a screen reader? If yes, then we can leave it as is. Let's assume they are for decorative purposes. We can update our markup and use <code>aria-hidden</code> so that a screen reader only reads the button's text.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cybr-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  Clipped<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token punctuation">></span></span>_<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cybr-btn__tag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>R25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span></code></pre>
<p>To style the tag, we can give it <code>absolute</code> positioning. This requires us to set <code>relative</code> positioning on the button. Like the button itself, the tag uses an <code>inset box-shadow</code>.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.cybr-btn</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--label-size</span><span class="token punctuation">:</span> 9px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--shadow-secondary-hue</span><span class="token punctuation">:</span> 60<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--shadow-secondary</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--shadow-secondary-hue<span class="token punctuation">)</span><span class="token punctuation">,</span> 90%<span class="token punctuation">,</span> 60%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cybr-btn__tag</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 1px 4px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">line-height</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">bottom</span><span class="token punctuation">:</span> -5%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">right</span><span class="token punctuation">:</span> 5%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shadow-secondary<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0%<span class="token punctuation">,</span> 0%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--label-size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 2px 0 inset <span class="token function">var</span><span class="token punctuation">(</span>--shadow-primary<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We’ve introduced some more CSS variables here. Although they are being used by the tag, we've put them under the button selector. There's a reason for this. We may decide to leverage the power of scoped variables later. If we do, we only need to set the variables on the button selector. If we left the variables under the tag rule, variables set on the button wouldn't have power over the lower scope. We set a <code>background-color</code> for the tag. But, it soon becomes apparent that this isn’t being done on the site.</p>
<p>With our tag in place, the button is now taking shape.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="zYKZXNy"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/zYKZXNy">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<hr>
<p>It's time for the glitch effect. From experience, my assumption here was that the button was being duplicated. The duplicated button would have some form of clipping animation applied. Our first task here would be to create the glitch body. Remember we discovered the use of a background-image earlier? It soon became clear why that was being used. It’s used to provides a cutout for the tag. That means the <code>background-color</code> behind the button is the same for the tag. The corner cut out is also created with the image.</p>
<p><img src="https://paper-attachments.dropbox.com/s_79694710E747B132338AE17BCD270CA87F7E232DA522C6038DE5C208A1D5DE4C_1607711190760_Screenshot+2020-12-11+at+18.26.21.png" alt="Our Button outline"></p>
<p>Notice how the blue border follows the corner and goes around the &quot;R25&quot;? Using a clip-path as we have cuts that corner off and doesn’t outline the “R25”. The site's implementation uses a <code>drop-shadow</code>.</p>
<p>Using a background image will allow us to recreate the effect. It comes with some compromises though if we want to make our buttons flexible and reusable.</p>
<p>For example, what if we want to change the color of the button? Do we have to create many images for each button color variant? What if we change the aspect ratio of the button? The image won't fit anymore.</p>
<p>The glitchy animation is quick. It's quick enough that it's unlikely the clipped corner would be noticeable. That trade-off is worth it for a more flexible and reusable set of styles.</p>
<p>Let's proceed with that solution. We can add a new element for the glitch. This needs the same text as our button and also needs hiding from the screen reader with aria-hidden.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cybr-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  Glitch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token punctuation">></span></span>_<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cybr-btn__glitch<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Glitch_<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cybr-btn__tag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>R25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span></code></pre>
<p>We need to duplicate the text here and we have options. The site uses a pseudo-element for duplicating the text. If we do this though, it means animating two elements at once for the effect. By moving the text into the glitch element, we only need to animate one element.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.cybr-btn__glitch</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 0 4px <span class="token function">var</span><span class="token punctuation">(</span>--shadow-primary<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">text-shadow</span><span class="token punctuation">:</span> 2px 2px <span class="token function">var</span><span class="token punctuation">(</span>--shadow-primary<span class="token punctuation">)</span><span class="token punctuation">,</span> -2px -2px <span class="token function">var</span><span class="token punctuation">(</span>--shadow-secondary<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Applying some styles such as <code>text-shadow</code> and a <code>box-shadow</code> get us here.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="wvzJZJd"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/wvzJZJd">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>But, we’re not satisfied with that corner clipping. Also, how we’re using the <code>clip-path</code> to give breathing room feels brittle. We could get it back with a little trick. If we use pseudo-elements to color the button, we won't have to clip the entire button! We could use absolute positioning and then clip only the pseudo-elements. We also won’t need to provide breathing room. The bonus here as well is that we already have the button colors in variables.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.cybr-btn</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span> 100% 0<span class="token punctuation">,</span> 100% 100%<span class="token punctuation">,</span> 8% 100%<span class="token punctuation">,</span> 0 70%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cybr-btn:before</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--primary<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We can remove the <code>clip-path</code> from the button and put that clip into a variable that we can reuse. We need to apply <code>z-index: -1</code> to the pseudo-elements so that the text still shows.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.cybr-btn</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--border</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.cybr-btn__glitch</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--border<span class="token punctuation">)</span> * -1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--border<span class="token punctuation">)</span> * -1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--border<span class="token punctuation">)</span> * -1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--border<span class="token punctuation">)</span> * -1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shadow-primary<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">text-shadow</span><span class="token punctuation">:</span> 2px 2px <span class="token function">var</span><span class="token punctuation">(</span>--shadow-primary<span class="token punctuation">)</span><span class="token punctuation">,</span> -2px -2px <span class="token function">var</span><span class="token punctuation">(</span>--shadow-secondary<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.cybr-btn__glitch:before</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--border<span class="token punctuation">)</span> * 1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--border<span class="token punctuation">)</span> * 1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--border<span class="token punctuation">)</span> * 1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--border<span class="token punctuation">)</span> * 1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--primary<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We can then reuse the clip for the glitch element’s pseudo element. The trick to getting the glitch element correct is to position it absolutely as if it is the border. Then overlay the pseudo element on top of it. Applying the same clip to both elements will give us the neat blue border that follows the corner.</p>
<p>That gives us:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="abmJxJM"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/abmJxJM">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>How nifty is that? We can even adjust the clip-path to get that cut out around the &quot;R25&quot;. If we adjust the <code>clip-path</code> and remove the tag styles:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.cybr-btn</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span> 100% 0<span class="token punctuation">,</span> 100% 100%<span class="token punctuation">,</span> 95% 100%<span class="token punctuation">,</span> 95% 90%<span class="token punctuation">,</span> 85% 90%<span class="token punctuation">,</span> 85% 100%<span class="token punctuation">,</span> 8% 100%<span class="token punctuation">,</span> 0 70%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.cybr-btn__tag</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 1px 4px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">line-height</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">bottom</span><span class="token punctuation">:</span> -5%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">right</span><span class="token punctuation">:</span> 5%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0%<span class="token punctuation">,</span> 0%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--label-size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We get something like this:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="abmJxJM"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/abmJxJM">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>And this is where we have the opportunity to do something else cool. When I investigated the button and discovered the background-image, I pulled it down. And what I found was that the border was possible by stacking two images and translating the bottom one. Now, we are using a <code>clip-path</code>, we can do the same.</p>
<p><img src="https://paper-attachments.dropbox.com/s_79694710E747B132338AE17BCD270CA87F7E232DA522C6038DE5C208A1D5DE4C_1607711092398_Screenshot+2020-12-11+at+18.24.41.png" alt="The two outlines for our button"></p>
<p>If we use the <code>:before</code> pseudo-element for our button's blue color and the <code>:after</code> for the red. Then we translate the <code>:before</code> pseudo-element by the border size, it will give us the border. It gives us the border without applying a <code>border</code>.</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.cybr-btn:after,
.cybr-btn:before</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.cybr-btn:before</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shadow-primary<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--border<span class="token punctuation">)</span><span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.cybr-btn:after</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--primary<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now we have the shadow for the tag and the button. And the tag will use the background-color behind it. Try changing the <code>background-color</code> for the <code>body</code> and you’ll see!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="wvzJZdd"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/wvzJZdd">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<hr>
<p>Almost there! Hang in. We have the glitch. We've got everything we need. All that's left is to animate it on <code>:hover</code>.</p>
<p>How is that glitch effect happening? The trick is to only show the glitch element on <code>:hover</code> and by default have an animation applied to it. My assumption here was the use of <code>transform</code> and <code>clip-path</code> in a set of keyframes. And I was right! How did I find out. Inspect the button and use Chrome's &quot;force state&quot; to set the button to the <code>:hover</code> state.</p>
<p><img src="https://paper-attachments.dropbox.com/s_79694710E747B132338AE17BCD270CA87F7E232DA522C6038DE5C208A1D5DE4C_1607710964587_Screenshot+2020-12-11+at+17.09.09.png" alt=""></p>
<p>Then, inspect the styles and find the animation. Click the filename and that will take you to the source.</p>
<p><img src="https://paper-attachments.dropbox.com/s_79694710E747B132338AE17BCD270CA87F7E232DA522C6038DE5C208A1D5DE4C_1607710896176_Screenshot+2020-12-11+at+17.10.16.png" alt="Using &quot;Force State&quot; in DevTools"></p>
<p>That allowed me to see the keyframes that were being used.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> glitch-anim-1</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token selector">0%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 2%<span class="token punctuation">,</span>100% 2%<span class="token punctuation">,</span>100% 5%<span class="token punctuation">,</span>0 5%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 2%<span class="token punctuation">,</span>100% 2%<span class="token punctuation">,</span>100% 5%<span class="token punctuation">,</span>0 5%<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">2%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 78%<span class="token punctuation">,</span>100% 78%<span class="token punctuation">,</span>100% 100%<span class="token punctuation">,</span>0 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 78%<span class="token punctuation">,</span>100% 78%<span class="token punctuation">,</span>100% 100%<span class="token punctuation">,</span>0 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-5px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-5px<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">6%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 78%<span class="token punctuation">,</span>100% 78%<span class="token punctuation">,</span>100% 100%<span class="token punctuation">,</span>0 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 78%<span class="token punctuation">,</span>100% 78%<span class="token punctuation">,</span>100% 100%<span class="token punctuation">,</span>0 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>5px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>5px<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">8%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 78%<span class="token punctuation">,</span>100% 78%<span class="token punctuation">,</span>100% 100%<span class="token punctuation">,</span>0 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 78%<span class="token punctuation">,</span>100% 78%<span class="token punctuation">,</span>100% 100%<span class="token punctuation">,</span>0 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-5px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-5px<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">9%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 78%<span class="token punctuation">,</span>100% 78%<span class="token punctuation">,</span>100% 100%<span class="token punctuation">,</span>0 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 78%<span class="token punctuation">,</span>100% 78%<span class="token punctuation">,</span>100% 100%<span class="token punctuation">,</span>0 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">10%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 54%<span class="token punctuation">,</span>100% 54%<span class="token punctuation">,</span>100% 44%<span class="token punctuation">,</span>0 44%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 54%<span class="token punctuation">,</span>100% 54%<span class="token punctuation">,</span>100% 44%<span class="token punctuation">,</span>0 44%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">13%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 54%<span class="token punctuation">,</span>100% 54%<span class="token punctuation">,</span>100% 44%<span class="token punctuation">,</span>0 44%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 54%<span class="token punctuation">,</span>100% 54%<span class="token punctuation">,</span>100% 44%<span class="token punctuation">,</span>0 44%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">13.1%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">15%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 60%<span class="token punctuation">,</span>100% 60%<span class="token punctuation">,</span>100% 40%<span class="token punctuation">,</span>0 40%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 60%<span class="token punctuation">,</span>100% 60%<span class="token punctuation">,</span>100% 40%<span class="token punctuation">,</span>0 40%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">20%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 60%<span class="token punctuation">,</span>100% 60%<span class="token punctuation">,</span>100% 40%<span class="token punctuation">,</span>0 40%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 60%<span class="token punctuation">,</span>100% 60%<span class="token punctuation">,</span>100% 40%<span class="token punctuation">,</span>0 40%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">20.1%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">25%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 85%<span class="token punctuation">,</span>100% 85%<span class="token punctuation">,</span>100% 40%<span class="token punctuation">,</span>0 40%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 85%<span class="token punctuation">,</span>100% 85%<span class="token punctuation">,</span>100% 40%<span class="token punctuation">,</span>0 40%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">30%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 85%<span class="token punctuation">,</span>100% 85%<span class="token punctuation">,</span>100% 40%<span class="token punctuation">,</span>0 40%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 85%<span class="token punctuation">,</span>100% 85%<span class="token punctuation">,</span>100% 40%<span class="token punctuation">,</span>0 40%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>-5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">30.1%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">35%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 63%<span class="token punctuation">,</span>100% 63%<span class="token punctuation">,</span>100% 80%<span class="token punctuation">,</span>0 80%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 63%<span class="token punctuation">,</span>100% 63%<span class="token punctuation">,</span>100% 80%<span class="token punctuation">,</span>0 80%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-5px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-5px<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">40%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 63%<span class="token punctuation">,</span>100% 63%<span class="token punctuation">,</span>100% 80%<span class="token punctuation">,</span>0 80%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 63%<span class="token punctuation">,</span>100% 63%<span class="token punctuation">,</span>100% 80%<span class="token punctuation">,</span>0 80%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>5px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>5px<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">45%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 63%<span class="token punctuation">,</span>100% 63%<span class="token punctuation">,</span>100% 80%<span class="token punctuation">,</span>0 80%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 63%<span class="token punctuation">,</span>100% 63%<span class="token punctuation">,</span>100% 80%<span class="token punctuation">,</span>0 80%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-5px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-5px<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 63%<span class="token punctuation">,</span>100% 63%<span class="token punctuation">,</span>100% 80%<span class="token punctuation">,</span>0 80%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 63%<span class="token punctuation">,</span>100% 63%<span class="token punctuation">,</span>100% 80%<span class="token punctuation">,</span>0 80%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">55%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 10%<span class="token punctuation">,</span>100% 10%<span class="token punctuation">,</span>100% 0<span class="token punctuation">,</span>0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 10%<span class="token punctuation">,</span>100% 10%<span class="token punctuation">,</span>100% 0<span class="token punctuation">,</span>0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>5px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">60%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 10%<span class="token punctuation">,</span>100% 10%<span class="token punctuation">,</span>100% 0<span class="token punctuation">,</span>0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 10%<span class="token punctuation">,</span>100% 10%<span class="token punctuation">,</span>100% 0<span class="token punctuation">,</span>0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">opacity</span><span class="token punctuation">:</span> 1</span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">60.1%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">opacity</span><span class="token punctuation">:</span> 1</span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">,</span>0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">        <span class="token property">opacity</span><span class="token punctuation">:</span> 1</span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>For our animation, we can follow the same structure. But in our example, we can apply different versions of our <code>clip-path</code>.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.cybr-btn</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--shimmy-distance</span><span class="token punctuation">:</span> 5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--clip-one</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 2%<span class="token punctuation">,</span> 100% 2%<span class="token punctuation">,</span> 100% 95%<span class="token punctuation">,</span> 95% 95%<span class="token punctuation">,</span> 95% 90%<span class="token punctuation">,</span> 85% 90%<span class="token punctuation">,</span> 85% 95%<span class="token punctuation">,</span> 8% 95%<span class="token punctuation">,</span> 0 70%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--clip-two</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 78%<span class="token punctuation">,</span> 100% 78%<span class="token punctuation">,</span> 100% 100%<span class="token punctuation">,</span> 95% 100%<span class="token punctuation">,</span> 95% 90%<span class="token punctuation">,</span> 85% 90%<span class="token punctuation">,</span> 85% 100%<span class="token punctuation">,</span> 8% 100%<span class="token punctuation">,</span> 0 78%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--clip-three</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 44%<span class="token punctuation">,</span> 100% 44%<span class="token punctuation">,</span> 100% 54%<span class="token punctuation">,</span> 95% 54%<span class="token punctuation">,</span> 95% 54%<span class="token punctuation">,</span> 85% 54%<span class="token punctuation">,</span> 85% 54%<span class="token punctuation">,</span> 8% 54%<span class="token punctuation">,</span> 0 54%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--clip-four</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span> 100% 0<span class="token punctuation">,</span> 100% 0<span class="token punctuation">,</span> 95% 0<span class="token punctuation">,</span> 95% 0<span class="token punctuation">,</span> 85% 0<span class="token punctuation">,</span> 85% 0<span class="token punctuation">,</span> 8% 0<span class="token punctuation">,</span> 0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--clip-five</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span> 100% 0<span class="token punctuation">,</span> 100% 0<span class="token punctuation">,</span> 95% 0<span class="token punctuation">,</span> 95% 0<span class="token punctuation">,</span> 85% 0<span class="token punctuation">,</span> 85% 0<span class="token punctuation">,</span> 8% 0<span class="token punctuation">,</span> 0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--clip-six</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 40%<span class="token punctuation">,</span> 100% 40%<span class="token punctuation">,</span> 100% 85%<span class="token punctuation">,</span> 95% 85%<span class="token punctuation">,</span> 95% 85%<span class="token punctuation">,</span> 85% 85%<span class="token punctuation">,</span> 85% 85%<span class="token punctuation">,</span> 8% 85%<span class="token punctuation">,</span> 0 70%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--clip-seven</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 63%<span class="token punctuation">,</span> 100% 63%<span class="token punctuation">,</span> 100% 80%<span class="token punctuation">,</span> 95% 80%<span class="token punctuation">,</span> 95% 80%<span class="token punctuation">,</span> 85% 80%<span class="token punctuation">,</span> 85% 80%<span class="token punctuation">,</span> 8% 80%<span class="token punctuation">,</span> 0 70%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> glitch</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip-one<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">2%, 8%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip-two<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--shimmy-distance<span class="token punctuation">)</span> * -1%<span class="token punctuation">)</span><span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">6%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip-two<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--shimmy-distance<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">9%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip-two<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">10%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip-three<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--shimmy-distance<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">13%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip-three<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">14%, 21%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip-four<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--shimmy-distance<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">25%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip-five<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--shimmy-distance<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">30%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip-five<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--shimmy-distance<span class="token punctuation">)</span> * -1%<span class="token punctuation">)</span><span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">35%, 45%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip-six<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--shimmy-distance<span class="token punctuation">)</span> * -1%<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">40%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip-six<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--shimmy-distance<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip-six<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">55%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip-seven<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--shimmy-distance<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">60%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip-seven<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">31%, 61%, 100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip-four<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This is the trickiest part to comprehend. What is actually happening here? Our keyframes animate a clip path on the glitch element. At the same time, we shimmy the element from side to side. We can slow down the animation to see what's happening.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOMBRmY"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOMBRmY">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>And I've also put together a demo that shows the different states of the clip.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="oNzZOwv"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/oNzZOwv">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This would make it much easier for us to maintain and tweak the different animation states.</p>
<hr>
<p>All that's left to do is tie this up to the :hover selector. By default, we hide the glitch element. Then on hover, we show it animating.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.cybr-btn__glitch</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cybr-btn:hover .cybr-btn__glitch</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And that gives us the result we were looking for.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOMBRwY"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOMBRwY">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<hr>
<h2>That’s it!</h2>
<p>That’s how you recreate the Cyberpunk 2077 buttons with only CSS!</p>
<p>Remember, how we used variables for the colors, there was a reason for that. Combining HSL with the variables, we can not only add color variants easily. But, we can also add an :active color change too.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="PoGbxLp"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/PoGbxLp">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Playfulness In Code: Supercharge Your Learning by Having Fun</title>
    <link href="https://jhey.dev/writing/playfulness-in-code/"/>
    <updated>2020-11-25T18:58:43+00:00</updated>
    <id>https://jhey.dev/writing/playfulness-in-code/</id>
    <content type="html"><![CDATA[
      <p>I’m often asked where the ideas come from. How do I know the things I do? Having ten years of experience in development helps, but what supercharged my learning was pushing myself to build the things that came into my head, however unusual.</p>
<p>I developed an appetite for building things that aren’t ‘the norm.’ With that mindset, every idea becomes an opportunity to try something new.</p>
<p>One of my main mantras is to make learning fun. It’s something people have come to know me by. <a href="https://codepen.io/jh3y/pen/VwjgdLj">Tuggable SVG light bulbs with GreenSock</a>, <a href="https://vincent-van-git.netlify.app/">Vincent van Git</a>, <a href="https://codepen.io/jh3y/pen/LYNZwGm">Useless machines with React</a>… plenty more besides. You can read the docs, you can follow the tutorials, but wouldn’t you be more motivated by trying to make something unique, something no one else has seen before?</p>
<p>Here’s how having fun can supercharge your learning. Throw a record on, pick a mood, and let’s get to it.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="NWRKMQm"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/NWRKMQm">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Wanting to Learn</h2>
<p>There is a big caveat to everything I’m about to say: if you’re not motivated to learn, you won’t learn. Even if you know it’s something you need to learn. The need is optional, but the want is not. Odds are that if you don’t want to do something, you’re not going to do it. After all, most of you reading this are likely out of school now. You’re not obligated to prepare for that exam or get that grade. You have your own free will.</p>
<p>In most cases, learning is driven by some goal or target. An extreme example would be the goal of paying your bills. “I must learn X for my job, to keep my job and pay my bills”. This article isn’t about those scenarios. It’s about the times when it’s not necessary. (You can only rebuild your portfolio so many times, after all.)</p>
<p>I have to go back quite a bit to think about how I turned out to be writing this article. I wasn’t always an extracurricular learner or even a creative coder. I actually started out as a middleware developer. I finished my degrees, got my job, and I was happy doing the eight-hour day and leaving it there. It wasn’t until towards the end of my first role that I met the “front-end” and started dabbling in it.</p>
<p>The first thing I remember making was a basic Trello clone. It was an opportunity to try out HTML5 “Drag and Drop” and the <code>contenteditable</code> attribute. It was very basic, and you could create tasks and move them about. I put it in a jsfiddle or jsbin and shared it. Some colleagues thought it was cool, and that was that. Unfortunately, I’ve lost that demo now, but here’s a quick recreation from memory.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="dypbOww"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/dypbOww">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Fast forward a little and CSS animation and 3D transforms were on my radar. In fact, 3D CSS and animation were some of the first things I spent time playing with. One thing I started with was creating a collection of loading spinners. If I had a few moments, I’d mess about with different properties and see what I could make while adding them to a file all the time. Later, <a href="https://github.com/jh3y/whirl">I’d turn it all into a GitHub project</a>.</p>
<p>A pattern was emerging of me wanting to make things. And when an opportunity to try something came along, I’d pair that with an idea and see what happened. Further adjustments to that Trello clone got valuable feedback when I posted it on Hacker News. That spurred me to create new versions of it. I haven’t touched it for a few years, but it <a href="https://jh3y.github.io/tyto">still lives over on Github</a>.</p>
<p>A few side projects and some time after that came to a winking bear demo, which I posted on CodePen. CodePen was new to me at this point.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOMNyOB"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOMNyOB">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The next day, I was on a client site and someone said, “I saw your pen on the front page of CodePen! Nice!”. I said “Thanks!”, but I had no idea what that meant until I went and checked. And there was the winking bear! This was a catalyst for my “playfulness” with code, where the pattern flipped. I went from “I want to learn X, so how do I fit it into Y” to “I want to make Y, can I learn X to do it?”.</p>
<p>That’s what motivates me and <strong>makes learning fun</strong>. It could work for you, too! Instead of the thought of learning X being the driving force, it’s the thought of making Y. The fact you’re learning new skills is a bonus. As my skills have developed, the ability to make my demos more and more “playful” is noticeable. But it all began from making things for the sake of making things and learning something. “How would you do that?” and not “How can you learn that?”. As your skills develop, you too can become more playful with your code. And the two will complement each other.</p>
<h2>Playful Coding</h2>
<p>Where do all the ideas come from? Well, it’s a good question. We can’t force creativity, but there are things I can suggest that might help convince it to appear.</p>
<h3>Document Everything</h3>
<p>Get a notebook, start a Trello board, open a Notion account. Find a way to take notes of your ideas. <strong>No idea is a bad idea. Repeat. No idea is a bad idea.</strong> I write down every little spark that comes into my head. That’s why I’d suggest a digital solution you can install on your phone. You never know when you’ll have an idea, and it will be annoying the next day when you can’t remember it. Trust me, I’ve been there.</p>
<p>Here are five random things from my “List” that all trigger something for me:</p>
<ul>
<li>Red and white toadstools;</li>
<li>Impossible checkbox spin-off;</li>
<li>Peter Griffin blinds in CSS;</li>
<li>Power-up screen bear glare huge parallax from the game documentary;</li>
<li>Bread Array slice/splice cartoon.</li>
</ul>
<p>Some of that might make sense. Some of it might not. The important thing is to write down keywords that trigger thoughts of something I want to make. I can tell you the first idea is a Procreate drawing, and the fourth is from a show I watched on Netflix. There was a part in the show where a character’s face almost parallaxes on the screen. I thought it would make an amusing Twitch overlay if I can make it. On the list they go.</p>
<p>Another solution I’ve recently adopted and would also suggest, keep notebooks dotted about. One by the side of the bed is great! It means you don’t need to get out of bed to write down that idea you just had. Your note-taking needn’t be limited to ideas either. Document your processes and other things as you go. You’ll find that scribbling things down can often spark new ideas.</p>
<h3>Sparking ideas</h3>
<p>That leads to “Where?”. Where can you grab an idea from? The answer here is very cliché: anywhere! The more I speak about it with people, the more it feels like an instinct you refine. <strong>Plucking ideas out of nothing is something you train your mind to do over time.</strong></p>
<p>To kickstart things, here’s a list of places you can go to start:</p>
<h4>CodePen</h4>
<p>CodePen is a great resource. Have a browse, see what people are making. Could you make something similar? Someone created an Elephant with CSS, can you create a Giraffe? CodePen does a weekly prompt via email challenging you to make something. There will be a theme or certain criteria and you can follow the tags to see what people are making. And then there’s <a href="https://codepen.io/spark/">the Spark</a>, CodePen’s newsletter which will usually be full of cool things. There are loads of great demos on the site, people giving feedback. It’s an inspiring place.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="NWRKdxd"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/NWRKdxd">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h4>Media (TV, Books, Film)</h4>
<p>You can get a lot of ideas from the media. Seen a cool TV advert? Can you recreate part of it? How about the opening credits of a film? Lots of things pop up that can spark a little creativity. Books are another great resource — fiction and nonfiction. I created this HSL slider after reading <em><a href="https://refactoringui.com/book/">Refactoring UI</a></em>:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="zYKONBJ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/zYKONBJ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>And this is from the closing credits of the Netflix series, “Love, Death, and Robots”:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="rNMBjqo"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/rNMBjqo">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h4>Newsletters</h4>
<p>Sign up for newsletters that interest you. You don’t have to read them all the time, but they’re there for you. I’ve already mentioned the CodePen one. <a href="https://tympanus.net/codrops/">Codrops</a> is another great one for seeing a variety of demos. They also do an “Awesome Demos Roundup”. <a href="https://css-tricks.com/newsletters/">CSS Tricks</a> is another with great reads and resources. Or, of course, <a href="https://www.smashingmagazine.com/the-smashing-newsletter/">the <em>Smashing</em> newsletter</a>.</p>
<p>This demo below was created due to a challenge set in the <a href="https://viewbox.club/">ViewBox</a> newsletter. And the idea was itself inspired by the film <em>Men in Black</em> which I’d happened to watch twice that week.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="eYdOgdr"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/eYdOgdr">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h4>Muzli</h4>
<p>I love this one. <a href="https://muz.li/">Muzli</a> is a browser extension that fills your “New Tab” screen with design inspiration. Have a browse through this when opening a new tab and you’re bound to find some ideas. They also do a roundup for various things <a href="https://medium.muz.li/">over on Medium</a>. I’ve often picked up ideas from looking through these. Such as this demo inspired by <a href="https://medium.muz.li/weekly-design-inspiration-230-6647c65c4edf">this roundup</a>. RamBear was a recreation of this <a href="https://dribbble.com/shots/7780062-VFX-2D-Weapon-Fire-Tutorial-Game-Design-and-Animation">Dribbble shot</a> from “Gigantic” with a bear spin on it.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ZEpzLBx"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ZEpzLBx">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h4>News &amp; Seasonal</h4>
<p>Current news and seasonal events are sure to get ideas firing. How about spooky demos for Halloween? I made this bear having an X-Ray because of a CodePen challenge set for Halloween.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ZEpzLLo"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ZEpzLLo">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Or remember when everything was cake? Yeah? I thought about making a 3D cake that you could interact with and it kinda went from there. My back catalog is full of demos that relate to current events.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="WNGeRpO"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/WNGeRpO">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h4>Dribbble</h4>
<p><a href="https://dribbble.com/">Dribble</a> is a great site for checking out other people’s creative work, and it could spark some ideas of your own. It’s not unusual to see people recreating things they’ve seen on Dribbble. That said, if you do recreation, please credit the original work. It’s not “inspiration” if you take the original, recreate it, and take the credit. You take the opportunity from others to discover work from the original author.</p>
<h4>Reddit</h4>
<p>I’m not a big Reddit user myself. But, you can sometimes find interesting animations and things in various sub-Reddits. <a href="https://www.reddit.com/r/oddlysatisfying/">/r/oddlysatisfying</a> has had the occasional animation that I’ve recreated. This <a href="https://www.reddit.com/r/oddlysatisfying/comments/65ym9r/these_cubes/">cubes animation</a> was something I wanted to recreate. At the same time, I wanted to try GreenSock. So I paired the two and it was the first time I used GreenSock. Honestly, try searching for “oddlysatisfying cubes”.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="LYRPxWo"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/LYRPxWo">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Years later, I’ve revisited this to build it in a different way. That allowed me to put a spin on it.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="JjRPEwP"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/JjRPEwP">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h4>Twitter</h4>
<p>If you have a Twitter account, follow people who interest and inspire. They could be in a completely different field, but their work may well spark ideas for you. There are some fantastic accounts out there. One account that springs to mind is <a href="https://twitter.com/beesandbombs">@beesandbombs</a>. They upload real cool animations that often have optical illusions within them. I’ve often thought “I’ll make that,” and then proceeded to try some way of making it whether it be CSS, HTML5 Canvas, and so on. It’s a great way to train to work on the finer details.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1344448685262970892?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h4>Anywhere Else</h4>
<p>I could keep listing sources of inspiration, but it can be different for everyone. These are the ones that work for me. But consider anything. Things you see on your travels, conversations, or things around the house.</p>
<h3>Turning Ideas into Demos &amp;&amp; Projects</h3>
<p>You’ve got your ideas. But, there’s no rush to make them. You don’t have to make everything you note down. In fact, odds are you’ll never have time to make everything. That’s something you have to deal with. It’s something I struggled with the better I got at documenting my ideas.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="xxEKgrB"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/xxEKgrB">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>If you browse <a href="https://codepen.io/jh3y/pens/public">my CodePen history</a> it’s like a timeline for what I’ve been learning and exploring, driven by ideas and inspiration. The thought of making something, not learning something. I don’t usually have time to look back at old demos but this article has prompted that. It’s interesting to look back and remember what drove what.</p>
<p>For example, I wanted to create Masonry layouts, so I learned the technique for it using flex. I wanted to create star fields, so I learned HTML5 Canvas rendering techniques. In fact, I remember learning the latter in the mornings over breakfast.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="yLaBgoK"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/yLaBgoK">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This lava lamp was prompted by a CodePen challenge. I’d seen a bit about SVG filters but not had anything I wanted to try them out on. I wanted to make a lava lamp with CSS and it was a perfect opportunity.</p>
<p>Make for the sake of making. Don’t overthink it. Be driven by the idea because you will learn things. You’ll probably learn a lot more things than you ever expected. It can and will <strong>strengthen your ability to rise to a challenge</strong> or switch context at the drop of a hat. These are skills that can really empower your career as a developer.</p>
<p>Document your ideas and when you want to make them, go for it! If your first focus is the “How” or the “Why”, that idea might stick around on your list for some time.</p>
<h3>Don’t Dwell On The ‘Why’ And ‘How’</h3>
<p>I make a lot of ‘whimsical’ things and I am often asked, “Why?”, “Is there any practical use for this?”, and so on. Don’t dwell on that side of things. You’re making something because you want to. Making something unconventional can be more fun than following “Build a TODO app 101”. There’s a time and a place for the 101s, but I want you to enjoy learning. Gain an appetite for creating wonderful things that none of us have ever seen.</p>
<p><strong>Work on the ideas that spark joy for you</strong>. Don’t let the “How?” distract you. Focus on the “What?”. The goal is to get the idea, then find a way to make it. If it means learning something new — great. If you can do it with something already in your toolbelt — awesome. Let the ideas guide you. The variety of your projects can often challenge you to use tools you already know in different ways. You can pick up new techniques from tackling problems others might not have even seen. It gives you an ability to think “Outside of the box”.</p>
<p>Let’s also address the idea that these things aren’t ‘useful’. I don’t believe this is ever the case. A major example for me is CSS art. “Why do this with CSS? Use an image like SVG”. Don’t buy into that. By drawing something with CSS, you <strong>level up your skills</strong> by creating interesting shapes, learning the stacking index, and so much more. The cool thing with CSS art, in particular, is that every creation tends to yield a different problem. Yes, you won’t be dropping that 1000 lines of CSS into a production site anytime soon and you’ll use an image. But, did the image teach you how to use <code>clip-path</code> or be a wizard with <code>border-radius</code>?</p>
<p>For example, a demo of mine is “The impossible checkbox”. It’s a toggle that when you toggle on, a bear turns off. The more you turn it on, the angrier the bear gets. If I had focused on the “How?” then that demo may never have come to life. Instead, I sketched out what I thought might look like. And then decided I was going to use React and GreenSock together with SVG.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="bGwbgoW"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/bGwbgoW">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Don’t let the idea of “How?” deter you from the “What?”. Also, never question the “Why?” Make cool things and you will learn from them, no doubt.</p>
<h3>Make, Make, Make</h3>
<p>Start writing down your ideas and making things for the sake of making things. That’s my advice if you want to level up and add some playfulness to your code.</p>
<p>What you learn will find its way back into your work. As a recent example, I put together <a href="https://gumroad.com/l/move-things-with-css">an eBook on CSS animations</a>. I could’ve created every demo with a red square, but that’s not very engaging. Instead, the book has animated bunnies, racecars and UFOs to help the knowledge stick. Instead of trying to remember what the red square was doing and how. It’s “Remember we made the bunnies all jump at different times using animation-delay”.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="rNMBjGZ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/rNMBjGZ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This is the major point. <strong>Being playful with your code and what might seem like “lateral” learning can be a huge driving factor in evolving your skills.</strong> It might not be noticeable at once, but every time you make some new whimsical thing, you’re leveling up!</p>
<p>Grab a notebook, download a note-taking app (Notion, Trello, Keep), and start documenting your ideas. Training yourself to write down ideas. However big, however small, write them down. Create ideas from things that interest you. Hoard inspiration. Sign up for newsletters. They don’t have to be tech-related. Give <a href="https://muz.li/">muz.li</a> a try. Read a book, watch a film. Bookmark <a href="https://dribbble.com/">Dribbble</a>, perhaps.</p>
<p>And when the moment strikes, start making! Struggle with the “How”? Try different methods, check out how others do things, reach out to people online. Every step teaches you something new. Besides, isn’t fun worth having for its own sake anyway?</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>CSS in 3D: Learning to think in Cubes Instead of Boxes</title>
    <link href="https://jhey.dev/writing/css-in-3d-learning-to-think-in-cubes-instead-of-boxes/"/>
    <updated>2020-10-23T16:56:41+01:00</updated>
    <id>https://jhey.dev/writing/css-in-3d-learning-to-think-in-cubes-instead-of-boxes/</id>
    <content type="html"><![CDATA[
      <p>My path to learning CSS was a little unorthodox. I didn’t start as a front-end developer. I was a Java developer. In fact, my earliest recollections of CSS were picking colors for things in Visual Studio.</p>
<p>It wasn’t until later that I got to tackle and find my love for the front end. And exploring CSS came later. When it did, it was around the time CSS3 was taking off. 3D and animation were the cool kids on the block. They almost shaped my learning of CSS. They drew me in and shaped (pun intended) my understanding of CSS more than other things, like layout, color, etc.</p>
<p>What I’m getting at is I’ve been doing the whole 3D CSS thing a minute. And as with anything you spend a lot of time with, you end up refining your process over the years as you hone that skill. This article is a look at how I’m currently approaching 3D CSS and goes over some tips and tricks that might help you!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="mLaXRe"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/mLaXRe">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Everything’s a cuboid</h2>
<p>For most things, we can use a cuboid. We can create more complex shapes, for sure but they usually take a little more consideration. Curves are particularly hard and there are some tricks for handling them (but more on that later).</p>
<p>We aren’t going to walk through how to make a cuboid in CSS. We can reference <a href="https://css-tricks.com/simplifying-css-cubes-custom-properties/">Ana Tudor’s post</a> for that, or check out this screencast of me making one:</p>
<div class="post__embed-container">
      <iframe loading="lazy" class="post__embed" src="https://next.egghead.io/lessons/css-use-css-transforms-to-create-configurable-3d-cuboids/embed?af=8ajh64" allow="encrypted-media; picture-in-picture"></iframe>
    </div>
<p>At its core, we use one element to wrap our cuboid and then transform six elements within. Each element acts as a side to our cuboid. It’s important that we apply <code>transform-style: preserve-3d</code>. And it’s not a bad idea to apply it everywhere. It’s likely we’ll deal with nested cuboids when things get more complex. Trying to debug a missing <code>transform-style</code> while hopping between browsers can be painful.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">*</span> <span class="token punctuation">{</span> <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span> <span class="token punctuation">}</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="QWELPQg"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/QWELPQg">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>For your 3D creations that are more than a few faces, try and imagine the whole scene built from cuboids. For a real example, consider this demo of a 3D book. It’s four cuboids. One for each cover, one for the spine, and one for the pages. The use of <code>background-image</code> does the rest for us.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ZEOzNbm"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ZEOzNbm">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Setting a scene</h2>
<p>We’re going to use cuboids like LEGO pieces. But, we can make our lives a little easier by setting a scene and creating a plane. That plane is where our creation will sit and makes it easier for us to rotate and move the whole creation.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="pobzmNx"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/pobzmNx">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>For me, when I create a scene, I like to rotate it on the X and Y axis first. Then I lay it flat with <code>rotateX(90deg)</code>. That way, when I want to add a new cuboid to the scene, I add it inside the plane element. Another thing I will do here is to set <code>position: absolute</code> on all cuboids.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.plane</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--rotate-x<span class="token punctuation">,</span> -24<span class="token punctuation">)</span> * 1deg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--rotate-y<span class="token punctuation">,</span> -24<span class="token punctuation">)</span> * 1deg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Start with a boilerplate</h2>
<p>Creating cuboids of various sizes and across a plane makes for a lot of repetition for each creation. For this reason, I use Pug to create my cuboids via a mixin. If you’re not familiar with Pug, I wrote a <a href="https://dev.to/jh3y/pug-in-5-minutes-272k">5-minute intro</a>.</p>
<p>A typical scene looks like this:</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token comment">//- Front</span></span>
<span class="highlight-line"><span class="token comment">//- Back</span></span>
<span class="highlight-line"><span class="token comment">//- Right</span></span>
<span class="highlight-line"><span class="token comment">//- Left</span></span>
<span class="highlight-line"><span class="token comment">//- Top</span></span>
<span class="highlight-line"><span class="token comment">//- Bottom</span></span>
<span class="highlight-line"><span class="token mixin"><span class="token keyword">mixin</span> <span class="token function">cuboid</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.cuboid</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">class</span><span class="token punctuation">=</span><span class="token attr-value">className</span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">    <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token number">0</span></span></span>
<span class="highlight-line">    <span class="token flow-control"><span class="token branch keyword">while</span> s <span class="token operator">&lt;</span> <span class="token number">6</span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token attr-class">.cuboid__side</span></span></span>
<span class="highlight-line">      <span class="token punctuation">-</span><span class="token code"> s<span class="token operator">++</span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token attr-class">.scene</span></span></span>
<span class="highlight-line">  <span class="token comment">//- Plane that all the 3D stuff sits on</span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.plane</span></span></span>
<span class="highlight-line">    <span class="token mixin"><span class="token name function">+cuboid</span><span class="token punctuation">(</span><span class="token string">'first-cuboid'</span><span class="token punctuation">)</span></span></span></code></pre>
<p>As for the CSS. My cuboid class is currently looking like this:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.cuboid</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  // Defaults</span>
<span class="highlight-line">  <span class="token property">--width</span><span class="token punctuation">:</span> 15<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--height</span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--depth</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 5vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid > div:nth-of-type(1)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--height<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform-origin</span><span class="token punctuation">:</span> 50% 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid > div:nth-of-type(2)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--height<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform-origin</span><span class="token punctuation">:</span> 50% 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid > div:nth-of-type(3)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--height<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid > div:nth-of-type(4)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--height<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid > div:nth-of-type(5)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--height<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.cuboid > div:nth-of-type(6)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--depth<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--width<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span> <span class="token function">translate3d</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--height<span class="token punctuation">)</span> / 2<span class="token punctuation">)</span> * -1vmin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Which, by default, gives me something like this:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="abZorVz"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/abZorVz">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Powered by CSS variables</h2>
<p>You may have noticed a fair few CSS variables (aka custom properties) in there. This is a big time-saver. I’m powering my cuboids with CSS variables.</p>
<ul>
<li><code>--width</code>: The width of a cuboid on the plane</li>
<li><code>--height</code>: The height of a cuboid on the plane</li>
<li><code>--depth</code>: The depth of a cuboid on the plane</li>
<li><code>--x</code>: The X position on the plane</li>
<li><code>--y</code>: The Y position on the plane</li>
</ul>
<p>I use <code>vmin</code> mostly as my sizing unit to keep everything responsive. If I’m creating something to scale, I might create a responsive unit. We mentioned this technique in a <a href="https://css-tricks.com/advice-for-complex-css-illustrations/">previous article</a>. Again, I lay the plane down flat. Now I can refer to my cuboids as having height, width, and depth. This demo shows how we can move a cuboid around the plane changing its dimensions.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="BaKqQLJ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/BaKqQLJ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Debugging with dat.GUI</h2>
<p>You might have noticed that little panel in the top right for some of the demos we’ve covered. That’s <a href="https://github.com/dataarts/dat.gui">dat.GUI</a>. It’s a lightweight controller library for JavaScript that super useful for debugging 3D CSS. With not much code, we can set up a panel that allows us to change CSS variables at runtime. One thing I like to do is use the panel to rotate the plane on the X and Y-axis. That way, it’s possible to see how things are lining up or work on a part that you might not see at first.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  dat<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token constant">GUI</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span> <span class="token operator">=</span> window</span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">CONTROLLER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">CONFIG</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token string">'cuboid-height'</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token string">'cuboid-width'</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token string">'cuboid-depth'</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  x<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  y<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  z<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token string">'rotate-cuboid-x'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token string">'rotate-cuboid-y'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token string">'rotate-cuboid-z'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">UPDATE</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token constant">CONFIG</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> value<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">CUBOID_FOLDER</span> <span class="token operator">=</span> <span class="token constant">CONTROLLER</span><span class="token punctuation">.</span><span class="token function">addFolder</span><span class="token punctuation">(</span><span class="token string">'Cuboid'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">CUBOID_FOLDER</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">CONFIG</span><span class="token punctuation">,</span> <span class="token string">'cuboid-height'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">'Height (vmin)'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token constant">UPDATE</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">CUBOID_FOLDER</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">CONFIG</span><span class="token punctuation">,</span> <span class="token string">'cuboid-width'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">'Width (vmin)'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token constant">UPDATE</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">CUBOID_FOLDER</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">CONFIG</span><span class="token punctuation">,</span> <span class="token string">'cuboid-depth'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">'Depth (vmin)'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token constant">UPDATE</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token comment">// You have a choice at this point. Use x||y on the plane</span></span>
<span class="highlight-line"><span class="token comment">// Or, use standard transform with vmin.</span></span>
<span class="highlight-line"><span class="token constant">CUBOID_FOLDER</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">CONFIG</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">'X (vmin)'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token constant">UPDATE</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">CUBOID_FOLDER</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">CONFIG</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">'Y (vmin)'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token constant">UPDATE</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">CUBOID_FOLDER</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">CONFIG</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">'Z (vmin)'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token constant">UPDATE</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">CUBOID_FOLDER</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">CONFIG</span><span class="token punctuation">,</span> <span class="token string">'rotate-cuboid-x'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">'Rotate X (deg)'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token constant">UPDATE</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">CUBOID_FOLDER</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">CONFIG</span><span class="token punctuation">,</span> <span class="token string">'rotate-cuboid-y'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">'Rotate Y (deg)'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token constant">UPDATE</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">CUBOID_FOLDER</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">CONFIG</span><span class="token punctuation">,</span> <span class="token string">'rotate-cuboid-z'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">'Rotate Z (deg)'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token constant">UPDATE</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">UPDATE</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<p>If you watch the timelapse video in this tweet. You’ll notice that I rotate the plane a lot as I build up the scene.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1312126353177673732?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>That <code>dat.GUI</code> code is a little repetitive. We can create functions that will take a configuration and generate the controller. It takes a little tinkering to cater to your needs. I started playing with dynamically generated controllers in <a href="https://codepen.io/jh3y/pen/GRJoWyp">this demo</a>.</p>
<h2>Centering</h2>
<p>You may have noticed that by default each cuboid is half under and half above the plane. That’s intentional. It’s also something I only recently started to do. Why? Because we want to use the containing element of our cuboids as the center of the cuboid. This makes animation easier. Especially, if we’re considering rotating around the Z-axis. I found this out when creating “CSS is Cake”. After making the cake, I then decided I wanted each slice to be interactive. I then had to go back and change my implementation to fix the rotation center of the flipping slice.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="KKVGoGJ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/KKVGoGJ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Here I’ve broken that demo down to show the centers and how having an offset center would affect the demo.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="XWKrLwe"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/XWKrLwe">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Positioning</h2>
<p>If we are working with a scene that’s more complex, we may split it up into different sections. This is where the concept of sub-planes comes in handy. Consider this demo where I’ve recreated my personal workspace.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1310658720746045440?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>There’s quite a bit going on here and it’s hard to keep track of all the cuboids. For that, we can introduce sub-planes. Let’s break down that demo. The chair has its own sub-plane. This makes it easier to move it around the scene and rotate it — among other things — without affecting anything else. In fact, we can even spin the top without moving the feet!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="QWELerg"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/QWELerg">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Aesthetics</h2>
<p>Once we’ve got a structure, it’s time to work on the aesthetics. This all depends on what you’re making. But you can get some quick wins from using certain techniques. I tend to start by making things “ugly” then go back and make CSS variables for all the colors and apply them. Three shades for a certain thing allows us to differentiate the sides of a cuboid visually. Consider this toaster example. Three shades cover the sides of the toaster:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="KKVjLrx"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/KKVjLrx">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Our Pug mixin from earlier allows us to define class names for a cuboid. Applying color to a side usually looks something like this:</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line">/* The front face uses a linear<span class="token punctuation">-</span>gradient to apply the shimmer effect */</span>
<span class="highlight-line"><span class="token tag"><span class="token attr-class">.toaster__body</span></span> <span class="token plain-text">> div:nth-of-type(1) {</span></span>
<span class="highlight-line">  <span class="token tag">background<span class="token punctuation">:</span></span> <span class="token tag">linear-gradient<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">120deg</span><span class="token punctuation">,</span> transparent 10%<span class="token punctuation">,</span> var<span class="token punctuation">(</span><span class="token attr-name">--shine</span><span class="token punctuation">)</span></span></span> <span class="token tag">10</span>% 20%, transparent 20% 25%, var(<span class="token punctuation">--</span>shine) 25% 30%, transparent 30%), var(<span class="token punctuation">--</span>shade<span class="token punctuation">-</span>one);</span>
<span class="highlight-line">}</span>
<span class="highlight-line"><span class="token tag"><span class="token attr-class">.toaster__body</span></span> <span class="token plain-text">> div:nth-of-type(2) {</span></span>
<span class="highlight-line">  <span class="token tag">background<span class="token punctuation">:</span></span> <span class="token tag">var<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">--shade-one</span><span class="token punctuation">)</span></span></span>;</span>
<span class="highlight-line">}</span>
<span class="highlight-line"><span class="token tag"><span class="token attr-class">.toaster__body</span></span> <span class="token plain-text">> div:nth-of-type(3),</span></span>
<span class="highlight-line"><span class="token tag"><span class="token attr-class">.toaster__body</span></span> <span class="token plain-text">> div:nth-of-type(4) {</span></span>
<span class="highlight-line">  <span class="token tag">background<span class="token punctuation">:</span></span> <span class="token tag">var<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">--shade-three</span><span class="token punctuation">)</span></span></span>;</span>
<span class="highlight-line">}</span>
<span class="highlight-line"><span class="token tag"><span class="token attr-class">.toaster__body</span></span> <span class="token plain-text">> div:nth-of-type(5),</span></span>
<span class="highlight-line"><span class="token tag"><span class="token attr-class">.toaster__body</span></span> <span class="token plain-text">> div:nth-of-type(6) {</span></span>
<span class="highlight-line">  <span class="token tag">background<span class="token punctuation">:</span></span> <span class="token tag">var<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">--shade-two</span><span class="token punctuation">)</span></span></span>;</span>
<span class="highlight-line">}</span></code></pre>
<p>It’s a little tricky to include extra elements with our Pug mixin. But let’s not forget, every side to our cuboid offers two pseudo-elements. We can use these for various details. For example, the toaster slot and the slot for the handle on the side are pseudo-elements.</p>
<p>Another trick is to use <code>background-image</code> for adding details. For example, consider the 3D workspace. We can use background layers to create shading. We can use actual images to create textured surfaces. The flooring and the rug are a repeating <code>background-image</code>. In fact, using a pseudo-element for textures is great because then we can transform them if needed, like rotating a tiled image. I’ve also found that I get flickering in some cases working directly with a cuboid side.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="XWdQBRx"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/XWdQBRx">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>One issue with using an image for texture is how we create different shades. We need shades to differentiate the different sides. That’s where the <code>filter</code> property can help. Applying a <code>brightness()</code> filter to the different sides of a cuboid can lighten or darken them. Consider this CSS flipping table. All the surfaces are using a texture image. But to differentiate the sides, brightness filters are applied.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="xJXvjP"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/xJXvjP">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Smoke and mirrors perspective</h2>
<p>How about shapes — or features we want to create that seem impossible — using a finite set of elements? Sometimes we can trick the eye with a little smoke and mirrors. We can provide a “faux” like sense of 3D. The <a href="https://zzz.dog/">Zdog library</a> does this well and is a good example of this.</p>
<p>Consider this bundle of balloons. The strings holding them use the correct perspective and each has its own rotation, tilt, etc. But the balloons themselves are flat. If we rotate the plane, the balloons maintain the counter plane rotation. And this gives that “faux” 3D impression. Try out the demo and switch off the countering.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="NWNVgJw"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/NWNVgJw">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Sometimes it takes a little out-of-the-box thinking. I had a house plant suggested to me as I built the 3D workspace. I have a few in the room. My initial thought was, “No, I can make a square pot, and how would I make all the leaves?” Well actually, we can use some eye tricks on this one too. Grab a stock image of some leaves or a plant. Remove the background with a tool like <a href="https://www.remove.bg/">remove.bg</a>. Then position many images in the same spot but rotate them each a certain amount. Now, when they’re rotated, we get the impression of a 3D plant.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="oNLNZMR"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/oNLNZMR">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Tackling awkward shapes</h2>
<p>Awkward shapes are tough to cover in a generic way. Every creation has its own hurdles. But, there is a couple of examples that could help give you ideas for tackling things. I recently read an article about the <a href="https://www.designedbycave.co.uk/2020/LEGO-Interface-UX/">UX of LEGO interface panels</a>. In fact, approaching 3D CSS work like it’s a LEGO set isn’t a bad idea. But the LEGO interface panel is a shape we could make with CSS (minus the studs — I only recently learned this is what they are called). It’s a cuboid to start with. Then we can clip the top face, make the end face transparent, and rotate a pseudo-element to join it up. We can use the pseudo-element for adding the details with some background layers. Try turning the wireframe on and off in the demo below. If we want the exact heights and angles for the faces, we can use some math to workout the hypoteneuse etc.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="PozojYe"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/PozojYe">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Another awkward thing to cover is curves. Spherical shapes are not in the CSS wheelhouse. We have various options at this point. One option is to embrace that fact and create polygons with a finite number of sides. Another is to create rounded shapes and use the rotation method we mentioned with the plant. Each of these options could work. But again, it’s on a use case basis. Each has pros and cons. With the polygon, we surrender the curves or use so many elements that we get an almost curve. The latter could result in performance issues. With the perspective trick, we may also end up with performance issues depending. We also surrender being able to style the “sides” of the shape as there aren’t any.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="wvWvqqM"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/wvWvqqM">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Z fighting</h2>
<p>Last, but not least, it’s worth mentioning “Z-fighting.” This is where certain elements on a plane may overlap or cause an undesirable flicker. It’s hard to give good examples of this. There’s not a generic solution for it. It’s something to tackle on a case-by-case basis. The main strategy is to order things in the DOM as appropriate. But sometimes that’s not the only issue.</p>
<p>Being accurate can sometimes cause issues. Let’s refer to the 3D workspace again. Consider the canvas on the wall. The shadow is a pseudo-element. If we place the canvas exactly against the wall, we are going to hit issues. If we do that, the shadow and the wall are going to fight for the front position. To combat this, we can translate things by a slight amount. That will solve the issue and declare what should sit in front.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="PozoYWK"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/PozoYWK">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Try resizing this demo with the “Canvas offset” on and off. Notice how the shadow flickers when there is no offset? That’s because the shadow and the wall are fighting for view. The offset sets the <code>--x</code> to a fraction of <code>1vmin</code> that we’ve named <code>--cm</code>. That’s a responsive unit being used for that creation.</p>
<h2>That’s “it”!</h2>
<p>Take your CSS to another dimension. Use some of my tips, create your own, share them, and share your 3D creations! Yes, making 3D things in CSS can be tough and is definitely a process that we can refine as we go along. Different approaches work for different people and patience is a required ingredient. I’m interested to see where you take your approach!</p>
<p>The most important thing? Have fun with it!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="MWeWvGO"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/MWeWvGO">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>It&#39;s Good To Talk: Thoughts And Feelings On Creative Wellness</title>
    <link href="https://jhey.dev/writing/its-good-to-talk-thoughts-and-feelings-on-creative-wellness/"/>
    <updated>2020-07-17T15:35:07+01:00</updated>
    <id>https://jhey.dev/writing/its-good-to-talk-thoughts-and-feelings-on-creative-wellness/</id>
    <content type="html"><![CDATA[
      <p>In fields as fast-paced and technical as web design and development, it’s easy to lose sight of our own wellbeing. For many, there’s a constant sense of trying to keep up or ahead. We may not even realize we’re doing it.</p>
<p>Ask yourself, when was the last time you stepped away for a day and didn’t think about coding or design for a day? For me, that’s very hard to answer. For many, it’s a vocation that we can’t switch on and off. We can’t turn it off at 5 or 6 PM. Let’s talk about that and ways we can deal with it.</p>
<p>It’s important to start right off the bat by saying this article isn’t a dictation. The aim here is to spark interest, engagement, and discussion. These are things that sometimes get lost in the whirlwind industry we are a part of. Different things work for different people, and these words are written with the best intentions.</p>
<p>Why now? I’d planned to write something about this topic at the tail end of last year. I was making my way back from my first NodeConfEU and feeling inspired by a talk I attended, “Building Open Source Communities with Tierney Cyren”.</p>
<div class="post__embed-container">
      <iframe loading="lazy" class="post__embed" src="https://www.youtube.com/embed/ZHcf7m9yQZM" allow="encrypted-media; picture-in-picture"></iframe>
    </div>
<p>I made a bunch of notes, then life and other commitments cropped up and the article made its way to the backburner. But, that’s OK. And that’s kind of where this post leads us to. It’s OK if you didn’t write that post, work on that side project this weekend, and so on.</p>
<h3>Pressure Culture</h3>
<p>If you’re reading this, odds are you’ve seen or experienced pressure culture — that constant, nagging expectation to dedicate every waking hour to skills development and side projects, even if your heart might not be in it. This pressure can be self-imposed, and whether we like it or not social media also plays a big part. If we aren’t careful, it can eat away at us.</p>
<p>Pressure culture isn’t something that’s popped up recently. It’s been around a long time, a constant looming external force. Left unchecked it can fill you with guilt, anxiety, and other feelings we aren’t fond of.</p>
<p><img src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6aa37d8d-d34a-4e13-8aa7-ba5c226bef48/work-play-balance-the-awkward-yeti.png" alt="A comic from 'The Awkward Yeti' titled 'Work/Play balance'."></p>
<p>This is a common result of the idea of ‘The ideal worker,’ with pressure coming from those higher up in workplace hierarchies. These ‘Never say no’ employees feel obliged to wear themselves thin in order to progress in their careers. There’s a great <em>Harvard Business Review</em> article called <a href="https://hbr.org/2016/06/managing-the-high-intensity-workplace">“Managing the High-Intensity Workplace”</a> that explores this mindset.</p>
<p>Social media pressure is also very real. The tendency to idealize our online lives is well documented. We often forget that we are likely only looking at someone else’s highlight reel. That is true of work as well as play. If we forget that and spend a lot of time-consuming content from those we idolize, that pressure creeps in. We want to be as awesome as the people on our feed, but at what cost?</p>
<p>There was a period a little while back where tweets like this were quite frequent:</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/WellPaidGeek/status/1192154711513878531?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>The message is completely understandable. Time is valuable. The hard truth is that if you want to get far in your career, prepare to put in the hours. Nothing gets handed out. Self-improvement and commitment to your craft are great, but only if you find the right balance.</p>
<p>Messages like those above put you under an enormous amount of pressure. That pressure isn’t healthy, and can actually hamper your development. It can lead to things like burnout and potentially, even depression. What is burnout? <a href="https://www.frontiersin.org/articles/10.3389/fpsyg.2019.00284/full">This study</a> phrases it quite well:</p>
<blockquote>
<p>“Burnout is a psychological syndrome characterized by emotional exhaustion, feelings of cynicism and reduced personal accomplishment.”</p>
</blockquote>
<p>It’s not a nice place to be. I can speak from experience here. Feeling as if things are bearing down on you and you need to keep up. “I need to make that new thing or learn that new framework to keep up with my peers.” I remember seeing tweets from people. They’d say things like, “I missed a day of my bootcamp course. I’d better do double tonight.” This makes for sad reading. You don’t want to end up resenting what you do for a job.</p>
<p>Burnout cannot only impact your personal wellbeing, but can also affect other areas of your life. Does your work suffer as a result? Do you still have the energy to give it your full attention? How about that creative spark? Is it gone? We’ve all heard of writer’s block. Well, <a href="https://www.goodtherapy.org/learn-about-therapy/issues/creative-blocks#:~:text=Creative%20blocks%2C%20or%20barriers%20to,%2C%20months%2C%20or%20even%20years.">creative’s block</a> is a thing too!</p>
<p>The above tweet was a great example of how social media can influence us. Read the responses and engagement. There’s an almost 50⁄50 split on how it’s perceived. This response from Chris Coyler was great:</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/chriscoyier/status/1192169218910765056?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>And it’s so true. It’s OK to sit back and not force yourself to work on things. It’s fine to take the night off, the week off, and so on. Those projects will still be there for you. They’re not going anywhere. You might even decide you don’t want to return to them at all, and that’s fine too! It’s all about balance.</p>
<p>With the pandemic and many of us in lockdown, this trend has reared its head again. I’ve seen my fair share of messages implying if you haven’t picked up new skills with your new free time, you’ve wasted it. As if it’s some kind of opportunity. Not that a global pandemic is exhausting enough right?</p>
<p><img src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aba49963-236e-4dcb-835f-b07a7be784b0/hopes-and-dreams-the-awkward-yeti.png" alt="A comic from “The Awkward Yeti” titled 'Hope and dreams'"></p>
<p>Even now, pressure culture is not black and white. The free time gained where we had other commitments is an opportunity. An opportunity to try something new or do something we haven’t had the time for. It might be that that thing is ‘rest’. For me, my weekend commitments halted, so I decided to finally start streaming. And, I’ve loved it! Still, I try not to let it take up more time than my other commitments would. If it gets too much, I take a break and step away.</p>
<h3>Handling Pressure Culture</h3>
<h4>GETTING AFK (AWAY FROM KEYBOARD)</h4>
<p>How can we combat these feelings of pressure? It sounds like the opposite of what our minds tell us, but one way is to get away from that keyboard. Disconnect and go do something else. I’m not saying lock up your laptop for a week and go cold turkey, but a break does you good.</p>
<p>Go for a walk, read a book, do nothing! We already saw that Chris enjoys a night with Netflix! I myself recently picked up a stylus for the iPad so I can go chill out on a bean bag and sketch doodles. There’s also a 1000 piece puzzle laid out on a table downstairs that’s quite good to sit next to zone out with.</p>
<p>Yes, it’s difficult at the moment. We can’t make a trip to the theme park or the cinema or even hit the gym. But, we can still get AFK. Even sporadic breaks throughout the day can do you wonders. I often get up every once in a while and do a few handstands!</p>
<p>This is true even when the world isn’t in crisis. Getting away from things can be great for you. It’s not healthy to tie yourself to the same thing 24 hours a day. Step back, broaden your scope, and appreciate that there’s so much more on offer for you. Close this tab and get away now if you’d like. I’d prefer it if you stuck around until the end, though.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1272166476405972992?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>It might not even be a case of getting physically AFK either. There’s <a href="https://t.co/JLs4UOwlEs?amp=1">a Slack community</a> I’m in that has this notion of ‘fun laptop time’ which is an interesting idea. Have a separate machine that you can unwind on or do other things on. One that isn’t logged in to social media perhaps? One that you can do ‘fun’ things on. Maybe that is still coding something or creative writing or watching a live stream. The possibilities are endless.</p>
<p>Give yourself space to live away from your work. <a href="https://lifehacker.com/what-causes-burnout-and-how-to-overcome-it-1792910323">This article</a> on Lifehacker cites the case that taking up something new can help with burnout. I can relate to that too. Scheduling something completely unrelated to work is quite good at this. For me, I know when the season is in full swing, I’ll be spending some of my Saturdays AFK running around a field.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1283100492462268421?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>With AFK, we’re mainly referring to sitting at a desk with a physical keyboard. Odds are, if you have a smartphone, the little digital one on that isn’t far away. A FOMO tip that might seem counterintuitive is to share being AFK. Share what you’re up to with people. It might surprise you how much people appreciate seeing others getting AFK. Rachel’s been plane spotting for example!</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/rachelandrew/status/1265998936902377473?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h4>PLEASE TALK</h4>
<p>And that leads us to the title of this post. It’s good to talk. Is there a stigma attached to talking about our feelings and struggles? Yes. Should there be? Hell no!</p>
<p>FOMO, burnout, depression, anxiety, and so on. They’re all real things and likely touch more of us than we know. I listen to various podcasts. I remember one in which the speaker and guest spoke about almost an obsession with chasing goals. When you reach that goal, you hit a low. Maybe it didn’t fill that void you were hoping for? But, although I wasn’t having a conversation with them, hearing that did me some good. It was relatable.</p>
<p>I’d had this feeling inside, never expressing it. Now I knew it wasn’t uncommon. So I spoke about it with other people, and they could relate too. One big example for me was buying my house. It had been a goal for a year or so to get on the property ladder. Once I got the keys, it was a bit deflating. But, I should’ve been super happy about it.</p>
<p><img src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3cf6c7dd-053b-44d4-b6cf-c3302a87ab69/return-of-me-the-awkward-yeti.png" alt="A comic from 'The Awkward Yeti' titled 'Return of Me'"></p>
<p>We could all bottle those things up. But, speaking about things and getting your thoughts out can go some way in taking the pressure off. Another perspective can really help you out! It might be hearing something as little as ‘I do that too’ or ‘Don’t be so hard on yourself, you’re doing great!’ that can go a long way. It’s not that you’re fishing for compliments, but it sometimes takes that other perspective to bring you back to reality.</p>
<p>Now don’t get me wrong. Talking about things is easier said than done, but the results might surprise you. Based on my own experience and others I’ve spoken to, here are some things you can do to combat those negative feelings.</p>
<ul>
<li><strong>Be willing to take the first step.</strong><br>
Interaction doesn’t have to be a dying art. It won’t work for everyone and you can’t force others to embrace it. There will be those who do, though, people who feel exactly the same and were looking for someone to talk to.</li>
<li><strong>Speak more openly.</strong><br>
I’ve personally been terrible at this and I don’t mind admitting it. I’m getting better though. I speak more openly with those I engage with both on and offline and I’m happier for it. The takeaway being that there’s no shame in being yourself and doing what you want to do. If you’re being made to feel that way, it could be a good time to shift your circle or change up those you engage with. One nifty tip if you work remotely and feel isolated during the day is to set a reminder for yourself. For example, set a reminder every day at noon to reach out to people. This is quite effective. Most IM services can do this. For example, with Slack:<pre class="language-shell"><code class="language-shell"><span class="highlight-line">/remind me <span class="token string">"Reach out to people!"</span> every weekday at <span class="token number">12</span>:00 pm</span></code></pre>
</li>
<li><strong>If it can’t be offline, take it online.</strong><br>
You don’t have to speak to people in person. Hop on a call with someone. Or even a video call. There are also so many online communities out there now too. If you don’t want to talk about how you feel, it’s great to even talk about what you’re up to or hear what others are up to. You soon realize people aren’t churning 24 hours a day like social media might have you think. I’ve recently joined an <a href="https://www.partycorgi.com/">online community of creatives on Discord</a>. I must say, it’s been brilliant. The <a href="https://www.partycorgi.com/">Party Corgi</a> network has been a game changer for me.</li>
<li><strong>Broaden your scope.</strong><br>
It’s so easy to lose track and become so focussed on your own little circle. I ended up randomly hopping around Twitch the other day. And I sat there and thought to myself, “This is brilliant”. There are so many creatives out there doing fantastic things, things I wasn’t even aware of. Why do I get so fixated on my own little bubble?</li>
<li><strong>One tip that trumps all others? Be humble.</strong><br>
You gain more from being positive. Good vibes breed good vibes. Plus, no one likes a hater.</li>
</ul>
<h3>To Conclude</h3>
<p>It’s completely normal to feel a sense of pressure or get that horrible ‘imposter syndrome.’ But, don’t let it get to you. Do what you can and what you want to. Don’t sacrifice your health to get ahead. It’s OK to step away sometimes.</p>
<p>The next time you feel a little overwhelmed with things and feel that pressure coming for you. Have a chat with a family member, reach out to a colleague, even an online acquaintance. Maybe share it with folks at <em>Smashing?</em> I love seeing what people get up to.</p>
<p>If this is a career you plan on sticking with, what’s the rush? You might be doing this for tens of years. Embrace your journey. It’s not a race. For one thing, you might not even be on the same road.</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>CSS Animated Google Fonts</title>
    <link href="https://jhey.dev/writing/css-animated-google-fonts/"/>
    <updated>2020-07-13T17:20:42+01:00</updated>
    <id>https://jhey.dev/writing/css-animated-google-fonts/</id>
    <content type="html"><![CDATA[
      <p>Google Fonts now supports variable fonts! That's pretty neat.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1278290708626104322?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h2>What are variable fonts?</h2>
<p>If you're not familiar with variable fonts. They're pretty cool. The biggest win is having access to font variations with fewer network requests. This results in reduced file size for your fonts!</p>
<p>All made possible by cool new features. Features that allow us to change the characteristics of a font such as the <code>weight</code> and <code>slant</code> at runtime. Besides the practical advantages, it means we can also animate these characteristics!</p>
<p>We refer to these characteristics as the axis. And a variable font doesn't have to support them all, it may choose to only support one or two.</p>
<table>
<thead>
<tr>
<th>Axis name</th>
<th style="text-align:center">CSS value</th>
</tr>
</thead>
<tbody>
<tr>
<td>Weight</td>
<td style="text-align:center">wght</td>
</tr>
<tr>
<td>Width</td>
<td style="text-align:center">wdth</td>
</tr>
<tr>
<td>Slant</td>
<td style="text-align:center">slnt</td>
</tr>
<tr>
<td>Optical Size</td>
<td style="text-align:center">opsz</td>
</tr>
<tr>
<td>Italics</td>
<td style="text-align:center">ital</td>
</tr>
<tr>
<td>Grade</td>
<td style="text-align:center">GRAD</td>
</tr>
</tbody>
</table>
<p>For more on variable fonts, <a href="https://web.dev/variable-fonts/">check this article!</a></p>
<h2>What about Google Fonts then?</h2>
<p>Well, there's one thing that isn't clear when using variable fonts from Google Fonts. How do you get the entire font?</p>
<p>Let's say we choose &quot;Roboto Mono&quot; and set that up.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'https://fonts.googleapis.com/css2?family=Roboto+Mono&amp;display=swap'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">h1</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Roboto Mono'</span><span class="token punctuation">,</span> monospace<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now we decide to change the variable font settings. We know that &quot;Roboto Mono&quot; supports &quot;Variable weight axis&quot;. If we try updating the weight in our example, nothing happens...</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">h1</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">font-variation-settings</span><span class="token punctuation">:</span> <span class="token string">'wght'</span> 300<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">h1</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">font-variation-settings</span><span class="token punctuation">:</span> <span class="token string">'wght'</span> 700<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Hmm. What's wrong?</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="GRoOboo"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/GRoOboo">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>If we check out a particular weight and then use &quot;Select this style&quot; we can grab the weights we want!</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/d46rxzm7wzgc49fsy91i.png" alt="Snap of Google Fonts variable weight range configuration"></p>
<p>And updating our CSS will reflect that weight.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="gOPXNMr"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/gOPXNMr">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>For many weights, enter the weights followed by a semi-colon.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@import</span> <span class="token function">url</span><span class="token punctuation">(</span>'<span class="token property">https</span><span class="token punctuation">:</span>//fonts.googleapis.com/css2?family=Roboto+<span class="token property">Mono</span><span class="token punctuation">:</span>wght<span class="token atrule"><span class="token rule">@200</span><span class="token punctuation">;</span></span></span>700&amp;display=swap'<span class="token punctuation">)</span></span></code></pre>
<p>Hover the word in this demo to transition to a higher <code>wght</code>.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="wvMPLzJ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/wvMPLzJ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>I have noticed something interesting here though. Enter any two values from the range and you'll have access to the entire range!</p>
<p>For example, here I use</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@import</span> <span class="token function">url</span><span class="token punctuation">(</span>'<span class="token property">https</span><span class="token punctuation">:</span>//fonts.googleapis.com/css2?family=Roboto+<span class="token property">Mono</span><span class="token punctuation">:</span>wght<span class="token atrule"><span class="token rule">@699</span><span class="token punctuation">;</span></span></span>700&amp;display=swap'<span class="token punctuation">)</span></span></code></pre>
<p>But I still have access to weights from the entire supported range.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="OJMOepW"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/OJMOepW">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Wonder if this will change in the future? Or maybe it's a case of entering any two values triggers the fact you want the variable version?</p>
<h2>How do we animate them?</h2>
<p>No different from a normal CSS animation. We can animate the &quot;font-variation-settings&quot; property.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> breathe</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">font-variation-settings</span><span class="token punctuation">:</span> <span class="token string">'wght'</span> 700<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Here we use some variables to dictate the lower and upper band.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="RwrjzZa"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/RwrjzZa">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>How do we take it further and stagger the characters? For this, we can split up the characters in our HTML.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--index</span><span class="token punctuation">:</span> 0</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>W<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--index</span><span class="token punctuation">:</span> 1</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--index</span><span class="token punctuation">:</span> 2</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--index</span><span class="token punctuation">:</span> 3</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--index</span><span class="token punctuation">:</span> 4</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>v<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--index</span><span class="token punctuation">:</span> 5</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>e<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span></code></pre>
<p>And notice how we are using an inline CSS variable for the character index? We can use that to dictate the animation delay of a character. A scoped variable means less CSS.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">h1 span</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation-delay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--index<span class="token punctuation">)</span> - 6<span class="token punctuation">)</span> * 0.25s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And that will give us this.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="bGEYPLo"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/bGEYPLo">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We could take that a little further and add some color and stack the words 😎 Mix in what we have some CSS transforms and there's a bunch we can do!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="WNrXqYz"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/WNrXqYz">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>For my original demo, I threw something together with GreenSock and Splitting.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="OJMOmRL"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/OJMOmRL">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>But, there's no reason we can't do something similar with CSS alone.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="GRoOVNy"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/GRoOVNy">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We can swap the saturation out as we were by creating a similar keyframe.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> rise</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">font-variation-settings</span><span class="token punctuation">:</span> <span class="token string">'wght'</span> <span class="token function">var</span><span class="token punctuation">(</span>--upper<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--hue<span class="token punctuation">)</span><span class="token punctuation">,</span> 80%<span class="token punctuation">,</span> 65%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>That's it!</h2>
<p>Grab some variable fonts from Google Fonts and have a play! I haven't been through all the fonts yet. As of yet, I've only seen support for the <code>weight</code> axis.</p>
<p>If you find any that support the other axis, let me know!</p>
<p>Got any good variable fonts resources? I'd love to see them!</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Write For Yourself so That One Day You Might Write For Those You Look Up To</title>
    <link href="https://jhey.dev/writing/write-for-yourself-so-that-one-day-you-might-write-for-those-you-look-up-to/"/>
    <updated>2020-06-28T17:37:29+01:00</updated>
    <id>https://jhey.dev/writing/write-for-yourself-so-that-one-day-you-might-write-for-those-you-look-up-to/</id>
    <content type="html"><![CDATA[
      <blockquote>
<p>Write for yourself so that one day you might write for those you look up to</p>
</blockquote>
<p>If there's one message to take from this article, take that one.</p>
<p>Blogs are a hot topic.</p>
<ul>
<li>Should you start one?</li>
<li>Are you good enough?</li>
<li>Who should you write for?</li>
<li>Where should you put it?</li>
<li>What should you write about?</li>
<li>What's my style?</li>
<li>Did someone already write about that topic?</li>
<li>Will anyone care?</li>
<li>When should I post it?</li>
<li>Will anyone read it?</li>
<li>How do I write for super-cool-site.com?</li>
</ul>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1276470267150307330?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>I completely stand by that. It's hard to convey all my thoughts around this subject in 280 characters though.</p>
<p>Let's dig in!</p>
<h2>Should you start one?</h2>
<p>If you've even considered writing content. Don't keep thinking about it, do it!</p>
<p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EBHm750c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/8cce48d6a65b7b8d1c80a68d9c3d652f/tenor.gif%3Fitemid%3D4350439" alt="you can do it"></p>
<p>And I mean that in the best way possible.</p>
<p>The sooner you start, the sooner you can hone your skills at writing and find your voice as a writer.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/priyacodes98/status/1276313856898330624?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1276322217442369537?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h2>Are you good enough?</h2>
<p>Yes.</p>
<p>Let's move on.</p>
<p>But, seriously, you are. It doesn't matter what level you're at. People enjoy relatable content. That doesn't only apply to when you write tech content. Share your journey and the things that interest you.</p>
<p>In terms of writing skills? There are some tools out there to help you. My personal combo of choice, <a href="http://hemingwayapp.com">Hemingway</a> and <a href="https://grammarly.com">Grammarly</a>.</p>
<h2>Who should you write for?</h2>
<p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMvQneIj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgflip.com/46m177.jpg" alt="DiCaprio meme with the word &quot;You&quot;"></p>
<p>Yourself.</p>
<p>Write for yourself. Write as if this is a reference for you and you alone. If you're writing a tutorial or something for other people to follow, the same holds true. Of course, consider that you'll want others to understand it. But, the number one concern is that you understand it. Perspective is everything and can drive your content as you gain more experience. More on this later.</p>
<h2>Where should you put it?</h2>
<p>This is one I see all the time.</p>
<blockquote>
<p>I'm thinking of making a blog. Where should I put it? Should I build something with &quot;Hot spangled new blog platform X&quot;?</p>
</blockquote>
<p>If you want to write content. Write content.</p>
<p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Htt6pfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgflip.com/46m1sh.jpg" alt="meme where someone eyes up a new blogging platform"></p>
<p>Where you put it shouldn't be a blocker to you writing content. If it is? Ask yourself if writing that blog post still interests you?</p>
<p>That said. There's nothing wrong with trying out awesome tech stacks to host your own blog. I'm all for it and I plan on doing it soon. It's awesome to learn things. My first attempt at this was using Jekyll for the record.</p>
<p>But, the purpose of this article is to get writing content. And if that's your primary goal, the platform should be the afterthought.</p>
<p>Heck. You could even create a new Github repository and start writing in Markdown right away!</p>
<p>My personal journey: Self-hosted Jekyll, Medium, CSS Tricks, Dev.to, etc.</p>
<p>One thing I will say is that you're more likely to get engagement on the bigger platforms in my experience. This of course depends on your site traffic if you're self-hosting, etc. But, something to be aware of. If I were to recommend a starting point now? It would likely be here on dev.to.</p>
<h2>What should you write about?</h2>
<p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CSdGd_uY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgflip.com/46m1yc.jpg" alt="Choosing the button meme for writing content"></p>
<p>Write about things that interest you. Don't write about something because you think it's what other people want to read about. The exception here being if someone says they'd like to read about your take on something. Even then, only do it because you want to.</p>
<p>Write about things you enjoy. Write about things that you'd like to reference later. For example, learn something new on that last thing you made and inline comments won't do the job? Write a post on it so you have something to look back at.</p>
<p>The more you write, the better you will get at writing. Write about different things and you'll find the things you like to write about. That could take you in a direction where you can shine.</p>
<p>My first published posts are about things I learned or things I enjoy. One such <a href="https://medium.com/@jh3y/why-dont-more-people-know-about-use-jade-an-intro-to-jade-5c34422c9b4d">post is about Pug</a>(It was then named Jade). The first paragraph is more about me than Pug ha. It's clear I wanted to write things. I've since revisited some of my earlier articles to clean them up a bit. But <a href="https://medium.com/@jh3y/how-to-creating-a-css-overlay-for-a-circular-image-5e168f9c0895">this article</a> about creating image overlays with CSS was something I wrote for myself. Others found it useful and let me know.</p>
<p>And that's a key point to be aware of. Because you hit &quot;publish&quot;, doesn't mean it's set in stone. You can edit it later or update it. If you don't like it, you can take it down completely. I've done that with some of my content.</p>
<h2>What's my style?</h2>
<p>You'll find this as you go. The more you write, the more likely you'll find a style that suits you.</p>
<p>There's one thing I advocate if you're writing about tech and there's code involved. Please leave a link to some code or a demo.</p>
<p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RvIvM5e0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgflip.com/46m2ay.jpg" alt="Where's the code?"></p>
<p>One format I worked towards for a while was leaving the demo and the code right at the top with a TL;DR.</p>
<p>That might sound counter-intuitive. You want people to read the whole article right? Well, I want to share something. And if people want a quick route to the answer, I provide that. That's what I look for. But there will be those that read the whole thing too. But think that if someone only grabbed the solution, it helped them, and they shared it. Then that might bring more of an audience.</p>
<p>Another style I like for me is &quot;Learn something in X minutes&quot;. I guess what I'm getting at is, you won't know your style until you try things. Try different ideas and see what works for you. I quite like the &quot;X minutes&quot; ones because it means I am trying to keep the content brief. But, for an article like this one, I'm sitting here writing my thoughts and enjoying it.</p>
<h2>Did someone already write about that topic?</h2>
<p>This one is huge! Please don't hesitate on writing a post because someone wrote about the same topic before. This is like the number one rule!</p>
<p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CAmhusyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgflip.com/46m2g9.jpg" alt="Spider man double meme"></p>
<p>Consider it like this. And please correct me in the comments if this is wrong. The analogy still applies though.</p>
<p>Motorola released the first cell phone in the 80s. Now, if everyone stood back and said &quot;They've made a cellphone, we can't&quot;. There would be no iPhone, no Android, etc. Perspective drives innovation. It takes someone to see something a certain way to think about how they might take it to the next level. Does that make sense?</p>
<p>And this can apply to your own writing. Your perspective and the way you write about something might be ideal for someone. They may have read ten articles already. But, yours was the one that gave them the &quot;Aha&quot; moment. And now they could be on their path to something great. How awesome is that?</p>
<p>Perspective is everything. Don't discourage yourself.</p>
<h2>Will anyone care?</h2>
<p>Don't make this your focus. Flip it on its head. A more important question is, do you care? Because if you don't care about your writing content, why are you writing it?</p>
<h2>When should I post it?</h2>
<p>I've seen this one a lot recently.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/chriskalmar/status/1276950491684102144?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>My response goes something like this</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1276965673726590977?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>And I stand by it. There's no formula or &quot;best time&quot; in my experience/opinion. Exactly 15:17 on a Tuesday isn't going to solve your problem. Do what works for you. You could post the same thing 3-4 times on social media and people are still going to miss it. That's how it goes.</p>
<p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41yj8cJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgflip.com/46m2l9.jpg" alt="Ship it now button meme"></p>
<p>Content will always prevail and you never know what that might be when you start. You're finding your way with it.</p>
<p>The first post that worked for me? A thirteen-minute read about <a href="https://codeburst.io/how-to-pure-css-masonry-layouts-a8ede07ba31a">creating pure CSS masonry layouts in 2016</a>. I posted it because it was something I enjoyed exploring. A week later it had a spike in views and I had no idea why. It didn't matter when I posted it. It gained an audience a week later.</p>
<p>Before that, I'd been writing about various topics. But because of that post, my other content became seen. Content that I'd posted almost a year earlier gained attention.</p>
<p>It echoes the points from before. Write about things you enjoy. Post them when it works for you. Don't pressure yourself. You never know who might be watching.</p>
<h2>Will anyone read it?</h2>
<p>Of course, we want people to read our content. Otherwise, we wouldn't publish it. But by not focussing on that, it can happen. That almost sounds counter-intuitive.</p>
<p>But from that previous example. I wrote for myself and it happened that others were watching.</p>
<p>That said, there are some tips for getting your written content in front of people.</p>
<p>Tags.</p>
<p>Most of the platforms support some form of tags. And this must help in some way. I can't vouch for every way of doing this but here's my experience.</p>
<p>Tagging things on Medium helped to get it in front of people. Then publications would request to add the article to their publication. That gains more traction and go from there. With Dev.to, use the tags and make use of &quot;Suggested tweet&quot;. You get the opportunity to have your content shared with people by a popular account.</p>
<h2>How do I write for super-cool-site.com?</h2>
<p>I can't vouch that my journey will work for you. But I do believe being consistent and writing content can lead to great things.</p>
<p>I've been fortunate to write for some of my favorite publications. All because I started writing for myself. I wrote about things I enjoyed and things that interested me. I didn't write because X, Y, or Z was watching.</p>
<p>It took time though. I've been writing content for around 6 years at the time of writing this. Something that I've only realized writing this now.</p>
<p>It's no secret, I love CSS. One of my biggest goals was to write an article for CSS Tricks. At the time of writing this, I've got five published on there now.</p>
<p>How did that happen? I said I'd like to.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1149822980559704064?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>A lot of the big publications have guest author programs and info on their sites. Reach out. Propose an article. What's the worst that can happen? They say no? They could decline. But, even if they do, I'd bet they'd be willing to help you. Help you in a direction that will lead to writing content for their platform.</p>
<h2>That's it!</h2>
<p>Write for yourself so that one day you might write for those you look up to. Be interested in what you write about and share your journey.</p>
<p>The best time to start is now. The best time to share it is when it's ready. If your content interests me, I'll be there to read it, wherever it is.</p>
<p>This is my story. I look forward to reading yours!</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Starting a Streaming Journey</title>
    <link href="https://jhey.dev/writing/starting-a-streaming-journey/"/>
    <updated>2020-06-21T17:46:56+01:00</updated>
    <id>https://jhey.dev/writing/starting-a-streaming-journey/</id>
    <content type="html"><![CDATA[
      <p>I always enjoyed the idea of live streaming. A few years ago I toyed with the idea of streaming playing games.  It never panned out, I liked to use my spare time making things with code.</p>
<p>Roll forwards a couple of years and the subject cropped up again.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/avneet_paul/status/1242192360093745157?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Well, there's an idea. Now, I can continue to make demos and things. But, stream it all at the same time and engage with other people. Now that's rad!</p>
<p>There are a few quirks with creating content and not sharing the process. In ye olden days, people would frown upon sharing their secrets.</p>
<p>&quot;Why would you tell them how you moved that div across the screen????!!!! Everyone will start doing it!&quot;</p>
<p>But, we live in a digital age and for the most part, sharing is caring.</p>
<p>With many demos, people often ask &quot;How?&quot;. Often there's an opportunity to spin a blog post out of it or even a tutorial. That takes time though. A happy medium is being able to share the process, the result, and then supplement with other material.</p>
<p>And this is where streaming can hit that sweet spot. To hit &quot;Go Live&quot; and let others see the process feels like doing two things at once. I'd be making those things anyway! But now viewers can see the process or even ask questions as it's happening.</p>
<p>A good example would be some of my CSS illustration demos. Peopled asked &quot;How?&quot;, I streamed a bunch of them, released them, and then came the CSS Tricks article.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1273662075122913289?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>If you'd tuned into the streams, you were one step ahead of the article.</p>
<p>So where are we going with this? It's a collection of my thoughts and tips for getting started. Along with my set up for those who it interests.</p>
<hr>
<h2>Do it!</h2>
<p>If you're even considering it in the slightest, do it!</p>
<p>That' my biggest advice here and why I've started with it. If you close the tab now and go do something else (start streaming?), I've done what I intended.</p>
<p>There is of course a slight caveat here with regards to hardware limitations and we will talk about that.</p>
<h2>No one will watch my content</h2>
<p>Stream something you want to stream, not what you think you should stream. Want to stream games today? Do it! Want to stream creating Tic Tac Toe in JavaScript? Do it! Want to stream creating a newsletter template? Do it!</p>
<p>You never know who might be watching. And you never know what might inspire someone else. Also, don't assume you're audience will all be like you. I've met people on stream who are from completely different walks of life.</p>
<p>Surprise yourself.</p>
<p>It's worth noting that people enjoy relatable content. Don't worry if you get stuck on a problem for five minutes or can't spot a typo for ten. People love seeing that, it shows you're human too!</p>
<p>Remember everyone is on their own journey/trajectory. It's not a race. Embrace the experience.</p>
<hr>
<p>Let's dig into the fun stuff, the setup!</p>
<p>I'm still learning and that's one thing I love about picking up something new, there's loads to learn. This is what I'm currently doing and I'm sure there are things I will improve and change as I go on.</p>
<h2>Broadcast settings</h2>
<p>Most of us will be reaching for OBS or Streamlabs OBS here. The auto-configuration wizard for both will get you most of the way in my experience.</p>
<p>After that, there are some things to consider. How you output to your viewers. My advice? Set your display resolution to 1080P(1920x1080) and output at 720P(1280x720). It's no good using an ultrawide screen and streaming that to your users who are viewing at a 16:9 aspect ratio. Believe me, I did it! I was streaming a 3440x1440 screen and it did not look good.</p>
<p>Once the screens are set up, bump up the font sizes in your editor and dev tools for people to see. We have a cool <a href="https://howtoegghead.com/instructor/screencasting/vscode/">reference on Egghead</a> for font size and removing distractions in VSCode.</p>
<h2>Setting the scene</h2>
<p>I've got a bunch of scenes set up but I'll go over the most important ones that you'll likely need to start.</p>
<h3>Live coding, etc.</h3>
<p>This scene will be a window capture of the screen you're working on. I didn't start with my webcam on, but, I recommend it. People seem to relate and engage more when they see the face behind the bear! As opposed to when I first started and didn't show anything. You can also put other things in your scenes such as your social handles or an avatar. I'll touch on that later. You can also add alert boxes for when someone follows, etc. Or you can get a little creative and allow users to interact through chat. <a href="https://www.twitch.tv/videos/650843544">I allow users to fire air horns and show party corgis ha</a>.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/ijwbzgsg6wo3sdnjm94s.gif" alt="Party Corgi!"></p>
<h3>Privacy</h3>
<p>This is a scene that shows something to your viewers whilst you do things you don't want them to see. For example, putting in a password, filling out API keys, etc. This can be anything you like. Even some text like &quot;This isn't for you!&quot; ha. This is very important if you don't have a second monitor handy.</p>
<p>As for other scenes. When you're comfortable, you can start adding other scenes to your stream setup. I have one for loading/waiting for example too.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="GRpNvaZ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/GRpNvaZ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>Music</h3>
<p>Play some background music in your streams. This makes your stream a little less awkward for viewers when you're sitting there in silence trying to work something out!</p>
<p>Remember though, you can't play the latest chart hits, etc. Your saved broadcasts will all be muted...</p>
<p>I highly recommend <a href="https://open.spotify.com/playlist/4kAqBBEZQsBIXMIJl6u8tO">StreamBeats</a> from Harris Heller. Or check out <a href="https://www.twitch.tv/broadcast/soundtrack">Twitch Soundtrack</a>.</p>
<p><img src="https://media.giphy.com/media/tqfS3mgQU28ko/giphy.gif" alt="Spongebob with headphones on"></p>
<h2>Hardware</h2>
<p>This is the real fun part.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1274360628417830913?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Before we dig in though, let's be clear, you don't need my set up to make a great stream. But, I have a soft spot for getting things set up the way I want them so I do my research and play around with things.</p>
<p>I'll go through the two setup styles I've used and list hardware at the bottom.</p>
<h3>Streaming from one machine</h3>
<p>You should be able to stream from your machine in some way. I kinda feel like there's a little stigma here that you need a business-grade 12 core CPU and SLI GPUs to get started ha.
That said, it's hard to tell if things will work for you. There are things to consider such as network, hardware specifics. The best way to know? Try. You can even try local recording first to test out the different scenes and get a feel for the software.</p>
<p>Dual monitors are ideal so you can keep OBS on a separate screen.</p>
<p>The majority of my streaming journey so far has been all done from one machine. An i7 Mac Mini with an ethernet connection. It was straightforward to set up. The only trick was capturing desktop audio for music and any sound I'm using for my work.</p>
<h3>The line in loop trick for Mac</h3>
<p>This deserves its own little section as it might help someone else out. If you don't want to use software to capture your desktop audio in OBS, you can do it with hardware.</p>
<p>If you can get a hardware line-in and a headphone splitter cable, you're golden. I have a CalDigit TS3+, but, you can get USB audio line-in for Mac. The trick is to use the splitter with one AUX cable looping back to the line-in and the other for headphones.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/j9nmyx0fc9k7q06b9tq9.jpg" alt="USB line-in and a headphone splitter cable"></p>
<p>Thank me later if this helps you out! I found this super useful when I worked it out ha.</p>
<h3>Dedicated streaming rig</h3>
<p>This is the ideal set up. Use your coding machine capturing the output and streaming that from another machine.</p>
<p>This offloads a bunch of the heavy lifting that streaming entails to that second machine.</p>
<p>That second machine will run OBS and stream the output from your work machine. It can also run any other things you might need.</p>
<p>There are two key components in this setup. The USB capture card and a USB switch.</p>
<p>A capture card does what it sounds like, captures output from a machine, and sends it to another. Search for capture cards and you'll see various options costing hundreds of dollars. But that might not be necessary. The capture card I'm using costs a fraction of that. We'll see how well it holds up. I've left an escape hatch in my cable management in case ha.</p>
<p>The USB switch allows us to share peripherals between two machines. For example, I'm using my webcam on both machines and when I switch machine, I hit the switch.</p>
<h3>Budget capture cards!</h3>
<p>So I picked up two different options here thinking that neither of them would work as a solution ha. To my surprise, both work!</p>
<p>The first is a very basic HDMI capture card featured on EposVox. It's great and does what it says.</p>
<div class="post__embed-container">
      <iframe loading="lazy" class="post__embed" src="https://www.youtube.com/embed/daS5RHVAl2U" allow="encrypted-media; picture-in-picture"></iframe>
    </div>
<p>But, how do you capture that output and still see it on your monitor so you can use it? You'll need an HDMI splitter. I had mixed results here. But, it does work! I can only ever have 1080P output on my monitor though. That's not ideal on a 3440x1440 screen when I'm not streaming ha. The option here might be an HDMI switch to hot-swap when I'm not streaming.</p>
<p>But no, it's not necessary. Let me introduce option number two. Whilst hunting for the first option, I came across this option and thought &quot;Why not?&quot;. These cards are less than $20 on eBay. It's very much like the first but this one has a loop through feature too! Plugged it in and got it all set up. It supports my full resolution for the loop through! Wow. A USB capture card that can capture at 1080P and supports 4K on the loop. Technology is amazing.</p>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/y3d25g2xkbdbzi5gmz2g.jpg" alt="A sub $20 USB capture card with loop through"></p>
<p>I can't say how long it will work for but I'm optimistic. I've left that escape hatch in the cables if I need it. I'd likely get another one ha.</p>
<h3>What I'm using</h3>
<p>So what have I got going on? Here's a diagram of how my set up works. If you think that's confusing, you should see the cables!</p>
<p>I'm also using three monitors. The two large are for work. And then a much smaller 10&quot; monitor is a reference monitor. Both machines are connected to the big monitors so I can switch between. But, when I stream code, the little 10&quot; becomes a dedicated OBS screen plugged into my streaming rig.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1274403970145046540?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p><img src="https://dev-to-uploads.s3.amazonaws.com/i/g01h86vmt3w8s15kfotm.png" alt="A diagram of how it all looks put together"></p>
<ul>
<li>Mac Mini (3.2GHz i7, 32GB RAM)</li>
<li>Dell U3415W 34&quot; monitor</li>
<li>Dell U2515H 25&quot; monitor</li>
<li>10&quot; reference monitor</li>
<li>CalDigit TS3+ Dock</li>
<li>Bose companions 2 speakers</li>
<li>UGREEN 4 port USB switch</li>
</ul>
<p>The streaming rig.</p>
<ul>
<li>Silverstone SG13</li>
<li>AMD Ryzen 5 3600</li>
<li>EVGA KO RTX 2060</li>
<li>Corsair 32GB Vengeance RAM</li>
<li>1TB M.2 WD SSD</li>
<li>NZXT Kraken M22</li>
</ul>
<p>The setup continues to evolve. Keep a check on my &quot;<a href="/uses">uses</a>&quot; page!</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1346211711976660996?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Advice For Complex CSS Illustrations</title>
    <link href="https://jhey.dev/writing/advice-for-complex-css-illustrations/"/>
    <updated>2020-06-20T18:00:00+01:00</updated>
    <id>https://jhey.dev/writing/advice-for-complex-css-illustrations/</id>
    <content type="html"><![CDATA[
      <p>If you were to ask me what question I hear most about front-end development, I’d say it’s <em>“How do I get better at CSS?”.</em> That question usually comes up after sharing a CSS illustration I have made. It’s something <a href="https://codepen.io/jh3y/pens/">I love to do over on CodePen</a>.</p>
<p>To many, CSS is this mythical beast that can’t be tamed. <a href="https://twitter.com/chriscoyier/status/1248088743002677248">This tweet</a> from Chris made me chuckle because, although ironic, there’s a lot of truth to it. That said, what if I told you that you were only a few properties and techniques away from creating anything you wanted? The truth is that you are indeed that close.</p>
<p>I’ve been wanting to compose an article like this for some time, but it’s a hard topic to cover because there are so many possibilities and so many techniques that there’s often more than one way to accomplish the same thing. The same is true with CSS illustrations. There’s no right or wrong way to do it. We’re all using the same canvas. There are simply so many different tools to get those pixels on the page.</p>
<p>While there is no “one size fits all” approach to CSS illustration, what I can offer is a set of techniques that might help you on your journey.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="mLaXRe"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/mLaXRe">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>Time and practice</h3>
<p>CSS illustration takes lots of time and practice. The more accurate you want to be and the more complicated the illustration, the longer it’s going to take. The time-consuming part isn’t usually deciding on <em>which</em> properties to use and how, but the <em>tinkering</em> of getting things to look right. <strong>Be prepared to get very familiar with the <a href="https://developers.google.com/web/tools/chrome-devtools/css">styles inspector</a> in your browser dev tools!</strong> I also recommend trying out <a href="https://chrome.google.com/webstore/detail/visbug/cdockenadnadldjbbgcallicgledbeoc?hl=en">VisBug</a> if you haven’t.</p>
<p>Two fantastic CSS artists are Ben Evans and Diana Smith. Both have recently talked about time consumption when referring to CSS illustration.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/cyanharlow/status/1265171727111217152?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Diana’s PureCSS Gaze took her two long weekends to complete. She talks about some of her techniques here and here. “If you have the time, patience, and drive, it is certainly possible,” she <a href="https://www.vice.com/en_us/article/9kgx7p/painting-made-with-code-html-pure-css-browser-art-diana-smith">says</a>.</p>
<p>I posted a meme-like picture about a cup and <a href="https://twitter.com/ivorjetski/status/1259893362129350658">Ben’s response</a> summed things up perfectly:</p>
<blockquote>
<p>I was tempted to create this in CSS when I first saw the tweet but then thought my reply would take about a month.</p>
</blockquote>
<p>It takes time!</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1259487385554911233?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h3>Tracing is perfectly acceptable</h3>
<p>We often have an idea of what it is that we want to illustrate. This article isn’t about design, after all. It’s about taking an image and rendering it with the DOM and CSS. I’m pretty sure this technique has been around since the dawn of time. But, it’s one I’ve been <a href="https://twitter.com/jh3yy/status/1258130582841757700">sharing</a> the last few months.</p>
<ul>
<li>Find or create an image of what it is you want to illustrate.</li>
<li>Pull it into your HTML with an <code>&lt;img&gt;</code> tag.</li>
<li>Position it in a way that it will sit underneath your illustration.</li>
<li>Reduce the image opacity so that it’s still visible but not too overpowering.</li>
<li>Trace it with the DOM.</li>
</ul>
<p>To my surprise, this technique <a href="https://twitter.com/therealpaulcook/status/1256283143587405824">isn’t common knowledge</a>. But it’s invaluable for creating accurate CSS illustrations.</p>
<p>See this trick in action here:</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1256281143244136448?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>And try it out here:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="OJMNVZR"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/OJMNVZR">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>Pay attention to responsiveness</h3>
<p>If there are two takeaway techniques to take from this article, let it be the “Tracing” one above and this next one.</p>
<p>There are some fantastic examples of CSS illustration out there. But the one unfortunate thing about some of them is that they aren’t styled — or even viewable — on small screens. We live in an age where first impressions with tech are important. Consider the example of a keyboard illustrated with CSS. Someone comes across your work, opens it up on their smartphone, and they’re greeted with only half the illustration or a small section of it. They probably missed the coolest parts of the demo!</p>
<p>Here’s my trick: <strong>leverage viewport units for your illustrations and create your own scaled unit.</strong></p>
<p>For sizing and positioning, you either have the option of using a scaled unit or percentage. This is particularly useful when you need to use a box shadow because the property accepts viewport units but not percentages.</p>
<p>Consider the CSS egghead.io logo I created above. I found the image I wanted to use and popped it in the DOM with an img tag.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>egghead.png<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span></span></code></pre>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">img</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 50vmin<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.25<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The height, 50vmin, is the desired size of the CSS illustration. The reduced opacity allows us to “trace” the illustration clearly as we progress.</p>
<p>Then, we create our scaled unit.</p>
<pre class="language-css"><code class="language-css"><span class="token comment">/**
<span class="highlight-line">  * image dimensions are 742 x 769</span>
<span class="highlight-line">  * width is 742</span>
<span class="highlight-line">  * height is 769</span>
<span class="highlight-line">  * my desired size is 50vmin</span>
*/</span>
<span class="highlight-line"><span class="token selector">:root</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--size</span><span class="token punctuation">:</span> 50<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--unit</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--size<span class="token punctuation">)</span> / 769<span class="token punctuation">)</span> * 1vmin<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>With the image dimensions in place, we can create a uniform unit that’s going to scale with our image. We know the height is the largest unit, so we use that as a base to create a fractional unit.</p>
<p>We get something like this:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token property">--unit</span><span class="token punctuation">:</span> 0.06501950585vmin<span class="token punctuation">;</span></span></code></pre>
<p>That looks awkward but, trust me, it’s fine. We can use this to size our illustration’s container using <code>calc()</code>.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.egg</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>769 * <span class="token function">var</span><span class="token punctuation">(</span>--unit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>742 * <span class="token function">var</span><span class="token punctuation">(</span>--unit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">z-index</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>If we use either percentages or our new <code>--unit</code> custom property to style elements within the container of our CSS illustration, we will get responsive CSS illustrations… and all it took was a few lines of math using CSS variables!</p>
<p>Resize this demo and you’ll see that everything stay in proportion always using 50vmin as the sizing constraint.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="rNOzYJZ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/rNOzYJZ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>Measure twice, cut once</h3>
<p>Another tip is to measure things. Heck, you van even grab a tape measure if you’re working with a physical object!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="BaNGKPw"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/BaNGKPw">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This may look a little funky but I measured this scene. It’s the TV combo unit I have in my lounge. Those measurements equate to centimeters. I used those to get a responsive unit based on the actual height of the TV. We can give that number — and all others — a name that makes it easy to remember what it’s for, thanks to custom properties.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">:root</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--light-switch</span><span class="token punctuation">:</span> 15<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--light-switch-border</span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--light-switch-top</span><span class="token punctuation">:</span> 15<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--light-switch-bottom</span><span class="token punctuation">:</span> 25<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--tv-bezel</span><span class="token punctuation">:</span> 15<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--tv-unit-bezel</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--desired-height</span><span class="token punctuation">:</span> 25vmin<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--one-cm</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--desired-height<span class="token punctuation">)</span> / <span class="token function">var</span><span class="token punctuation">(</span>--tv-height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--tv-width</span><span class="token punctuation">:</span> 158.1<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--tv-height</span><span class="token punctuation">:</span> 89.4<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--unit-height</span><span class="token punctuation">:</span> 42<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--unit-width</span><span class="token punctuation">:</span> 180<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--unit-top</span><span class="token punctuation">:</span> 78.7<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--tv-bottom</span><span class="token punctuation">:</span> 114.3<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--scaled-tv-width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--tv-width<span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--one-cm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--scaled-tv-height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--tv-height<span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--one-cm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--scaled-unit-width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--unit-width<span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--one-cm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--scaled-unit-height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--unit-height<span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--one-cm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>As soon as we calculate a variable, we can use it everywhere. I know my TV is 158.1cm wide and 89.4cm tall. I checked the manual. But in my CSS illustration, it will always scale to 25vmin.</p>
<h3>Use absolute positioning on all the things</h3>
<p>This one will save you a few keystrokes. More often than not, you’ll be looking to absolutely position elements. Save yourself and put this rule somewhere.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token comment">/* Your class name may vary */</span></span>
<span class="token selector">.css-illustration *,
<span class="highlight-line">.css-illustration *:after,</span>
<span class="highlight-line">.css-illustration *:before,</span>
<span class="highlight-line">.css-illustration:after,</span>
.css-illustration:before</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Your keyboard will thank you!</p>
<blockquote>
<p>Positioning is a tricky concept in CSS. You can <a href="https://css-tricks.com/almanac/properties/p/position/%23article-header-id-1">read up on it in the CSS Almanac</a> for more information on how to use it.</p>
</blockquote>
<p>Or, have a play with this little positioning playground:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="pogyJbw"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/pogyJbw">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>Stick to an approach</h3>
<p>This is by far the hardest thing to do. How do you approach a CSS illustration? Where do you even start? Should you start with the outermost part and work your way in? That doesn’t work so well.</p>
<p>Odds are that you’ll try some approaches and find a better way to go about it. You’ll certainly do a little back-and-forth but, the more you practice, the better you’ll get at spotting patterns and developing an approach that works best for you.</p>
<p>I tend to relate my approach to how you’d go about creating a vector image where illustrations are made up of layers. Split it up and sketch it on paper if you need to. But, start from the bottom and work your way up. This tends to mean larger shapes first, and finer details later. You can always tinker with the stacking index when you need to move elements around.</p>
<h3>Maintain a solid structure for your styles</h3>
<p>That leads us to the structure. Try to avoid a flat DOM structure for your illustration. Keeping things atomic makes it easier to move parts of your illustration. It will also makes it much easier to show and hide parts of the illustration or even animate them later. Consider the CSS Snorlax demo. The arms, feet, head, etc. are separate elements. That made animating the arm a lot easier than if I had tried to keep things together since I could simply apply the animation to the <code>.snorlax__arm-left</code> class.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="yLYXVJa"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/yLYXVJa">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Here’s a timelapse shot of me creating the demo:</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1255207715137339396?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h3>Handling awkward shapes</h3>
<p>There’s <a href="https://css-tricks.com/the-shapes-of-css/">a pretty good article</a> right here on CSS-Tricks for creating shapes with CSS. But what about more “awkward” shapes, like a long curve or even an outer curve? In these scenarios, we need to think outside the box. Properties such as <code>overflow</code>, <code>border-radius</code>, and <code>clip-path</code> are big helpers.</p>
<p>Consider this CSS Jigglypuff demo. Toggle the checkbox.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="gOaVJMB"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/gOaVJMB">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>That’s the key for creating curved shapes! We have an element much larger than the body with a <code>border-radius</code> applied. We then apply <code>overflow: hidden</code> to the body to cut that part off.</p>
<p>How might we create an outer curve? This one’s a little tricky. But a trick I like to use is a transparent element with a thick border. Then apply a <code>border-radius</code> and clip the excess, if required.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ZEbgNKO"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ZEbgNKO">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>If you hit the toggle, it reveals the element we are using to go across that corner. Another trick might be to overlay a circle that matches the background color. This is fine until we need to change the background color. It’s OK if you have a variable or something in place for that color. But, it could make things a little harder to maintain.</p>
<h3><code>clip-path</code> is your friend</h3>
<p>You might have noticed a couple of interesting CSS properties in that last demo, including clip-path. You’ll most likely need <a href="https://css-tricks.com/almanac/properties/c/clip-path/"><code>clip-path</code></a> if you want to create complex CSS shapes. It’s especially handy for cutting off bits of elements when hiding parent box overflow doesn’t do.</p>
<p>Here’s a little demo I built some time ago that showcases different <code>clip-path</code> possibilities.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="XqVQqa"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/XqVQqa">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>There’s also this demo that takes ideas from the <a href="https://css-tricks.com/the-shapes-of-css/">“Shapes of CSS”</a> article and re-created with <code>clip-path</code>.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="gOpLBEa"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/gOpLBEa">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3><code>border-radius</code> is your other friend</h3>
<p>You’re going to need <a href="https://css-tricks.com/almanac/properties/b/border-radius/"><code>border-radius</code></a> to create curves. One uncommon trick is to use a “double” syntax. This allows you to create a horizontal and vertical radius for each corner.</p>
<p>Play with this demo to really appreciate the power of <code>border-radius</code>. I advocate using percentages across the board in order keep things responsive.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="XWmvwYg"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/XWmvwYg">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>Shading techniques</h3>
<p>You’ve got all the shapes, everything is nicely laid out, and all the right colors are in place… but something still looks off. Odds are that it’s a lack of shading.</p>
<p>Shading adds depth and create a realistic feel. Consider this ecreation of a Gal Shir illustration. Gal is fantastic at using shades and gradients to make beautiful illustrations. I thought it would be fun to do a recreate it and include a switch that toggles the shading to see just what a difference it makes.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="OJMNyVg"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/OJMNyVg">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Shading effects are often created with a <code>box-shadow</code> and <code>background-image</code> combination.</p>
<p>The key thing with these properties is that we can stack them in a comma-separated list. For example, the cauldron in the demo has a list of gradients that are being used across the body.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.cauldron</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span></span>
<span class="highlight-line">    <span class="token function">radial-gradient</span><span class="token punctuation">(</span>25% 25% at 25% 55%<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--rim-color<span class="token punctuation">)</span><span class="token punctuation">,</span> transparent<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function">radial-gradient</span><span class="token punctuation">(</span>100% 100% at -2% 50%<span class="token punctuation">,</span> transparent<span class="token punctuation">,</span> transparent 92%<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--cauldron-color<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function">radial-gradient</span><span class="token punctuation">(</span>100% 100% at -5% 50%<span class="token punctuation">,</span> transparent<span class="token punctuation">,</span> transparent 80%<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--darkness<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function">linear-gradient</span><span class="token punctuation">(</span>310deg<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--inner-rim-color<span class="token punctuation">)</span> 25%<span class="token punctuation">,</span> transparent<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--cauldron-color<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Note that <code>radial-gradient()</code> and a <code>linear-gradient()</code> are being used here and not always with perfectly round numeric values. Again, those numbers are just fine. In fact, you’ll spend a lot of time tweaking and tinkering with things in the style inspector.</p>
<p>It’s generally the same working with <a href="https://css-tricks.com/snippets/css/css-box-shadow/"><code>box-shadow</code></a>. However, with that, we can also use the inset value to create tricky borders and additional depth.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.cauldron__opening</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">box-shadow</span><span class="token punctuation">:</span></span>
<span class="highlight-line">    0 0px <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--size<span class="token punctuation">)</span> * 0.05px<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--size<span class="token punctuation">)</span> * 0.005px<span class="token punctuation">)</span> <span class="token function">var</span><span class="token punctuation">(</span>--rim-color<span class="token punctuation">)</span> inset<span class="token punctuation">,</span></span>
<span class="highlight-line">    0 <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--size<span class="token punctuation">)</span> * 0.025px<span class="token punctuation">)</span> 0 <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--size<span class="token punctuation">)</span> * 0.025px<span class="token punctuation">)</span> <span class="token function">var</span><span class="token punctuation">(</span>--inner-rim-color<span class="token punctuation">)</span> inset<span class="token punctuation">,</span></span>
<span class="highlight-line">    0 10px 20px 0px <span class="token function">var</span><span class="token punctuation">(</span>--darkness<span class="token punctuation">)</span><span class="token punctuation">,</span> 0 10px 20px -10px <span class="token function">var</span><span class="token punctuation">(</span>--inner-rim-color<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>There are certainly times where it will make more sense to go with <a href="https://css-tricks.com/almanac/properties/f/filter/"><code>filter: drop-shadow()</code></a> instead to get the effect you want.</p>
<p>Lynn Fisher’s <a href="https://a.singlediv.com/">a.singlediv.com</a> is a brilliant example of these properties in action. Have a poke around on that site and inspect some of the illustrations for great ways to use <code>box-shadow</code> and <code>background-image</code> in illustrations.</p>
<p><code>box-shadow</code> is so powerful that you could create your entire illustration with it. I once joked about creating a CSS illustration of a dollar.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1252924614281486336?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>I used a generator to <a href="https://codepen.io/jh3y/details/eYpBwgN">create the illustration with a single div</a>. But Alvaro Montoro <a href="https://dev.to/alvaromontoro/drawing-a-single-element-dollar-bill-with-css-and-javascript-3mj4">took it a little further</a> and wrote a generator that does it with box-shadow instead.</p>
<h3>Preprocessors are super helpful</h3>
<p>While they aren’t required, using preprocessors can help keep your code neat and tidy. For example, Pug makes writing HTML faster, especially when it comes to using loops for dealing with a bunch of repeating elements. From there, <a href="https://css-tricks.com/the-power-and-fun-of-scope-with-css-custom-properties/">we can scope CSS custom properties</a> in a way that we only need to define styles once, then overwrite them where needed.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="xJXvjP"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/xJXvjP">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Here’s another example that demonstrates a DRY structure. The flowers are constructed with the same markup, but each has its own index class that is used to apply scoped CSS properties.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="eYpjXvj"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/eYpjXvj">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The first flower has these properties:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.flower--1</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--hue</span><span class="token punctuation">:</span> 190<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--y</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--size</span><span class="token punctuation">:</span> 125<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--r</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>It’s the first one, so all the others are based off it. Notice how the second flower is off to the right and up slightly. All that takes is assigning different values to the same custom properties:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.flower--2</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--hue</span><span class="token punctuation">:</span> 320<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--x</span><span class="token punctuation">:</span> 140<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--y</span><span class="token punctuation">:</span> -75<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--size</span><span class="token punctuation">:</span> 75<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--r</span><span class="token punctuation">:</span> 40<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1262856791873945601?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h3>That’s it!</h3>
<p>Go forth, use these tips, come up with your own, share them, and share your CSS masterpieces! And hey, if you have your own advice, please share that too! This is definitely the sort of thing that is learned through lots of trial and error — what works for me may look different from what works for you and we can learn from those different approaches.</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>React Hooks in 5 Minutes</title>
    <link href="https://jhey.dev/writing/react-hooks-in-~5-minutes/"/>
    <updated>2020-06-19T23:12:45+01:00</updated>
    <id>https://jhey.dev/writing/react-hooks-in-~5-minutes/</id>
    <content type="html"><![CDATA[
      <h2>What are they?</h2>
<p>A set of functions that provide a direct API to methods we access on <code>Component</code> instances. We can create stateful components or access the component lifecycle without <code>class</code> instances 🎉</p>
<p>For those in camp <strong>TL;DR</strong>, scroll down for a collection of demos 👍</p>
<h2>Jumping in 👟</h2>
<p>Consider this app that selects and displays a color value 🎨</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/qn13dc186snq9sjwxgxt.gif" alt="Select element that updates label content"></p>
<p>We need a <code>class</code> instance to add <code>state</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  Sea<span class="token operator">:</span> <span class="token string">'#a2ccb6'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  Sand<span class="token operator">:</span> <span class="token string">'#fc22b5'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  Peach<span class="token operator">:</span> <span class="token string">'#ee786e'</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    color<span class="token operator">:</span> colors<span class="token punctuation">.</span>Sea<span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> color <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state</span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>select</span>
<span class="highlight-line">          value<span class="token operator">=</span><span class="token punctuation">{</span>color<span class="token punctuation">}</span></span>
<span class="highlight-line">          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>color<span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">          <span class="token operator">></span></span>
<span class="highlight-line">          <span class="token punctuation">{</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span>option key<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">color--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token punctuation">{</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">              <span class="token punctuation">{</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span></span>
<span class="highlight-line">          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hex: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>But with hooks</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token operator">=</span> React</span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>color<span class="token punctuation">,</span> setColor<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>Sea<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>select value<span class="token operator">=</span><span class="token punctuation">{</span>color<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token function">setColor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>name<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hex: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p><code>useState</code> is a hook that allows us to use and update stateful values.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="NeLrjd"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/NeLrjd">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>useState</h2>
<p>The <code>useState</code> hook provides a stateful value and a way to update it. The argument is the default value. That value can be any type too! 👍</p>
<p>No need for a <code>class</code> instance 🙌</p>
<p>Don’t be afraid of that syntax. <code>useState</code> makes use of <code>Array</code> destructuring.</p>
<p>It’s equal to</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>Colors<span class="token punctuation">.</span>Sea<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> color <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="highlight-line"><span class="token keyword">const</span> setColor <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span></code></pre>
<h2>Why not class? 📗</h2>
<ul>
<li>Minification isn’t great.</li>
<li>Loss of context where classes try to take on too much.</li>
<li>Poor separation of concerns in lifecycle methods.</li>
<li>Requires unstable syntax transforms for <code>class</code> properties.</li>
<li>HMR issues.</li>
<li>Subjective use cases, when to use as opposed to stateless function.</li>
</ul>
<p>If classes work for you, no need to change. Hooks aren’t replacing classes.</p>
<h2>Other hooks</h2>
<p>There are several hooks. The ones you’ll likely spend the most time with are <code>useState</code> and <code>useEffect</code>. Check out the others in the <a href="https://reactjs.org/docs/hooks-reference.html">Hooks reference</a>.</p>
<h2>useEffect</h2>
<p>We use this hook when we want to hook into lifecycle stages.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">useEffect <span class="token operator">===</span> componentDidMount <span class="token operator">+</span> componentDidUpdate <span class="token operator">+</span> componentWillUnmount</span></code></pre>
<p>We pass a function to the <code>useEffect</code> hook that runs on every render.</p>
<p>Let’s update our color choosing app from earlier using <code>useEffect</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>color<span class="token punctuation">,</span> setColor<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>Sea<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> color</span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>select value<span class="token operator">=</span><span class="token punctuation">{</span>color<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token function">setColor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>name<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>option key<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">color--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">            <span class="token punctuation">{</span>name<span class="token punctuation">}</span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span>color<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span></code></pre>
<p>Now when the state is updated the body color will change 👍</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/g6lk2x55xmkqwnt102ag.gif" alt="Select element that changes background color"></p>
<p>That’s running every render? Yep. It doesn’t have to though. There’s an optional second parameter for <code>useEffect</code>. You can pass an <code>Array</code> of values and if those values don’t change between render, the effects won’t execute. An empty <code>Array</code> would mean that the effect only runs once. But in most cases, there's a <a href="https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects">better solution</a> to achieve that result,</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function">useEffect</span><span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> color</span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">[</span>color<span class="token punctuation">]</span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>Now we only set the background when <code>color</code> changes 👍 In this example it will still run every render though as <code>color</code> is the only thing triggering a render.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="NeLrxr"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/NeLrxr">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>If we had a second stateful value, we could see that optional parameter in action. Let’s add a counter value that increments on button click.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>color<span class="token punctuation">,</span> setColor<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>Sea<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// Only run when color is updated 👍</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Color changed'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> color</span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">[</span>color<span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>select value<span class="token operator">=</span><span class="token punctuation">{</span>color<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token function">setColor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>name<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>option key<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">color--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">            <span class="token punctuation">{</span>name<span class="token punctuation">}</span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span>color<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>Increment Count<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That <code>console.info</code> will only fire when color changes 👍</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="bzGaZa"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/bzGaZa">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>How about other effects such as making API requests or binding user input?</p>
<p>Let’s make a small app that tracks mouse movement.</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/lyjpclh8i5ky3995chr7.gif" alt="Mouse moving around the screen and updating on-screen labels with position"></p>
<p>We use <code>useEffect</code> to bind mouse movement to update some stateful values.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> setX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> setY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token function">setX</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>x<span class="token punctuation">)</span></span>
<span class="highlight-line">        <span class="token function">setY</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>y<span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span></span>
<span class="highlight-line">      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">[</span>setX<span class="token punctuation">,</span> setY<span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> x <span class="token operator">&amp;&amp;</span> y <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">x: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; y: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>How do we clear up that bind if the component becomes unmounted? We can return a function from our <code>useEffect</code> function for clean up.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function">useEffect</span><span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token function">setX</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>x<span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token function">setY</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>y<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">[</span>setX<span class="token punctuation">,</span> setY<span class="token punctuation">]</span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>Nice 👊</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="pqOmME"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/pqOmME">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h1>Separation of concerns</h1>
<p>Hooks allow us to have a better separation of concerns.</p>
<p>Ever seen a <code>class</code> lifecycle method where a lot seems to be going on?</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function-variable function">componentDidMount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">makeSomeAPIRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">makeOtherAPIRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">bindTouchListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">bindClickEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">doOtherUnrelatedStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We can avoid this with hooks. As long as our hooks are at the top level we can use as many as we like.</p>
<p>Consider updating our app to also listen for <code>resize</code> events. We don’t need this to happen in our <code>mousemove</code> effect. We can create a separate one. This is a good habit to get into. Especially when we start creating custom hooks.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>dimensions<span class="token punctuation">,</span> setDimensions<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token function">getDimensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> setX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> setY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// Effect for mousemove</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token function">setX</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>x<span class="token punctuation">)</span></span>
<span class="highlight-line">        <span class="token function">setY</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>y<span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span></span>
<span class="highlight-line">      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">[</span>setX<span class="token punctuation">,</span> setY<span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// Effect for window resizing</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">const</span> <span class="token function-variable function">updateSize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setDimensions</span><span class="token punctuation">(</span><span class="token function">getDimensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> updateSize<span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> updateSize<span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">[</span>setDimensions<span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token punctuation">{</span>x <span class="token operator">&amp;&amp;</span> y <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">x: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; y: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>h1<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Height: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dimensions<span class="token punctuation">.</span>height<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; Width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dimensions<span class="token punctuation">.</span>width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Here's a demo 👍</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="zyeYaZ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/zyeYaZ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Creating custom hooks</h2>
<p>The component in that last example is starting to grow. One of Hook’s greatest attributes is that we can extract their use into custom hooks.</p>
<p>This is a big sell for hooks. You may be familiar with <code>Higher Order Components</code> and <code>render</code> props. We often need a certain structure or style that can prove hard to maintain or justify. This isn’t the case using Hooks.</p>
<p>Consider our example. Tracking mouse movement could be common in our application. Sharing that logic would be ideal. Let’s do it!</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">useMousePosition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> setX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> setY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token function">setX</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>x<span class="token punctuation">)</span></span>
<span class="highlight-line">        <span class="token function">setY</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>y<span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span></span>
<span class="highlight-line">      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">[</span>setX<span class="token punctuation">,</span> setY<span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Note how our new custom hook returns the current state value. Now any component could use this custom hook to grab the mouse position.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> x <span class="token operator">&amp;&amp;</span> y <span class="token operator">?</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">x: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; y: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span> <span class="token operator">:</span> <span class="token keyword">null</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now we have logic we can share across other components 💪</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="bGNaEJQ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/bGNaEJQ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Let’s consider another example. We have various watches. They look different but they all use the same time ⌚️ We could have a custom hook for grabbing the time. Here’s an example;</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="REePOq"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/REePOq">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>DOs 👍</h2>
<ul>
<li>Use when you need to hook into state or a lifecycle stage</li>
<li>Separate concerns with hooks</li>
</ul>
<h2>DON’Ts 👎</h2>
<ul>
<li>Use in loops</li>
<li>Nest them</li>
<li>Use them based on conditions.</li>
</ul>
<h2>NOTES ⚠️</h2>
<ul>
<li>Available as of react@16.7.0-alpha</li>
<li>No breaking changes 🙌</li>
<li>eslint-plugin-react-hooks@next 👍</li>
</ul>
<h2>That’s it!</h2>
<p>A 5 minute intro to React Hooks!</p>
<ul>
<li>Dive further <a href="https://reactjs.org/docs/hooks-intro.html">here</a></li>
<li>Grab all the code <a href="https://codepen.io/collection/DowNNY/">here</a></li>
</ul>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>React&#39;s Render Props in 3 Minutes</title>
    <link href="https://jhey.dev/writing/reacts-render-props-in-3-minutes/"/>
    <updated>2020-05-22T04:45:04+01:00</updated>
    <id>https://jhey.dev/writing/reacts-render-props-in-3-minutes/</id>
    <content type="html"><![CDATA[
      <blockquote>
<p>Grasp this useful technique whilst making some watches ⌚️</p>
</blockquote>
<h2>What is it?</h2>
<p>A technique for sharing logic between components. Components accept a prop that returns a function responsible for rendering something. This allows our component to focus on other logic.</p>
<p>For those in camp <strong>TL;DR</strong>, scroll down for a demo 👍</p>
<h2>What do they do?</h2>
<p>Handle some or all the rendering logic for a component.</p>
<pre class="language-js"><code class="language-js"><span class="highlight-line"><span class="token operator">&lt;</span>SomeDataProvider</span>
<span class="highlight-line">  render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>AwesomeComponent stuff<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>awesome<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token operator">/</span><span class="token operator">></span></span></code></pre>
<h2>When to use?</h2>
<p>When you’re repeating patterns/logic across components.</p>
<p>Examples;</p>
<ul>
<li>Repeating UI structures</li>
<li>Hooking into/subscribing to a data source</li>
<li>Hooking into global events (scroll, resize, etc.)</li>
</ul>
<h2>A Silly Example</h2>
<p>Let’s create a watch ⌚️ Our watch component will use <code>moment.js</code>, a date and time utility library.</p>
<p>Every <code>1000ms</code> we set the state to a new <code>Moment</code>. The state change triggers a render and we display the time.</p>
<pre class="language-js"><code class="language-js"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Watch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>date<span class="token punctuation">,</span> setDate<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token constant">TICK</span> <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setDate</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token constant">TICK</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Strap<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Bezel<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>Screen<span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Face<span class="token operator">></span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token punctuation">{</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'HH'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Value<span class="token operator">></span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token punctuation">{</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'mm'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Value<span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span><span class="token operator">/</span>Face<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span><span class="token operator">/</span>Screen<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>Bezel<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Strap<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="MWaLxPy"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/MWaLxPy">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Don’t worry about <code>Strap</code>, <code>Bezel</code>, <code>Screen</code>, etc. or any of the styling. We are <strong>only</strong> concerned with the technique.</p>
<p>But what if we wanted a watch with a different face? Many wearables allow us to change the watch face. Do we create a new <code>Watch</code> variation for each face? No 👎</p>
<p>This is where a <code>render</code> prop comes into play. We can adjust <code>Watch</code> to utilise one for rendering a watch face. <code>Watch</code> becomes a component that provides the current time and passes that to a <code>render</code> prop.</p>
<pre class="language-js"><code class="language-js"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Watch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>face<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>date<span class="token punctuation">,</span> setDate<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token constant">TICK</span> <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setDate</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token constant">TICK</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Strap<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Bezel<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>Screen<span class="token operator">></span></span>
<span class="highlight-line">          <span class="token punctuation">{</span><span class="token function">face</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span><span class="token operator">/</span>Screen<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>Bezel<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Strap<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now we can create stateless face components that take a <code>Moment</code> and render it in different ways.</p>
<p>Extracting our initial implementation might look something like</p>
<pre><code>const CustomFace = date =&gt; (
  &lt;Face&gt;
    &lt;Value&gt;{date.format('HH')}&lt;/Value&gt;
    &lt;Value&gt;{date.format('mm')}&lt;/Value&gt;
  &lt;/Face&gt;
)
// JSX to render being &lt;Watch face={CustomFace} /&gt;
</code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="oNjmryp"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/oNjmryp">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>What if we don’t pass in <code>face</code>? We’d get a blank watch. But we could rename <code>CustomFace</code> to <code>DefaultFace</code> and make it a <code>defaultProp</code> on <code>Watch</code> 👍</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="bGVzPOX"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/bGVzPOX">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Nice 👍</p>
<p>Let’s create a new face. An analog one 🕔</p>
<pre class="language-js"><code class="language-js"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">AnalogFace</span> <span class="token operator">=</span> <span class="token parameter">date</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> seconds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">360</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">*</span> date<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> minutes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">360</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">*</span> date<span class="token punctuation">.</span><span class="token function">minutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> hours <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">360</span> <span class="token operator">/</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">*</span> date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Face<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Hand type<span class="token operator">=</span><span class="token string">'seconds'</span> value<span class="token operator">=</span><span class="token punctuation">{</span>seconds<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Hand type<span class="token operator">=</span><span class="token string">'minutes'</span> value<span class="token operator">=</span><span class="token punctuation">{</span>minutes<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Hand value<span class="token operator">=</span><span class="token punctuation">{</span>hours<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Face<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This one takes the date and displays it with hands ✋</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="abvXgxL"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/abvXgxL">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We could then extend this to create a slew of different watch faces 🤓 No need to repeat the logic.</p>
<pre class="language-js"><code class="language-js"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Watch face<span class="token operator">=</span><span class="token punctuation">{</span>DayFace<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Watch <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Watch face<span class="token operator">=</span><span class="token punctuation">{</span>AnalogFace<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Watch face<span class="token operator">=</span><span class="token punctuation">{</span>DateFace<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Watch face<span class="token operator">=</span><span class="token punctuation">{</span>SecondsFace<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token constant">ROOT</span><span class="token punctuation">)</span></span></code></pre>
<p>Giving us</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="JjYxgjp"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/JjYxgjp">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>And that’s it!</p>
<p>Using a <code>render</code> prop on our <code>Watch</code> component keeps the logic in one place and stops us from repeating ourselves. This makes things easier to maintain and reuse 💪</p>
<h2>DOs 👍</h2>
<ul>
<li>Use when there’s an opportunity to share component/render logic</li>
</ul>
<h2>DON’Ts 👎</h2>
<ul>
<li>Overuse. Another pattern may be more appropriate.</li>
<li>Avoid implementing <code>render</code> props with <code>PureComponent</code>s unless your prop is statically defined</li>
</ul>
<h2>NOTES ⚠️</h2>
<ul>
<li>A <code>render</code> prop can have any name. <code>children</code> is a <code>render</code> prop.</li>
<li>Most components using a <code>render</code> prop could also be a higher-order component and vice versa!</li>
</ul>
<h2>That’s it!</h2>
<p>A 3-minute intro to <code>render</code> props!</p>
<p>For further reading, check out the <a href="https://reactjs.org/docs/render-props.html">React Docs</a>.</p>
<p>All the demos are available in this <a href="https://codepen.io/collection/DmpkEB">CodePen collection</a>.</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Pug in 5 Minutes</title>
    <link href="https://jhey.dev/writing/pug-in-5-minutes/"/>
    <updated>2020-05-13T17:58:36+01:00</updated>
    <id>https://jhey.dev/writing/pug-in-5-minutes/</id>
    <content type="html"><![CDATA[
      <h2>What is it?</h2>
<p>A template engine for node and browser environments.</p>
<p>It uses an indent sensitive syntax allowing you to write clean markup with less code 😎</p>
<p>For those in camp <strong>TL;DR</strong>, scroll down for demos! 😎</p>
<h2>Jumping in 👟</h2>
<p>An element follows this structure</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag">input<span class="token attr-id">#check</span><span class="token attr-class">.checkbox</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">checked</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"true"</span></span><span class="token punctuation">)</span></span></span></span></code></pre>
<ul>
<li>Text at the start of a line with no special character prefix is treated as a tag. If no tag is defined, <code>pug</code> defaults to <code>div</code></li>
<li>Define classes prefixed with <code>.</code></li>
<li>Define an id prefixed with <code>#</code></li>
<li>Define attributes optionally comma-separated within the brackets</li>
</ul>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>check<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span></code></pre>
<p>If we wanted a <code>div</code> with the class <code>flower</code>, we only need</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag"><span class="token attr-class">.flower</span></span></span></code></pre>
<p>You can write comments with <code>//</code>(included in output) and <code>//-</code>(not included in output).</p>
<h2>Nesting content</h2>
<p>To nest an element, indent it!</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag"><span class="token attr-class">.parent</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.child</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.grandchild</span></span></span></code></pre>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grandchild<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>Think of the keystroke savings! 🙏</p>
<p>If you need to include plain text within an element, suffix with <code>.</code> 👍</p>
<pre class="language-pug"><code class="language-pug"><span class="token tag">script</span><span class="token punctuation">.</span><span class="token multiline-script">
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAwesome</span><span class="token punctuation">(</span>pug<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
    <span class="token keyword">return</span> <span class="token string">"Hell yeah!"</span></span></code></pre>
<h2>Inheritance via extends and blocks</h2>
<p>Pug supports template inheritance via <code>extends</code> and <code>blocks</code>. The common example is a layout extension.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token comment">//- layout.pug</span></span>
<span class="highlight-line"><span class="token tag">html</span></span>
<span class="highlight-line">  <span class="token tag">head</span></span>
<span class="highlight-line">    <span class="token tag">title</span> <span class="token plain-text">Awesome site</span></span>
<span class="highlight-line">  <span class="token tag">body</span></span>
<span class="highlight-line">    <span class="token keyword">block content</span></span></code></pre>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token comment">//- home.pug</span></span>
<span class="highlight-line"><span class="token keyword">extends layout.pug</span></span>
<span class="highlight-line"><span class="token keyword">block content</span></span>
<span class="highlight-line">  <span class="token tag">h1</span> <span class="token plain-text">Welcome to my awesome site!</span></span></code></pre>
<p>Giving us</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Awesome site<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome to an awesome site!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre>
<h2>Includes</h2>
<p>To stop our pug files from growing out of control, we can split them into separate files and <code>include</code> them.</p>
<p>Consider a layout where we &quot;include&quot; a menu section of markup.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token comment">//- layout.pug</span></span>
<span class="highlight-line"><span class="token tag">html</span></span>
<span class="highlight-line">  <span class="token tag">head</span></span>
<span class="highlight-line">    <span class="token tag">title</span> <span class="token plain-text">Some awesome site!</span></span>
<span class="highlight-line">  <span class="token tag">body</span></span>
<span class="highlight-line">    <span class="token keyword">include menu.pug</span></span>
<span class="highlight-line">    <span class="token tag">main</span></span>
<span class="highlight-line">      <span class="token keyword">block content</span></span></code></pre>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token comment">//- menu.pug</span></span>
<span class="highlight-line"><span class="token tag">nav</span></span>
<span class="highlight-line">  <span class="token tag">ul</span></span>
<span class="highlight-line">    <span class="token tag">li</span></span>
<span class="highlight-line">      <span class="token tag">a<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">href</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"/"</span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">Home</span></span>
<span class="highlight-line">    <span class="token tag">li</span></span>
<span class="highlight-line">      <span class="token tag">a<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">href</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"/about"</span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">About</span></span></code></pre>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Some awesome site!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre>
<h2>Inline code 🤓</h2>
<p>You can use valid JavaScript within Pug templates. There are various ways to do this.</p>
<ul>
<li><code>Unbuffered</code> - Code prefixed with <code>-</code> is not included in the output</li>
<li><code>Buffered</code> - Code prefixed with <code>=</code> is evaluated and output is included</li>
</ul>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token attr-class">.number</span></span><span class="token punctuation">=</span><span class="token code"> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Random number is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>random<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span></span></code></pre>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Random number is 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>This opens up a bunch of possibilities we'll explore in our example! 😎</p>
<h2>Interpolation</h2>
<p>Need to interpolate a variable? There are two ways. You could use Pugs interpolation operator <code>#{}</code>. But, if you're using inline code, you could also use unbuffered code 😎</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Geoff'</span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token attr-class">.greeting</span></span> <span class="token plain-text">Hey #{name}!</span></span>
<span class="highlight-line"><span class="token tag"><span class="token attr-class">.greeting</span></span><span class="token punctuation">=</span><span class="token code"> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hey </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span></span></span></code></pre>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>greeting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hey Geoff!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<h2>Conditionals</h2>
<p>Pug provides conditional operators that feel familiar to those we use elsewhere. Alternatively, we could use <code>Unbuffered</code> code to achieve the same result 😎</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> balance <span class="token operator">=</span> <span class="token number">100</span></span></span>
<span class="highlight-line"><span class="token flow-control"><span class="token branch keyword">if</span> balance <span class="token operator">>=</span> <span class="token number">50</span></span></span>
<span class="highlight-line">  <span class="token tag">span</span> <span class="token plain-text">Nice!</span></span>
<span class="highlight-line"><span class="token flow-control"><span class="token branch keyword">else</span> <span class="token keyword">if</span> balance <span class="token operator">>=</span> <span class="token number">0</span></span></span>
<span class="highlight-line">  <span class="token tag">span</span> <span class="token plain-text">Cool</span></span>
<span class="highlight-line"><span class="token flow-control"><span class="token branch keyword">else</span></span></span>
<span class="highlight-line">  <span class="token tag">span</span> <span class="token plain-text">Uh oh!</span></span></code></pre>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Nice!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span></code></pre>
<h2>Iteration</h2>
<p>Two main operators for iteration in Pug are <code>each</code> and <code>while</code>.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag">ul<span class="token attr-class">.week</span></span></span>
<span class="highlight-line">  <span class="token flow-control"><span class="token each"><span class="token keyword">each</span> day <span class="token keyword">in</span></span> <span class="token punctuation">[</span><span class="token string">'Sun'</span><span class="token punctuation">,</span> <span class="token string">'Mon'</span><span class="token punctuation">,</span> <span class="token string">'Tue'</span><span class="token punctuation">,</span> <span class="token string">'Wed'</span><span class="token punctuation">,</span> <span class="token string">'Thu'</span><span class="token punctuation">,</span> <span class="token string">'Fri'</span><span class="token punctuation">,</span> <span class="token string">'Sat'</span><span class="token punctuation">]</span></span></span>
<span class="highlight-line">    <span class="token tag">li<span class="token attr-class">.week__day</span></span><span class="token punctuation">=</span><span class="token code"> day<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></code></pre>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>week<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>week__day<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>SUN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>week__day<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>MON<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>week__day<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>TUE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>week__day<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>WED<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>week__day<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>THU<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>week__day<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>FRI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>week__day<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>SAT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span></code></pre>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">0</span></span></span>
<span class="highlight-line"><span class="token flow-control"><span class="token branch keyword">while</span> b <span class="token operator">&lt;</span> <span class="token number">5</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.balloon</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> b<span class="token operator">++</span></span></span></code></pre>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>balloon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>balloon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>balloon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>balloon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>balloon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>As with conditionals, we could use <code>Unbuffered</code> code to achieve the same results 👍</p>
<h2>Mixins</h2>
<p>Mixins are a powerful feature of Pug. They're reusable blocks of Pug that can either be static, accept params, or take blocks.</p>
<p>We invoke a mixin with <code>+</code>.</p>
<p>When we find repeating patterns in our markup, it could be time for a mixin!</p>
<p>Here's a static mixin.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token mixin"><span class="token keyword">mixin</span> <span class="token function">socials</span></span></span>
<span class="highlight-line">  <span class="token tag">li</span></span>
<span class="highlight-line">    <span class="token tag">a<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">href</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">'https://dev.to/jh3y'</span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">Check out some articles!</span></span>
<span class="highlight-line">  <span class="token tag">li</span></span>
<span class="highlight-line">    <span class="token tag">a<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">href</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">'https://codepen.io/jh3y'</span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">Check out some code!</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token tag">footer</span></span>
<span class="highlight-line">  <span class="token tag">ul</span></span>
<span class="highlight-line">    <span class="token mixin"><span class="token name function">+socials</span></span></span></code></pre>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://dev.to/jh3y<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Check out some articles!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://codepen.io/jh3y<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Check out some code!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span></span></code></pre>
<p>That's cool but mixins that accept params will be more useful 💪</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token mixin"><span class="token keyword">mixin</span> <span class="token function">card</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> avatar = 'https://placehold<span class="token punctuation">.</span>it/400x400'<span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.card</span></span></span>
<span class="highlight-line">    <span class="token tag">img<span class="token attr-class">.card__image</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">src</span><span class="token punctuation">=</span> <span class="token attr-value">avatar</span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">    <span class="token tag">h2<span class="token attr-class">.card__title</span></span><span class="token punctuation">=</span><span class="token code"> name</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token mixin"><span class="token name function">+card</span><span class="token punctuation">(</span><span class="token string">'Geoff'</span><span class="token punctuation">,</span> <span class="token string">'https://some-image.com/geoff.png'</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line"><span class="token mixin"><span class="token name function">+card</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span></span></span></code></pre>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card__image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://some-image.com/geoff.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card__title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Geoff<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card__image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://placehold.it/400x400<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card__title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>Notice how we can also provide default values for those params! 🤓</p>
<p>If you want a <code>mixin</code> but need different nested markup for certain cases, then a mixin block will work.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token mixin"><span class="token keyword">mixin</span> <span class="token function">card</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> avatar = 'https://placehold<span class="token punctuation">.</span>it/400x400'<span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.card</span></span></span>
<span class="highlight-line">    <span class="token tag">img<span class="token attr-class">.card__image</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">src</span><span class="token punctuation">=</span> <span class="token attr-value">avatar</span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">    <span class="token tag">h2<span class="token attr-class">.card__title</span></span><span class="token punctuation">=</span><span class="token code"> name</span></span>
<span class="highlight-line">    <span class="token flow-control"><span class="token branch keyword">if</span> block</span></span>
<span class="highlight-line">      <span class="token tag">block</span></span>
<span class="highlight-line"><span class="token mixin"><span class="token name function">+card</span><span class="token punctuation">(</span><span class="token string">'Stu'</span><span class="token punctuation">,</span> <span class="token string">'https://stu.com/avatar.png'</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.card__badge</span></span> <span class="token plain-text">User of the month!</span></span></code></pre>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card__image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://stu.com/avatar.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card__title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Stu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card__badge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User of the month!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<h2>Hot tip! 🔥</h2>
<p>You can use JavaScript template literals for inline styles to generate dynamic demos 😎</p>
<h2>An example - Randomly generated flowers 🌼</h2>
<p>Let's put some techniques into practice. Here's a styled up flower.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="wvKxzdQ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/wvKxzdQ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Quite a bit of pug there 👎</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag"><span class="token attr-class">.flower</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.flower__petal</span><span class="token attr-class">.flower__petal--0</span></span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.flower__petal</span><span class="token attr-class">.flower__petal--1</span></span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.flower__petal</span><span class="token attr-class">.flower__petal--2</span></span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.flower__petal</span><span class="token attr-class">.flower__petal--3</span></span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">    <span class="token tag">div</span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.flower__core</span></span></span></code></pre>
<p>Let's refactor that! 😎</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token mixin"><span class="token keyword">mixin</span> <span class="token function">flower</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.flower</span></span></span>
<span class="highlight-line">    <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token number">0</span></span></span>
<span class="highlight-line">    <span class="token flow-control"><span class="token branch keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token attr-class">.flower__petal</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">class</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">flower__petal--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>p<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">        <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token number">0</span></span></span>
<span class="highlight-line">        <span class="token flow-control"><span class="token branch keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">          <span class="token tag">div</span></span>
<span class="highlight-line">          <span class="token punctuation">-</span><span class="token code"> s<span class="token operator">++</span></span></span>
<span class="highlight-line">      <span class="token punctuation">-</span><span class="token code"> p<span class="token operator">++</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.flower__core</span></span></span>
<span class="highlight-line"><span class="token mixin"><span class="token name function">+flower</span></span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="GRpBjyG"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/GRpBjyG">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>That's great! But we could take it further. Let's generate random inline CSS variables for our flower. We could define its position with a generated inline <code>--x</code> and <code>--y</code> 😎</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="RwWBGyy"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/RwWBGyy">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Example markup generated with a random <code>--x</code> and <code>--y</code> 👍</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flower<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--x</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token property">--y</span><span class="token punctuation">:</span> 85<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>Once we start leveraging <code>Pug</code> and <code>CSS</code> together like this, it opens up a bunch of possibilities. Check this out!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="XWmBjOp"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/XWmBjOp">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We utilize a <code>while</code> loop and generate random characteristics to be passed into each flower element 🤓</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token number">0</span></span></span>
<span class="highlight-line"><span class="token flow-control"><span class="token branch keyword">while</span> f <span class="token operator">&lt;</span> <span class="token number">50</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">randomInRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">randomInRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> hue <span class="token operator">=</span> <span class="token function">randomInRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token function">randomInRange</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> rotation <span class="token operator">=</span> <span class="token function">randomInRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> delay <span class="token operator">=</span> f <span class="token operator">*</span> <span class="token number">0.1</span></span></span>
<span class="highlight-line">  <span class="token mixin"><span class="token name function">+flower</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> hue<span class="token punctuation">,</span> size<span class="token punctuation">,</span> rotation<span class="token punctuation">,</span> delay<span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> f<span class="token operator">++</span></span></span></code></pre>
<h2>That's it!</h2>
<p>In 5 minutes you now know enough <code>Pug</code> to be well on your way to speeding up your markup generation.</p>
<p>You can also leverage some of <code>Pug</code>s awesome features to speed things up, mitigate errors, and randomly generate demos! 🔥</p>
<p>Have fun!</p>
<p>All the demos in this article are available in this <a href="https://codepen.io/collection/XEoWvj">CodePen collection</a>.</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Create a Responsive CSS Motion Path? Sure We Can!</title>
    <link href="https://jhey.dev/writing/create-a-responsive-css-motion-path-sure-we-can/"/>
    <updated>2020-04-15T18:31:08+01:00</updated>
    <id>https://jhey.dev/writing/create-a-responsive-css-motion-path-sure-we-can/</id>
    <content type="html"><![CDATA[
      <p>There was a discussion recently on the <a href="https://damp-lake-50659.herokuapp.com/">Animation at Work Slack</a>: <em>how could you make a CSS motion path responsive?</em> What techniques would work? This got me thinking.</p>
<p>A CSS motion path allows us to animate elements along custom user-defined paths. Those paths follow the same structure as SVG paths. We define a path for an element using <code>offset-path</code>.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.block</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">offset-path</span><span class="token punctuation">:</span> <span class="token function">path</span><span class="token punctuation">(</span><span class="token string">'M20,20 C20,100 200,0 200,100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>These values appear relative at first and they would be if we were using SVG. But, when used in an <a href="https://css-tricks.com/almanac/properties/o/offset-path/"><code>offset-path</code></a>, <strong>they behave like px units.</strong> This is exactly the problem. Pixel units aren’t really responsive. This path won’t flex as the element it is in gets smaller or larger. Let’s figure this out.</p>
<p>To set the stage, the <code>offset-distance</code> property dictates where an element should be on that path:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="cd95c54d57891b095df99eaa02cdbd67"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/cd95c54d57891b095df99eaa02cdbd67">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Not only can we define the distance an element is along a path, but we can also define an element’s rotation with offset-rotate. The default value is auto which results in our element following the path. Check out the property’s <a href="https://css-tricks.com/almanac/properties/o/offset-rotate/">almanac article</a> for more values.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="d5aa1448cb745c1affe9fd6786958053"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/d5aa1448cb745c1affe9fd6786958053">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>To animate an element along the path, we animate the <code>offset-distance</code>:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="df6858993397f31e2d15dba096bc75c2"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/df6858993397f31e2d15dba096bc75c2">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>OK, that catches up to speed on moving elements along a path. Now we have to answer…</p>
<h3>Can we make responsive paths?</h3>
<p>The sticking point with CSS motion paths is the hardcoded nature. It’s not flexible. We are stuck hardcoding paths for particular dimensions and viewport sizes. A path that animates an element 600px, will animate that element 600px regardless of whether the viewport is 300px or 3440px wide.</p>
<p><video src="/assets/video/rwd-motion-path.mp4" muted controls></video></p>
<p>This differs from what we are familiar with when using SVG paths. They will scale with the size of the SVG viewbox.</p>
<p>Try resizing this next demo below and you’ll see:</p>
<ul>
<li>The SVG will scale with the viewport size as will the contained path.</li>
<li>The offset-path <strong>does not</strong> scale and the element goes off course.</li>
</ul>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="9fa8d87f764fbb682732b81985a87d5a"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/9fa8d87f764fbb682732b81985a87d5a">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This could be okay for simpler paths. But once our paths become more complicated, it will be hard to maintain. Especially if we wish to use paths we’ve created in vector drawing applications.</p>
<p>For example, consider the path we worked with earlier:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.element</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--path</span><span class="token punctuation">:</span> <span class="token string">'M20,20 C20,100 200,0 200,100'</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">offset-path</span><span class="token punctuation">:</span> <span class="token function">path</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>To scale that up to a different container size, we would need to work out the path ourselves, then apply that path at different breakpoints. But even with this “simple” path, is it a case of multiplying all the path values? Will that give us the right scaling?</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span><span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.element</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--path</span><span class="token punctuation">:</span> <span class="token string">'M40,40 C40,200 400,0 400,200'</span><span class="token punctuation">;</span> // ????</span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>A more complex path such as one drawn in a vector application is going to be trickier to maintain. It will need the developer to open the application, rescale the path, export it, and integrate it with the CSS. This will need to happen for all container size variations. It’s not the worst solution, but it does require a level of maintenance that we might not want to get ourselves into.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.element</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--path</span><span class="token punctuation">:</span> <span class="token string">'M40,228.75L55.729166666666664,197.29166666666666C71.45833333333333,165.83333333333334,102.91666666666667,102.91666666666667,134.375,102.91666666666667C165.83333333333334,102.91666666666667,197.29166666666666,165.83333333333334,228.75,228.75C260.2083333333333,291.6666666666667,291.6666666666667,354.5833333333333,323.125,354.5833333333333C354.5833333333333,354.5833333333333,386.0416666666667,291.6666666666667,401.7708333333333,260.2083333333333L417.5,228.75'</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">offset-path</span><span class="token punctuation">:</span> <span class="token function">path</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span><span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.element</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--path</span><span class="token punctuation">:</span> <span class="token string">'M40,223.875L55.322916666666664,193.22916666666666C70.64583333333333,162.58333333333334,101.29166666666667,101.29166666666667,131.9375,101.29166666666667C162.58333333333334,101.29166666666667,193.22916666666666,162.58333333333334,223.875,223.875C254.52083333333334,285.1666666666667,285.1666666666667,346.4583333333333,315.8125,346.4583333333333C346.4583333333333,346.4583333333333,377.1041666666667,285.1666666666667,392.4270833333333,254.52083333333334L407.75,223.875'</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span><span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.element</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">--path</span><span class="token punctuation">:</span> <span class="token string">'M40,221.625L55.135416666666664,191.35416666666666C70.27083333333333,161.08333333333334,100.54166666666667,100.54166666666667,130.8125,100.54166666666667C161.08333333333334,100.54166666666667,191.35416666666666,161.08333333333334,221.625,221.625C251.89583333333334,282.1666666666667,282.1666666666667,342.7083333333333,312.4375,342.7083333333333C342.7083333333333,342.7083333333333,372.9791666666667,282.1666666666667,388.1145833333333,251.89583333333334L403.25,221.625'</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>It feels like a JavaScript solution makes sense here. GreenSock is my first thought because its <a href="https://greensock.com/motionpath/">MotionPath</a> plugin can scale SVG paths. But what if we want to animate outside of an SVG? Could we write a function that scales the paths for us? We could but it won’t be straightforward.</p>
<h3>Trying different approaches</h3>
<p>What tool allows us to define a path in some way without the mental overhead? A charting library! Something like <a href="https://d3js.org/">D3.js</a> allows us to pass in a set of coordinates and receive a generated path string. We can tailor that string to our needs with different curves, sizing, etc.</p>
<p>With a little tinkering, we can create a function that scales a path based on a defined coordinate system:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="9af4e20e6307178f27ede2f3e7ff6f78"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/9af4e20e6307178f27ede2f3e7ff6f78">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This definitely works, but it’s also less than ideal because it’s unlikely we are going to be declaring SVG paths using sets of coordinates. What we want to do is take a path straight out of a vector drawing application, optimize it, and drop it on a page. That way, we can invoke some JavaScript function and let that do the heavy lifting.</p>
<p>So that’s exactly what we are going to do.</p>
<p>First, we need to create a path. This one was thrown together quickly in Inkscape. Other vector drawing tools are available.</p>
<p><img src="https://i2.wp.com/css-tricks.com/wp-content/uploads/2020/03/path-doodle.png?resize=700%2C271&amp;ssl=1" alt="A path created in Inkscape on a 300×300 canvas"></p>
<p>Next, let’s optimize the SVG. After saving the SVG file, we’ll run it through Jake Archibald’s brilliant <a href="https://jakearchibald.github.io/svgomg/">SVGOMG</a> tool. That gives us something along these lines:</p>
<pre class="language-svg"><code class="language-svg"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 79.375 79.375<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M10.362 18.996s-6.046 21.453 1.47 25.329c10.158 5.238 18.033-21.308 29.039-18.23 13.125 3.672 18.325 36.55 18.325 36.55l12.031-47.544<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#000<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.265<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span></span></code></pre>
<p>The parts we’re interested are <code>path</code> and <code>viewBox</code>.</p>
<h3>Expanding the JavaScript solution</h3>
<p>Now we can create a JavaScript function to handle the rest. Earlier, we created a function that takes a set of data points and converts them into a scalable SVG path. But now we want to take that a step further and take the path string and work out the data set. This way our users never have to worry about trying to convert their paths into data sets.</p>
<p>There is one caveat to our function: Besides the path string, we also need some bounds by which to scale the path against. These bounds are likely to be the third and fourth values of the viewBox attribute in our optimized SVG.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> path <span class="token operator">=</span></span>
<span class="highlight-line"><span class="token string">"M10.362 18.996s-6.046 21.453 1.47 25.329c10.158 5.238 18.033-21.308 29.039-18.23 13.125 3.672 18.325 36.55 18.325 36.55l12.031-47.544"</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> height <span class="token operator">=</span> <span class="token number">79.375</span> <span class="token comment">// equivalent to viewbox y2</span></span>
<span class="highlight-line"><span class="token keyword">const</span> width <span class="token operator">=</span> <span class="token number">79.375</span> <span class="token comment">// equivalent to viewbox x2</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> motionPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponsiveMotionPath</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  height<span class="token punctuation">,</span></span>
<span class="highlight-line">  width<span class="token punctuation">,</span></span>
<span class="highlight-line">  path<span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>We won’t go through this function line-by-line. You can check it out in the demo! But we will highlight the important steps that make this possible.</p>
<h4><a href="https://css-tricks.com/create-a-responsive-css-motion-path-sure-we-can/#first-were-converting-a-path-string-into-a-data-set"></a>First, we’re converting a path string into a data set</h4>
<p>The biggest part of making this possible is being able to read the path segments. This is totally possible, thanks to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement">SVGGeometryElement API</a>. We start by creating an SVG element with a path and assigning the path string to its <code>d</code> attribute.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// To convert the path data to points, we need an SVG path element.</span></span>
<span class="highlight-line"><span class="token keyword">const</span> svgContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token comment">// To create one though, a quick way is to use innerHTML</span></span>
svgContainer<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
<span class="highlight-line">  &lt;svg xmlns="http://www.w3.org/2000/svg"></span>
<span class="highlight-line">    &lt;path d="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" stroke-width="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>strokeWidth<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"/></span>
  &lt;/svg></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="highlight-line"><span class="token keyword">const</span> pathElement <span class="token operator">=</span> svgContainer<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>Then we can use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGGeometryElement">SVGGeometryElement API</a> on that path element. All we need to do is iterate over the total length of the path and return the point at each length of the path.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function-variable function">convertPathToData</span> <span class="token operator">=</span> <span class="token parameter">path</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token comment">// To convert the path data to points, we need an SVG path element.</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> svgContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token comment">// To create one though, a quick way is to use innerHTML</span></span>
  svgContainer<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;svg xmlns="http://www.w3.org/2000/svg">
<span class="highlight-line">                              &lt;path d="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"/></span>
                            &lt;/svg></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="highlight-line">  <span class="token keyword">const</span> pathElement <span class="token operator">=</span> svgContainer<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token comment">// Now to gather up the path points.</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">DATA</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token comment">// Iterate over the total length of the path pushing the x and y into</span></span>
<span class="highlight-line">  <span class="token comment">// a data set for d3 to handle 👍</span></span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> pathElement<span class="token punctuation">.</span><span class="token function">getTotalLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> pathElement<span class="token punctuation">.</span><span class="token function">getPointAtLength</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token constant">DATA</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token constant">DATA</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h4>Next, we generate scaling ratios</h4>
<p>Remember how we said we’d need some bounds likely defined by the <code>viewBox</code>? This is why. We need some way to calculate a ratio of the motion path against its container. This ratio will be equal to that of the path against the SVG <code>viewBox</code>. We will then use these with <a href="https://github.com/d3/d3-scale">D3.js scales</a>.</p>
<p>We have two functions: one to grab the largest <code>x</code> and <code>y</code> values, and another to calculate the ratios in relation to the <code>viewBox</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function-variable function">getMaximums</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">X_POINTS</span> <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">point</span> <span class="token operator">=></span> point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">Y_POINTS</span> <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">point</span> <span class="token operator">=></span> point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">    Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token constant">X_POINTS</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// x2</span></span>
<span class="highlight-line">    Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token constant">Y_POINTS</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// y2</span></span>
<span class="highlight-line">  <span class="token punctuation">]</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token function-variable function">getRatios</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">maxs<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>maxs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> width<span class="token punctuation">,</span> maxs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> height<span class="token punctuation">]</span></span></code></pre>
<h4>Now we need to generate the path</h4>
<p>The last piece of the puzzle is to actually generate the path for our element. This is where D3.js actually comes into play. Don’t worry if you haven’t used it before because we’re only using a couple of functions from it. Specifically, we are going to use D3 to generate a path string with the data set we generated earlier.</p>
<p>To create a line with our data set, we do this:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">d3<span class="token punctuation">.</span><span class="token function">line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// M10.362000465393066,18.996000289916992L10.107386589050293, etc.</span></span></code></pre>
<p>The issue is that those points aren’t scaled to our container. The cool thing with D3 is that it provides the ability to create scales. These act as interpolation functions. See where this is going? We can write one set of coordinates and then have D3 recalculate the path. We can do this based on our container size using the ratios we generated.</p>
<p>For example, here’s the scale for our <code>x</code> coordinates:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> xScale <span class="token operator">=</span> d3</span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">scaleLinear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="highlight-line">    <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    maxWidth<span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">*</span> widthRatio<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>The domain is from 0 to our highest <code>x</code> value. The range in most cases will go from 0 to container width multiplied by our width ratio.</p>
<p>There are times where our range may differ and we need to scale it. This is when the aspect ratio of our container doesn’t match that of our path. For example, consider a path in an SVG with a <code>viewBox</code> of <code>0 0 100 200</code>. That’s an aspect ratio of 1:2. But if we then draw this in a container that has a height and width of 20vmin, the aspect ratio of the container is 1:1. We need to pad the width range to keep the path centered and maintain the aspect ratio.</p>
<p>What we can do in these cases is calculate an offset so that our path will still be centered in our container.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> widthRatio <span class="token operator">=</span> <span class="token punctuation">(</span>height <span class="token operator">-</span> width<span class="token punctuation">)</span> <span class="token operator">/</span> height</span>
<span class="highlight-line"><span class="token keyword">const</span> widthOffset <span class="token operator">=</span> <span class="token punctuation">(</span>ratio <span class="token operator">*</span> containerWidth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span></span>
<span class="highlight-line"><span class="token keyword">const</span> xScale <span class="token operator">=</span> d3</span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">scaleLinear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> maxWidth<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token punctuation">[</span>widthOffset<span class="token punctuation">,</span> containerWidth <span class="token operator">*</span> widthRatio <span class="token operator">-</span> widthOffset<span class="token punctuation">]</span><span class="token punctuation">)</span></span></code></pre>
<p>Once we have two scales, we can map our data points using the scales and generate a new line.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">SCALED_POINTS</span> <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">POINT</span></span> <span class="token operator">=></span> <span class="token punctuation">[</span></span>
<span class="highlight-line">  <span class="token function">xScale</span><span class="token punctuation">(</span><span class="token constant">POINT</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token function">yScale</span><span class="token punctuation">(</span><span class="token constant">POINT</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">d3<span class="token punctuation">.</span><span class="token function">line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">SCALED_POINTS</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Scaled path string that is scaled to our container</span></span></code></pre>
<p>We can apply that path to our element by passing it inline via a CSS property 👍</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token constant">ELEMENT</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--path'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>newPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>Then it’s our responsibility to decide when we want to generate and apply a new scaled path. Here’s one possible solution:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">setPath</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> scaledPath <span class="token operator">=</span> responsivePath<span class="token punctuation">.</span><span class="token function">generatePath</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token constant">CONTAINER</span><span class="token punctuation">.</span>offsetWidth<span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token constant">CONTAINER</span><span class="token punctuation">.</span>offsetHeight</span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token constant">ELEMENT</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--path'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>scaledPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">const</span> SizeObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span>setPath<span class="token punctuation">)</span></span>
<span class="highlight-line">SizeObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token constant">CONTAINER</span><span class="token punctuation">)</span></span></code></pre>
<p>This demo (viewed best in full screen) shows three versions of the element using a motion path. The paths are present to easier see the scaling. The first version is the unscaled SVG. The second is a scaling container illustrating how the path doesn’t scale. The third is using our JavaScript solution to scale the path.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="oNXdaZp"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/oNXdaZp">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>Phew, we did it!</h3>
<p>This was a really cool challenge and I definitely learned a bunch from it! Here’s a couple of demos using the solution.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ExjpmZV"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ExjpmZV">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ZEGjZvj"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ZEGjZvj">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>It should work as a proof of concept and looks promising! Feel free to drop your own optimized SVG files into this demo to try them out! — it should catch most aspect ratios.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="dyoewER"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/dyoewER">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>I’ve created a package named “<a href="https://npmjs.org/meanderer">Meanderer</a>” on <a href="https://github.com/jh3y/meanderer">GitHub</a> and <a href="https://npmjs.org/meanderer">npm</a>. You can also pull it down with <a href="https://unpkg.com/meanderer">unpkg CDN</a> to play with it in CodePen, if you want to try it out.</p>
<p>I look forward to seeing where this might go and hope we might see some native way of handling this in the future. 🙏</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Animated Matryoshka Dolls in CSS</title>
    <link href="https://jhey.dev/writing/animated-matryoshka-dolls-in-css/"/>
    <updated>2020-02-27T20:36:23+00:00</updated>
    <id>https://jhey.dev/writing/animated-matryoshka-dolls-in-css/</id>
    <content type="html"><![CDATA[
      <p>Here’s a fun one. How might we create a set of those cool Matryoshka dolls where they nest inside one another… but in CSS?</p>
<p>I toyed with this idea in my head for a little while. Then, I saw a tweet from CSS-Tricks and the article image had the dolls. I took that as a sign! It was time to put fingers to the keyboard.</p>
<p><img src="https://i1.wp.com/css-tricks.com/wp-content/uploads/2019/10/matryoshka-dolls.png?resize=1200%2C600&amp;ssl=1" alt="Matryoshka Dolls"></p>
<p>Our goal here is to make these fun and interactive, where we can click on a doll to open it up and reveal another, smaller doll. Oh, and stick with just CSS for the functionality. And while we’re at it, let’s replace the dolls with our own character, say a CodePen bear. Something like this:</p>
<p><img src="https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/02/beqrs-finalbears-final.gif?ssl=1" alt="Matryoshka Bears Animation"></p>
<p>We won’t dwell on making things pretty to start. Let’s get some markup on the page and thrash out the mechanics first.</p>
<p>We can’t have an infinite amount of dolls. When we reach the innermost doll, it’d be nice to be able to reset the dolls without having to do a page refresh. A neat trick for this is to wrap our scene in an HTML form. That way we can use an input and set the <code>type</code> attribute to <code>reset</code> to avoid using any JavaScript.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Reset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Reset<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span></code></pre>
<p>Next, we need some dolls. Or bears. Or something to start with. The key here will be to use the classic <a href="https://css-tricks.com/the-checkbox-hack/">checkbox hack</a> and any associated form labels. As a note, I’m going to use Pug to handle the markup because it supports loops, making things a little easier. But, you can certainly write the HTML by hand. Here’s the start with form fields and labels that set up the checkbox hack.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="RwNmPwr"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/RwNmPwr">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Try clicking some of the inputs and hitting the Reset input. They all become unchecked. Nice, we’ll use that.</p>
<p>We have some interactivity but nothing is really happening yet. Here’s the plan:</p>
<ol>
<li>We’ll only show one checkbox at a time</li>
<li>Checking a checkbox should reveal the label for the next checkbox.</li>
<li>When we get to the last checkbox, there our only option should be to reset the form.</li>
</ol>
<p>The trick will be to make use of the CSS adjacent sibling combinator (<code>+</code>).</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">input:checked + label + input + label</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>When a checkbox is checked, we need to show the label for the next doll, which will be three siblings along in the DOM. How do we make the first label visible? Give it an explicit <code>display: block</code> via inline styles in our markup. Putting this together, we have something along these lines:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="MWYdwjP"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/MWYdwjP">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Clicking each label reveals the next. Hold on, the last label isn’t shown! That’s correct. And that’s because the last label doesn’t have a checkbox. We need to add a rule that caters to that last label.</p>
<pre class="language-css"><code class="language-css"><span class="token selector">input:checked + label + input + label,
input:checked + label + label</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="NWPVqyM"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/NWPVqyM">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Cool. We’re getting somewhere. That’s the basic mechanics. Now things are going to get a little trickier.</p>
<h3>Basic styling</h3>
<p>So, you might be thinking, “Why aren’t we hiding the checked label?” Good question! But, if we hide it straight away, we won’t have any transition between the current doll and the next. Before we start animating our dolls, let’s create basic boxes that will represent a doll. We can style them up so they mimic the doll outline without the detail.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.doll</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.doll:nth-of-type(even)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> #00f<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.doll:nth-of-type(odd)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="oNgRjvZ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/oNgRjvZ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Clicking one doll instantly reveals the next one and, when we’ve reached the last doll, we can reset the form to start again. That’s what we want here.</p>
<h3>The mechanics</h3>
<p>We are going to animate the dolls based on a center point. Our animation will consist of many steps:</p>
<ol>
<li>Slide the current doll out to the left.</li>
<li>Open the doll to reveal the next one.</li>
<li>Move the next doll where the current one started.</li>
<li>Make the current doll fade out.</li>
<li>Assign the next doll as the current doll.</li>
</ol>
<p>Let’s start by sliding the current doll out to the left. We apply an animation when we click a label. Using the <code>:checked</code> pseudo-selector we can target the current doll. At this point, it’s worth noting that we are going to use CSS variables to control animation speed and behavior. This will make it easier to chain animations on the labels.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">:root</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--speed</span><span class="token punctuation">:</span> 0.25<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--base-slide</span><span class="token punctuation">:</span> 100<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--slide-distance</span><span class="token punctuation">:</span> 60<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">input:checked + label</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> slideLeft <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 1s<span class="token punctuation">)</span> forwards<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> slideLeft</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--base-slide<span class="token punctuation">)</span> * -1px<span class="token punctuation">)</span> + <span class="token function">var</span><span class="token punctuation">(</span>--slide-distance<span class="token punctuation">)</span> * -1%<span class="token punctuation">)</span><span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That looks great. But there’s an issue. As soon as we click a label, we could click it again and reset the animation. We don’t want that to happen.</p>
<p><img src="https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/02/bears-01.gif?resize=600%2C600&amp;ssl=1" alt="Red Block with Index 0 Slides over from behind Blue Block with Index 1"></p>
<p>How can we get around this? We can remove pointer events from a label once it’s been clicked.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">input:checked + label</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> slideLeft <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 1s<span class="token punctuation">)</span> forwards<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/02/bears-02.gif?resize=600%2C600&amp;ssl=1" alt="Red Block 0 slides out followed by Blue Block 1 to show Red Block 2"></p>
<p>Great! Now once we have started, we can’t stop the animation chain from happening.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="KKwLdXP"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/KKwLdXP">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Next up, we need to crack open the doll to reveal the next one. This is where things get tricky because we are going to need some extra elements, not only to create the effect that the doll is opening up, but also to reveal the next doll inside of it. That’s right: we need to duplicate the inner doll. The trick here is to reveal a “fake” doll that we swap for the real one once we’ve animated it. This also means delaying the reveal of the next label.</p>
<p>Now our markup updates labels so that they contains span elements.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doll<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doll--1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doll doll--dummy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doll__half doll__half--top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Top<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doll__half doll__half--bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Bottom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span></code></pre>
<p>These will act as the “dummy” doll as well as the lid and base for the current doll.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.doll</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.doll:nth-of-type(even)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--bg</span><span class="token punctuation">:</span> #00f<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--dummy-bg</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.doll:nth-of-type(odd)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--bg</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--dummy-bg</span><span class="token punctuation">:</span> #00f<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.doll__half</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.doll__half--top</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.doll__half--bottom</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.doll__dummy</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--dummy-bg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The lid requires three translations to create the opening effect: one to pop it up, one to move it left and then one to pop it down.</p>
<p><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/02/bears-03.png?ssl=1" alt="A top and bottm block"></p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> open</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">33.333333333333336%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">66.66666666666667%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-100%<span class="token punctuation">,</span> -100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-100%<span class="token punctuation">,</span> 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Next is where we can use CSS custom properties to handle changing values. Once the doll has slid over to the left, we can open it. But how do we know how long to delay it from opening until that happens? We can use the <code>--speed</code> custom property we defined earlier to calculate the correct delay.</p>
<p>It looks a little quick if we use the <code>--speed</code> value as it is, so let’s multiply it by two seconds:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">input:checked + .doll</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> slideLeft <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 1s<span class="token punctuation">)</span> forwards<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">input:checked + .doll .doll__half--top</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> open <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 2s<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 1s<span class="token punctuation">)</span> forwards<span class="token punctuation">;</span> // highlight</span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Much better:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="LYEopKm"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/LYEopKm">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Now we need to move the inner “dummy” doll to the new position. This animation is like the open animation in that it consists of three stages. Again, that’s one to move up, one to move right, and one to set down. It’s like the slide animation, too. We are going to use CSS custom properties to determine the distance that the doll moves.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">:root</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  // Introduce a new variable that defines how high the dummy doll should pop out.</span>
<span class="highlight-line">  <span class="token property">--pop-height</span><span class="token punctuation">:</span> 60<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">33.333333333333336%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--pop-height<span class="token punctuation">)</span> * -1%<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">66.66666666666667%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--pop-height<span class="token punctuation">)</span> * -1%<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--base-slide<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span> + <span class="token function">var</span><span class="token punctuation">(</span>--slide-distance<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--pop-height<span class="token punctuation">)</span> * -1%<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--base-slide<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span> + <span class="token function">var</span><span class="token punctuation">(</span>--slide-distance<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--pop-height<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Almost there!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="wvBbYmP"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/wvBbYmP">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The only thing is that the next doll is available as soon as we click a doll. that means we can spam click our way through the set.</p>
<p><img src="https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/02/bears-04.gif?resize=600%2C600&amp;ssl=1" alt="Sliding blocks being spammed with animations overlapping"></p>
<p>Technically, the next doll shouldn’t show until the “fake” one has moved into place. It’s only once the “fake” doll is in place that we can hide it and reveal the real one. That means we going to use zero-second scale animations! That’s right. We can play pretend by delaying two zero-second animations and using <code>animation-fill-mode</code>.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> appear</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">from</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We actually only need one set of <code>@keyframes</code>. because we can re-use what we have to create the opposite movement with <code>animation-direction: reverse</code>. With that in mind, all our animations get applied something like this:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line">// The next doll</span>
<span class="highlight-line"><span class="token property">input</span><span class="token punctuation">:</span>checked + .doll + input + .doll<span class="token punctuation">,</span></span>
// The last doll <span class="token punctuation">(</span>doesn<span class="token selector">'t have an input)
input:checked + .doll + .doll</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> appear 0s <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 5s<span class="token punctuation">)</span> both<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">// The current doll</span>
<span class="highlight-line"><span class="token property">input</span><span class="token punctuation">:</span>checked + .doll<span class="token punctuation">,</span></span>
// The current doll that isn<span class="token selector">'t the first. Specificity prevails
input:checked + .doll + input:checked + .doll</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> slideLeft <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 1s<span class="token punctuation">)</span> forwards<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="token selector">input:checked + .doll .doll__half--top,
input:checked + .doll + input:checked + .doll .doll__half--top</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> open <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 2s<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 1s<span class="token punctuation">)</span> forwards<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="token selector">input:checked + .doll .doll__dummy,
input:checked + .doll + input:checked + .doll .doll__dummy</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> move <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 2s<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 3s<span class="token punctuation">)</span> forwards<span class="token punctuation">,</span> appear 0s <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 5s<span class="token punctuation">)</span> reverse forwards<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Note how important the variables are, especially where we are chaining animations. That gets us almost where we need to be.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="povmxMG"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/povmxMG">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>I can hear it now: “They’re all the same size!” Yep. That’s the missing piece. They need to scale down. The trick here is to adjust the markup again and make use of CSS custom properties yet again.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doll--0<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doll<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doll--0<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token property">--doll-index</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doll__dummy-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doll__dummy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> //highlight</span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doll__container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doll__half doll__half--top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doll__half doll__half--bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span></code></pre>
<p>We just introduced a CSS custom property inline that tells us the index of the doll. We can use this to generate a scale of each half as well as the fake inner doll. The halves will have to scale to match the actual doll size, but the fake inner doll scale will need to match that of the next doll. Tricky!</p>
<p>We can apply these scales inside the containers so that our animations are not affected.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">:root</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--scale-step</span><span class="token punctuation">:</span> 0.05<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="token selector">.doll__container,
.doll__dummy-container</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.doll__container</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>1 - <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--doll-index<span class="token punctuation">)</span><span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--scale-step<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform-origin</span><span class="token punctuation">:</span> bottom<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.doll__dummy</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span>1 - <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--doll-index<span class="token punctuation">)</span> + 1<span class="token punctuation">)</span> * <span class="token function">var</span><span class="token punctuation">(</span>--scale-step<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform-origin</span><span class="token punctuation">:</span> bottom center<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Note how the <code>.doll__dummy</code> class uses <code>var(--doll-index) + 1)</code> to calculate the scale so that it matches the next doll.  👍</p>
<p>Lastly, we re-assign the animation to the <code>.doll__dummy-container</code> class instead of the <code>.doll__dummy</code> class.</p>
<pre class="language-css"><code class="language-css"><span class="token selector">input:checked + .doll .doll__dummy-container,
input:checked + .doll + input:checked + .doll .doll__dummy-container</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> move <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 2s<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 3s<span class="token punctuation">)</span> forwards<span class="token punctuation">,</span> appear 0s <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 5s<span class="token punctuation">)</span> reverse forwards<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Here’s a demo where the containers have been given a background color to see what’s happening.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="yLydOwQ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/yLydOwQ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>We can see that, although the content size changes, they remain the same size. This makes for consistent animation behavior and makes the code easier to maintain.</p>
<h3>Finishing touches</h3>
<p>Wow, things are looking pretty slick! All we need are some finishing touches and we are done!</p>
<p><img src="https://i1.wp.com/css-tricks.com/wp-content/uploads/2020/02/bears-905.gif?resize=600%2C600&amp;ssl=1" alt="Working proof of concept with red and blue blocks"></p>
<p>The scene starts to look cluttered because we’re stacking the “old” dolls off to the side when a new one is introduced. So let’s slide a doll out of view when the next one is revealed to clean that mess up.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> slideOut</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">from</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--base-slide<span class="token punctuation">)</span> * -1px<span class="token punctuation">)</span> + <span class="token function">var</span><span class="token punctuation">(</span>--slide-distance<span class="token punctuation">)</span> * -1%<span class="token punctuation">)</span><span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--base-slide<span class="token punctuation">)</span> * -1px<span class="token punctuation">)</span> + <span class="token function">var</span><span class="token punctuation">(</span>--slide-distance<span class="token punctuation">)</span> * -2%<span class="token punctuation">)</span><span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="token selector">input:checked + .doll,
input:checked + .doll + input:checked + .doll</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> slideLeft <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 1s<span class="token punctuation">)</span> forwards<span class="token punctuation">,</span></span>
<span class="highlight-line">    slideOut <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 1s<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 6s<span class="token punctuation">)</span> forwards<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The new <code>slideOut</code> animation fades the doll out while it translates to the left. Perfect.  👍</p>
<p><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/02/bears-06.gif?resize=600%2C600&amp;ssl=1" alt="Decluttered scene as blocks slide then fade out"></p>
<p>That’s it for the CSS trickery we need to make this effect work. All that’s left style the dolls and the scene.</p>
<p>We have many options to style the dolls. We could use a background image, CSS illustration, SVG, or what have you. We could even throw together some emoji dolls that use random inline hues!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="oNgrBYY"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/oNgrBYY">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Let’s go with inline SVG.</p>
<p>I’m basically using the same underlying mechanics we’ve already covered. The difference is that I’m also generating inline variables for hue and lightness so the bears sport different shirt colors.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jOOYMLm"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jOOYMLm">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<hr>
<p>There we have it! Stacking dolls — err, bears — with nothing but HTML and CSS! All the code for all the steps is available in <a href="https://codepen.io/collection/nmqWpx">this CodePen collection</a>. Questions or suggestions? Feel free to reach out to me here in the comments.</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>React&#39;s Portals in 3 Minutes</title>
    <link href="https://jhey.dev/writing/reacts-portals-in-3-minutes/"/>
    <updated>2019-12-18T04:57:52+00:00</updated>
    <id>https://jhey.dev/writing/reacts-portals-in-3-minutes/</id>
    <content type="html"><![CDATA[
      <h1>What is it?</h1>
<p>An API for rendering components outside of your app’s DOM hierarchy.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Component<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> DOMElement<span class="token punctuation">)</span></span></code></pre>
<p>For those in camp <strong>TL;DR</strong> scroll down for a demo!</p>
<h1>Why?</h1>
<p>Perfect for scenarios where <code>CSS</code> styles are restraining your elements. For example, stacking(<code>z-index</code>) and <code>overflow</code> issues. You could even render things in a new <code>window</code>!  😎</p>
<p>Check out <a href="https://hackernoon.com/using-a-react-16-portal-to-do-something-cool-2a2d627b0202">this HackerNoon article</a> about rendering in separate windows!</p>
<h1>How?</h1>
<p>Instead of returning an element in a component’s <code>render</code> method, return a portal.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Outsider</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ReactDom<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token constant">I</span> am outside<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>Outsider<span class="token operator">/</span><span class="token operator">></span></span></code></pre>
<p><code>Outsider</code> renders as a direct descendant of <code>document.body</code> 👍</p>
<h1>When to use?</h1>
<ul>
<li>Modals</li>
<li>Tooltips</li>
<li>Floating menus</li>
<li>Widgets</li>
</ul>
<h1>Scope + Bubbling</h1>
<p>A brilliant thing about portals is that a component rendered in a portal acts as if it is still in the React tree. It behaves like a normal React child. Pass it <code>props</code>, it will react to updates, etc.</p>
<p>Events fired in a portal will also bubble up through the <code>React</code> tree! Check out the example in the <code>React</code> <a href="https://reactjs.org/docs/portals.html#event-bubbling-through-portals">docs</a>.</p>
<h1>Basic example (Modal)</h1>
<p>Let’s start with a common use case — the Modal. Modals are a great example of where we may need to render a component outside of the current DOM structure.</p>
<p>Our <code>Modal</code> will render based on a <code>state</code> value in the app.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Modal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> onClose<span class="token punctuation">,</span> open <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span></span>
<span class="highlight-line">  open</span>
<span class="highlight-line">    <span class="token operator">?</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'modal'</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token string">'modal__close'</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClose<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&amp;</span>times<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token punctuation">{</span> children <span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span></span>
<span class="highlight-line">      document<span class="token punctuation">.</span>body</span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token operator">:</span> <span class="token keyword">null</span></span></code></pre>
<p>For our example, we will render the <code>Modal</code> on <code>document.body</code>. Our <code>Modal</code> is a functional component that accepts <code>children</code>, <code>onClose</code> and <code>open</code> as <code>props</code>.</p>
<p>Here it is in action!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="RwNozBm"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/RwNozBm">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h1>A silly example</h1>
<p>Remember the video game <a href="https://en.wikipedia.org/wiki/Portal_%28video_game%29">&quot;Portal&quot;</a>?</p>
<p>Let’s create a scene 😅</p>
<p>Let’s start with a <code>Man</code> 🏃. We are going to use <code>Greensock</code>'s &quot;<a href="https://greensock.com/docs/Utilities/Draggable">Draggable</a>&quot; to create a draggable <code>Man</code>.</p>
<p>Now let’s create a scene with a &quot;Portal&quot;. Our man will be bound by the app container.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Man bounds<span class="token operator">=</span><span class="token punctuation">{</span>rootNode<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"portal portal--in"</span><span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>That gives us</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/g8ig71x8hs3x72fxjoz1.gif" alt="Draggable Man concept where the Man Component is bound to a container"></p>
<p>Now let’s get <code>ReactDOM.createPortal</code> involved 😃</p>
<p>We add an element into the <code>DOM</code> outside of our app (<code>#outside</code>). We also create <code>state</code> for tracking whether our <code>Man</code> is in or out of the app container.</p>
<p>We then use <code>createPortal</code> to render a <code>Portal</code> in <code>#outside</code>. And if <code>outside</code> is <code>true</code> we will use <code>createPortal</code> to render our <code>Man</code> in that outer element 👍</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>Man</span>
<span class="highlight-line">  bounds<span class="token operator">=</span><span class="token punctuation">{</span>outside <span class="token operator">?</span> outsideElement <span class="token operator">:</span> rootNode<span class="token punctuation">}</span></span>
<span class="highlight-line">  onRelease<span class="token operator">=</span><span class="token punctuation">{</span>onRelease<span class="token punctuation">}</span></span>
<span class="highlight-line">  outside<span class="token operator">=</span><span class="token punctuation">{</span>outside<span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line"><span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"portal portal--in"</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>innerPortalRef<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">{</span><span class="token function">createPortal</span><span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>outerPortalRef<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"portal portal--out"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span></span>
<span class="highlight-line">  outsideElement</span>
<span class="highlight-line"><span class="token punctuation">)</span><span class="token punctuation">}</span></span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">ManRender</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"man"</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>manRef<span class="token punctuation">}</span> role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span></span>
<span class="highlight-line">    🏃</span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">return</span> outside <span class="token operator">?</span> <span class="token function">createPortal</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>ManRender <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> bounds<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token operator">&lt;</span>ManRender <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span></span></code></pre>
<p>Our <code>Man</code> now invokes an <code>onRelease</code> function too. This checks our cursor position against our portal bounds on release. If we release over a portal, we toggle the <code>state</code> value. All the code is in the demo, there's not much to it 👍</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/t75ldniqfpapytz8hghq.gif" alt="Clip of the working portal. Man component can be dragged in and out of the app container via the fictional portal"></p>
<p>If you use your dev tools to inspect the DOM, you’ll see the render happening outside <code>#app</code> 👍</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="PXPJNV"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/PXPJNV">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h1>Notes</h1>
<ul>
<li>Don’t neglect <a href="https://en.wikipedia.org/wiki/Web_accessibility">Accessibility</a>! Maintaining keyboard focus etc. is very important.</li>
<li>Available in React@16.0.0+</li>
</ul>
<h1>That’s it!</h1>
<p>A 3-minute intro to portals in React!</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>JavaScript&#39;s Async + Await in 5 Minutes</title>
    <link href="https://jhey.dev/writing/javascripts-async-await-in-5-minutes/"/>
    <updated>2019-12-15T06:50:31+00:00</updated>
    <id>https://jhey.dev/writing/javascripts-async-await-in-5-minutes/</id>
    <content type="html"><![CDATA[
      <blockquote>
<p>Bye Bye Promise inception and callback fury! 👋🎉</p>
</blockquote>
<p>It’s likely that you’ve encountered Promises in your JavaScript (<em>If you haven’t check out this <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises">guide</a> quick 👍</em>). They allow you to hook into the completion of asynchronous calls. They make it simple to chain asynchronous operations or even group them together. There is one tiny downside. When consuming Promises, the syntax isn’t always the prettiest.</p>
<p>Introducing <strong>async</strong> + <strong>await</strong> 🎉</p>
<p>For those in camp <strong>TL;DR</strong> <code>async</code> + <code>await</code> are syntactic sugar for consuming your <code>Promise</code>s 🍭 They aid in understanding the flow of your code. There are no new concepts, it’s <code>Promise</code>s with nicer shoes 👟 Scroll down for a <code>gist</code> ⌨️</p>
<h2>Baking a cake with code 🍰</h2>
<p>We are going to bake a cake 🍰 yum! To bake the cake, we first need to get the ingredients. I’m sorry, it’s a plain sponge 😅</p>
<ul>
<li>Butter</li>
<li>Flour</li>
<li>Sugar</li>
<li>Eggs 🥚</li>
</ul>
<p>In our code, getting each ingredient requires an asynchronous operation.</p>
<p>For example, here is the method <code>getButter</code>:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getButter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Butter'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>These operations will become part of a <code>getIngredients</code> method. When we bake the cake, we will need to invoke <code>getIngredients</code> before mixing, etc.</p>
<h2>With Promises</h2>
<p>Let’s assume we need to chain each asynchronous operation. <code>getIngredients</code> is a journey around a supermarket picking up one ingredient at a time 🛒</p>
<p>In most cases, we only need to chain operations if they are dependent on each other. For example, if the second operation needs the return value from the first operation and so on.</p>
<p>In our example, it may be that we can only add one item to our shopping basket at a time. That means we need to progress through the ingredients one by one. Remember the code here is hypothetical and to show the use of Promises 😉</p>
<p>How might <code>getIngredients</code> look with Promises? I’ve certainly seen nested Promises like this before 👀</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getIngredients</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">getButter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">butter</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token function">updateBasket</span><span class="token punctuation">(</span>butter<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token function">getFlour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">flour</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token function">updateBasket</span><span class="token punctuation">(</span>flour<span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token function">getSugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sugar</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token function">updateBasket</span><span class="token punctuation">(</span>sugar<span class="token punctuation">)</span></span>
<span class="highlight-line">        <span class="token function">getEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">eggs</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">          <span class="token function">updateBasket</span><span class="token punctuation">(</span>eggs<span class="token punctuation">)</span></span>
<span class="highlight-line">          <span class="token function">resolve</span><span class="token punctuation">(</span>basket<span class="token punctuation">)</span></span>
<span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>This works but doesn’t look great 👎 It would look better with a Promise chain.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getIngredients</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getButter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>updateBasket<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>getFlour<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>updateBasket<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>getSugar<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>updateBasket<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>getEggs<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>updateBasket<span class="token punctuation">)</span></span></code></pre>
<p>If we were doing our grocery shopping online, we could use <code>Promise.all</code> 🤓</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getIngredients</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="highlight-line">  <span class="token function">getButter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token function">getFlour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token function">getSugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token function">getEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span></code></pre>
<p>These look much tidier but we still need to use a callback to get those ingredients.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function">getIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">ingredients</span> <span class="token operator">=></span> <span class="token function">doSomethingWithIngredients</span><span class="token punctuation">(</span>ingredients<span class="token punctuation">)</span><span class="token punctuation">)</span></span></code></pre>
<h2>Tidying it up with async + await</h2>
<p>Let’s sprinkle on that syntactic sugar 🍭 To use the <code>await</code> keyword, we must first declare a method as asynchronous with the <code>async</code> keyword. It’s important to note that an <code>async</code> method <em>will always</em> return a <code>Promise</code>. That means there is no need to return a <code>Promise</code> 🎉</p>
<p>Let’s declare <code>getIngredients</code> as async</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getIngredients</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span></code></pre>
<p>Now, how might those <code>Promise</code>s look with sugar? The <code>await</code> keyword allows us to wait for a <code>Promise</code> and define a variable with the return value of that <code>Promise</code>. It's a little verbose for this example, but let’s apply that sugar to <code>getIngredients</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getIngredients</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> butter <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getButter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> flour <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFlour</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> sugar <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getSugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> eggs <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">    butter<span class="token punctuation">,</span></span>
<span class="highlight-line">    flour<span class="token punctuation">,</span></span>
<span class="highlight-line">    sugar<span class="token punctuation">,</span></span>
<span class="highlight-line">    eggs<span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">]</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The code isn't smaller, but it's more verbose and concise 👍 No more callbacks. It's when we consume a <code>Promise</code> that the syntactic sugar comes into play.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">bakeACake</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> ingredients <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// do something with the ingredients, no more ".then" 🙌</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Wow! 😎 How much cleaner is that?</p>
<p>The use of <code>async</code> and <code>await</code> makes our code procedural and comprehensive. It looks cleaner and does exactly the same thing.  It’s important to remember here that we aren’t replacing <code>Promise</code>s, we're still using them under the hood. Now we're using them with a new cleaner syntax.</p>
<p>And yes, this works with <code>Promise.all</code> too. So if we had done the shopping online, our code gets even smaller.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getIngredients</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> ingredients <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="highlight-line">    <span class="token function">getButter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function">getFlour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function">getSugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function">getEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> ingredients</span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We don't need that wrapper function anymore!</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getIngredients</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span></span>
<span class="highlight-line">  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getButter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getFlour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getSugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<h2>Awaiting a non-Promise</h2>
<p>How about if the value you <code>await</code> on is not a <code>Promise</code>? In our example, the asynchronous functions are returning a <code>String</code> after a <code>setTimeout</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> egg <span class="token operator">=</span> <span class="token keyword">await</span> 🥚</span></code></pre>
<p>There will be no error, the value becomes a resolved <code>Promise</code> 😅</p>
<h2>What about rejections?</h2>
<p>Up until now, we’ve dealt with the happy path 😃 But how about in the case where a <code>Promise</code> rejects?</p>
<p>For example, what if there are no eggs in stock? Our asynchronous function for <code>getEggs</code> would reject with a potential error.</p>
<p>To accommodate for this, a simple <code>try</code>/<code>catch</code> statement will do the trick 👍</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getIngredients</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> butter <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token string">'Butter'</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> flour <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFlour</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> sugar <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getSugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> eggs <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">      butter<span class="token punctuation">,</span></span>
<span class="highlight-line">      flour<span class="token punctuation">,</span></span>
<span class="highlight-line">      sugar<span class="token punctuation">,</span></span>
<span class="highlight-line">      eggs<span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> e <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We could wrap at this level or higher up where we invoke <code>getIngredients</code> 👍</p>
<h2>Consuming our function and baking the cake 🍰</h2>
<p>If you’ve got this far, we’ve created our function for <code>getIngredients</code> with the new <code>async</code> + <code>await</code> keywords. What might the rest of it look like?</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">bakeACake</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token comment">// get the ingredients</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> ingredients <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token comment">// mix them together</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> cakeMix <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mix</span><span class="token punctuation">(</span>ingredients<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token comment">// put in oven on 180C, gas mark 4for 20-25 minutes</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> hotCake <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">cook</span><span class="token punctuation">(</span>cakeMix<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token comment">// allow to stand before serving</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> cake <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">stand</span><span class="token punctuation">(</span>hotCake<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> cake</span>
<span class="highlight-line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> e <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Much cleaner than what we might have done previously with <code>Promise</code>s 🎉</p>
<h2>That’s it! Baking a cake with async + await in 5 minutes 🍰</h2>
<p>If you’ve got this far, thanks for reading 😃 I’ve put together a gist with some possible example code that can be seen below along with some further resources on <code>async</code> + <code>await</code>.</p>
<p>The important takeaways ⚠️;</p>
<ul>
<li><code>async</code> functions will always return a <code>Promise</code></li>
<li><code>await</code> will in most cases be used against a <code>Promise</code> or a group of <code>Promise</code>s</li>
<li>Handle any potential errors with a <code>try</code>/<code>catch</code> statement 👍</li>
<li>We haven’t touched on this but you can <code>await</code> an <code>await</code>. Making a <code>fetch</code> request you might <code>await</code> the request and then <code>await</code> the <code>json</code> function.</li>
</ul>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dataUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<p>As always, any questions or suggestions, please feel free to leave a response or <a href="https://twitter.com/@jh3yy">tweet me 🐦</a>! Be sure to follow me on the socials 😎</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">PROB</span> <span class="token operator">=</span> <span class="token number">0.2</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">grabIngredient</span> <span class="token operator">=</span> <span class="token parameter">ingredient</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token constant">PROB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">            <span class="token function">resolve</span><span class="token punctuation">(</span>ingredient<span class="token punctuation">)</span></span>
<span class="highlight-line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        	<span class="token function">reject</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Sorry, we've got no </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ingredient<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="highlight-line">        <span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token comment">// boilerplate functions for getting the different ingredients</span></span>
<span class="highlight-line"><span class="token keyword">const</span> getButter <span class="token operator">=</span> <span class="token function">grabIngredient</span><span class="token punctuation">(</span><span class="token string">'Butter'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> getFlour <span class="token operator">=</span> <span class="token function">grabIngredient</span><span class="token punctuation">(</span><span class="token string">'Flour'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> getSugar <span class="token operator">=</span> <span class="token function">grabIngredient</span><span class="token punctuation">(</span><span class="token string">'Sugar'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> getEggs <span class="token operator">=</span> <span class="token function">grabIngredient</span><span class="token punctuation">(</span><span class="token string">'Eggs'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getIngredientsFromTheSuperMarket</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> butter <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getButter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> flour <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFlour</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> sugar <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getSugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> eggs <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">      butter<span class="token punctuation">,</span></span>
<span class="highlight-line">      flour<span class="token punctuation">,</span></span>
<span class="highlight-line">      sugar<span class="token punctuation">,</span></span>
<span class="highlight-line">      eggs<span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> e <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getIngredientsOnline</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="highlight-line">  <span class="token function">getButter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token function">getFlour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token function">getSugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token function">getEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token comment">// boilerplate async functions that return strings</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">mix</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ingredients</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Mixing </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ingredients<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">cook</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">cakeMix</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'Hot Cake'</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">stand</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">hotCake</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'🍰'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">bakeACake</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> ingredients <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getIngredientsOnline</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> cakeMix <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mix</span><span class="token punctuation">(</span>ingredients<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> hotCake <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">cook</span><span class="token punctuation">(</span>cakeMix<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> cake <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">stand</span><span class="token punctuation">(</span>hotCake<span class="token punctuation">)</span></span>
<span class="highlight-line">    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'BAKED'</span><span class="token punctuation">,</span> cake<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> cake</span>
<span class="highlight-line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token function">bakeACake</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<h3>Further resources</h3>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await"><code>await</code></a> — MDN</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"><code>async</code> function</a> — MDN</li>
<li><a href="https://syntax.fm/show/028/async-await">Async + Await podcast</a> — Syntax.fm</li>
</ul>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Glitchy Text Reveal in 3 Minutes</title>
    <link href="https://jhey.dev/writing/glitchy-text-reveal-in-3-minutes/"/>
    <updated>2019-12-11T19:10:42+00:00</updated>
    <id>https://jhey.dev/writing/glitchy-text-reveal-in-3-minutes/</id>
    <content type="html"><![CDATA[
      <p>Looking for an interesting text animation on your next project? In this post, we’re going to make the following text reveal animation.</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/towl22i14lqoz483al71.gif" alt="Glitchy text reveal in action"></p>
<p>To do this, we’ll leverage the <a href="/writing/the-power-and-fun-of-scope-with-css-custom-properties/">power of CSS variable scope</a> 💪</p>
<p>For those in camp <strong>TL;DR</strong>, scroll down for the demos &amp; code 👍</p>
<h2>Disclaimer</h2>
<p>This effect is achievable with only <code>HTML</code> &amp; <code>CSS</code>. I’m using a little <code>JavaScript</code> to enhance the markup. It makes things different on each refresh. I’ll also share a non-JavaScript version though 👍</p>
<h2>Markup</h2>
<p>The first thing we need is some markup ✅</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Glitchy Text Reveal!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span></code></pre>
<h2>JavaScript</h2>
<p>Here’s that JavaScript.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token punctuation">{</span> Splitting <span class="token punctuation">}</span> <span class="token operator">=</span> window</span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">RESULTS</span> <span class="token operator">=</span> <span class="token function">Splitting</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token comment">// Set of characters we can use to glitch through</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">GLITCH_CHARS</span> <span class="token operator">=</span> <span class="token string">'`¡™£¢∞§¶•ªº–≠åß∂ƒ©˙∆˚¬…æ≈ç√∫˜µ≤≥÷/?░▒▓&lt;>/'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token comment">// Loop through our Splitting results and apply CSS variables.</span></span>
<span class="highlight-line"><span class="token comment">// The results contain an Array of spans that are the characters.</span></span>
<span class="highlight-line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token constant">RESULTS</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token constant">CHARS</span> <span class="token operator">=</span> <span class="token constant">RESULTS</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>chars</span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token constant">CHARS</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token comment">// We are going to inline 10 CSS variables</span></span>
<span class="highlight-line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> g <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> g<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token constant">CHARS</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span></span>
<span class="highlight-line">        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">--char-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>g<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">GLITCH_CHARS</span><span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token constant">GLITCH_CHARS</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span></span>
<span class="highlight-line">      <span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We are using the brilliant <a href="https://splitting.js.org">Splitting.js</a> to slice up our text into spans.</p>
<p>This enables us to select individual characters 😎 Once we have the result, we loop over the character elements and apply inline <code>CSS</code> variables. These variables dictate what glitchy characters should show.</p>
<p>The resulting markup for a character might look something like this.</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>
<span class="highlight-line">  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>char<span class="token punctuation">"</span></span></span>
  <span class="token attr-name">data-char</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>G<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">
  <span class="token attr-name">style</span></span><span class="token punctuation">="</span>
<span class="highlight-line"><span class="token attr-value">    <span class="token property">--char-0</span><span class="token punctuation">:</span><span class="token string">'˙'</span><span class="token punctuation">;</span></span></span>
<span class="highlight-line"><span class="token attr-value">    <span class="token property">--char-1</span><span class="token punctuation">:</span><span class="token string">'§'</span><span class="token punctuation">;</span></span></span>
<span class="highlight-line"><span class="token attr-value">    <span class="token property">--char-2</span><span class="token punctuation">:</span><span class="token string">'º'</span><span class="token punctuation">;</span></span></span>
<span class="highlight-line"><span class="token attr-value">    <span class="token property">--char-3</span><span class="token punctuation">:</span><span class="token string">'∞'</span><span class="token punctuation">;</span></span></span>
<span class="highlight-line"><span class="token attr-value">    <span class="token property">--char-4</span><span class="token punctuation">:</span><span class="token string">'˙'</span><span class="token punctuation">;</span></span></span>
<span class="highlight-line"><span class="token attr-value">    <span class="token property">--char-5</span><span class="token punctuation">:</span><span class="token string">'▒'</span><span class="token punctuation">;</span></span></span>
<span class="highlight-line"><span class="token attr-value">    <span class="token property">--char-6</span><span class="token punctuation">:</span><span class="token string">'˙'</span><span class="token punctuation">;</span></span></span>
<span class="highlight-line"><span class="token attr-value">    <span class="token property">--char-7</span><span class="token punctuation">:</span><span class="token string">'µ'</span><span class="token punctuation">;</span></span></span>
<span class="highlight-line"><span class="token attr-value">    <span class="token property">--char-8</span><span class="token punctuation">:</span><span class="token string">'£'</span><span class="token punctuation">;</span></span></span>
<span class="token attr-value">    <span class="token property">--char-9</span><span class="token punctuation">:</span><span class="token string">'&lt;'</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="highlight-line">    l</span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span></code></pre>
<h2>CSS</h2>
<p>First, we need to style up a pseudo-element to duplicate our character. Then, we hide the original.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">[data-char]</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">[data-char]:after</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--txt</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>data-char<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation-duration</span><span class="token punctuation">:</span> 0.2s<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation-delay</span><span class="token punctuation">:</span> 0.5s<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> <span class="token function">steps</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> backwards<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--txt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Note how the content is being filled with a CSS variable 👍</p>
<p>Here’s the trick. We are going to leverage CSS variable scope to create a &quot;One animation fits all&quot; type of scenario. We define one set of <code>keyframes</code> that will switch out the <code>content</code> property. How does it know what to switch to? It will reference those inline variables we set earlier 😉</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> glitch-switch</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%</span> <span class="token punctuation">{</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--char-0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">10%</span> <span class="token punctuation">{</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--char-1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">20%</span> <span class="token punctuation">{</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--char-2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">30%</span> <span class="token punctuation">{</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--char-3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">40%</span> <span class="token punctuation">{</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--char-4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--char-5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">60%</span> <span class="token punctuation">{</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--char-6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">70%</span> <span class="token punctuation">{</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--char-7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">80%</span> <span class="token punctuation">{</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--char-8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">90%</span> <span class="token punctuation">{</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--char-9<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">100%</span> <span class="token punctuation">{</span> <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--char-0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That’s it!</p>
<p><img src="https://thepracticaldev.s3.amazonaws.com/i/u3w5y0ifb056iosnnwom.gif" alt="Glitchy text reveal where all characters appear at same time"></p>
<p>It’s not very interesting though is it? Let’s play with <code>animation-iteration-count</code> to change the effect. How about a random iteration count defined by an inline CSS variable?</p>
<p>We could inline a count variable like this;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token constant">CHARS</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--count'</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span></code></pre>
<p>And then apply it in our CSS;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--count<span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>Giving us something like this! 🎉
<img src="https://thepracticaldev.s3.amazonaws.com/i/towl22i14lqoz483al71.gif" alt="Glitchy text reveal in action"></p>
<h2>Accessibility</h2>
<p>It’s worth mentioning how to make this accessible. The simplest solution will be to duplicate the text and apply <code>aria-hidden</code> to our glitchy text 👍</p>
<h2>That's it!</h2>
<p>A CSS glitchy text reveal in 3 minutes! Be sure to check out the demo for different timing behaviors.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="mdyymOR"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/mdyymOR">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>And here’s that CSS only version 😉 You’d thought I forgot hadn't you? Until next time 👋</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="GRgZrVO"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/GRgZrVO">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>The Power (and Fun) of Scope with CSS Custom Properties</title>
    <link href="https://jhey.dev/writing/the-power-and-fun-of-scope-with-css-custom-properties/"/>
    <updated>2019-11-27T20:33:34+00:00</updated>
    <id>https://jhey.dev/writing/the-power-and-fun-of-scope-with-css-custom-properties/</id>
    <content type="html"><![CDATA[
      <p>You’re probably already at least a little familiar with CSS variables. If not, here’s a two-second overview: they are really called custom properties, you set them in declaration blocks like <code>--size: 1em</code> and use them as values like <code>font-size: var(--size);</code>, they <a href="https://css-tricks.com/difference-between-types-of-css-variables/">differ from preprocessor variables</a> (e.g. they cascade), and here’s <a href="https://css-tricks.com/guides/css-custom-properties/">a guide</a> with way more information.</p>
<p>But are we using them to their full potential? Do we fall into old habits and overlook opportunities where variables could significantly reduce the amount of code we write?</p>
<p>This article was prompted by a recent tweet I made about using CSS variables to create dynamic animation behavior.</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/jh3yy/status/1191695646752948225?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Let’s look at a couple of instances where CSS variables can be used to do some pretty cool things that we may not have considered.</p>
<h3>Basic scoping wins</h3>
<p>The simplest and likely most common example would be scoped colors. And what’s our favorite component to use with color? The button. 😅</p>
<p>Consider the standard setup of primary and secondary buttons. Let’s start with some basic markup that uses a <a href="https://css-tricks.com/bem-101/">BEM syntax</a>.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button button--primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Primary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button button--secondary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Secondary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span></code></pre>
<p>Traditionally, we might do something like this to style them up:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.button</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 1rem 1.25rem<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">margin</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transition</span><span class="token punctuation">:</span> background 0.1s ease<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.button--primary</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>233<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">outline-color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>233<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 80%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.button--primary:hover</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>233<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 40%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.button--primary:active</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>233<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 30%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.button--secondary</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>200<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">outline-color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>200<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 80%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.button--secondary:hover</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>200<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 40%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.button--secondary:active</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>200<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 30%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="zYYWPoO"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/zYYWPoO">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>That’s an awful lot of code for something not particularly complex. We haven’t added many styles and we’ve added a lot of rules to cater to the button’s different states and colors. We could significantly reduce the code with a scoped variable.</p>
<p>In our example, the only differing value between the two button variants is the hue. Let’s refactor that code a little then. We won’t change the markup but cleaning up the styles a little, we get this:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.button</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 1rem 1.25rem<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">margin</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transition</span><span class="token punctuation">:</span> background 0.1s ease<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--hue<span class="token punctuation">)</span><span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">outline-color</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--hue<span class="token punctuation">)</span><span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 80%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.button:hover</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--hue<span class="token punctuation">)</span><span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 40%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.button:active</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--hue<span class="token punctuation">)</span><span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 30%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.button--primary</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--hue</span><span class="token punctuation">:</span> 233<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.button--secondary</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--hue</span><span class="token punctuation">:</span> 200<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="wvvmPqX"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/wvvmPqX">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>This not only reduces the code but makes maintenance so much easier. Change the core button styles in one place and it will update all the variants! 🙌</p>
<p>I’d likely leave it there to make it easier for devs wanting to use those buttons. But, we could take it further. We could inline the variable on the actual element and remove the class declarations completely. 😲</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--hue</span><span class="token punctuation">:</span> 233<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Primary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--hue</span><span class="token punctuation">:</span> 200<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Secondary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"></span></code></pre>
<p>Now we don’t need these. 👍</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.button--primary</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--hue</span><span class="token punctuation">:</span> 233<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">.button--secondary</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--hue</span><span class="token punctuation">:</span> 200<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="abbYVYd"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/abbYVYd">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Inlining those variables might not be best for your next design system or app but it does open up opportunities. Like, for example, if we had a button instance where we needed to override the color.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag">button<span class="token attr-class">.button</span><span class="token attr-class">.button--primary</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">style</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">--hue: 20;</span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">Overridden</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="rNNqXQR"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/rNNqXQR">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>Having fun with inline variables</h3>
<p>Another opportunity is to have a little fun with it. This is a technique I use for <a href="https://codepen.io/jh3y">many of the Pens I create over on CodePen</a>. 😉</p>
<p>You may be writing straightforward HTML, but in many cases, you may be using a framework, like React or a preprocessor like Pug, to write your markup. These solutions allow you to leverage JavaScript to create random inline variables. For the following examples, I’ll be using Pug. Pug is an indentation-based HTML templating engine. If you aren’t familiar with Pug, do not fear! I’ll try to keep the markup simple.</p>
<p>Let’s start by randomizing the hue for our buttons:</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag">button<span class="token attr-class">.button</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">style</span><span class="token punctuation">=</span><span class="token attr-value">`<span class="token operator">--</span>hue<span class="token operator">:</span> $<span class="token punctuation">{</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">* 360}`) First</span></span></code></pre>
<p>With Pug, we can use ES6 template literals to inline randomized CSS variables. 💪</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="wvvmPQY"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/wvvmPQY">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>Animation alterations</h3>
<p>So, now that we have the opportunity to define random characteristics for an element, what else could we do? Well, one overlooked opportunity is animation. True, we can’t animate the variable itself, like this:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> grow</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">from</span> <span class="token punctuation">{</span> <span class="token property">--scale</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">to</span>   <span class="token punctuation">{</span> <span class="token property">--scale</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>But we can create dynamic animations based on scoped variables. We can change the behavior of animation on the fly! 🤩</p>
<h4>Example 1: The excited button</h4>
<p>Let’s create a button that floats along minding its own business and then gets excited when we hover over it.</p>
<p>Start with the markup:</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag">button<span class="token attr-class">.button</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">style</span><span class="token punctuation">=</span><span class="token attr-value">`<span class="token operator">--</span>hue<span class="token operator">:</span> $<span class="token punctuation">{</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">* 360}`) Show me attention</span></span></code></pre>
<p>A simple floating animation may look like this:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> flow</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%, 100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -25%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This will give us something like this:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="KKKoZVK"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/KKKoZVK">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>I’ve added a little shadow as an extra but it’s not vital. 👍</p>
<p>Let’s make it so that our button gets excited when we hover over it. Now, we could simply change the animation being used to something like this:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.button:hover</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> shake .1s infinite ease-in-out<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> shake</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%, 100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">25%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-1%<span class="token punctuation">,</span> 3%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-2deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>1%<span class="token punctuation">,</span> 2%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>2deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">75%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>1%<span class="token punctuation">,</span> -2%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-1deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And it works:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="qBBYOQa"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/qBBYOQa">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>But, we need to introduce another keyframes definition. What if we could merge the two animations into one? They aren’t too far off from each other in terms of structure.</p>
<p>We could try:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> flow-and-shake</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%, 100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">25%, 75%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -12.5%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -25%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Although this works, we end up with an animation that isn’t quite as smooth because of the translation steps. So what else could we do? Let’s find a compromise by removing the steps at 25% and 75%.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> flow-and-shake</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%, 100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -25%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>It works fine, as we expected, but here comes the trick: Let’s update our button with some variables.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.button</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--y</span><span class="token punctuation">:</span> -25<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--x</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--rotation</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--speed</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now let’s plug them into the animation definition, along with the button’s animation properties.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.button</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation-name</span><span class="token punctuation">:</span> flow-and-shake<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 1s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> ease-in-out<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> flow-and-shake</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%, 100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--x<span class="token punctuation">)</span> * -1%<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--y<span class="token punctuation">)</span> * -1%<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--rotation<span class="token punctuation">)</span> * -1deg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--x<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--y<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--rotation<span class="token punctuation">)</span> * 1deg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>All is well. 👍</p>
<p>Let’s change those values when the button is hovered:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.button:hover</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--speed</span><span class="token punctuation">:</span> .1<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--x</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--y</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--rotation</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="zYYjrKK"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/zYYjrKK">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Nice! Now our button has two different types of animations but defined via one set of keyframes. 🤯</p>
<p>Let’s have a little more fun with it. If we take it a little further, we can make the button a little more playful and maybe stop animating altogether when it’s active. 😅</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="NWWMxbV"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/NWWMxbV">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h4>Example 2: Bubbles</h4>
<p>Now that we’ve gone through some different techniques for things we can do with the power of scope, let’s put it all together. We are going to create a randomly generated bubble scene that heavily leverages scoped CSS variables.</p>
<p>Let’s start by creating a bubble. A static bubble.</p>
<p><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/11/css-bubble.png?ssl=1" alt="A CSS Bubble"></p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.bubble</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>100% 115% at 25% 25%<span class="token punctuation">,</span> #fff<span class="token punctuation">,</span> transparent 33%<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function">radial-gradient</span><span class="token punctuation">(</span>15% 15% at 75% 75%<span class="token punctuation">,</span> #80dfff<span class="token punctuation">,</span> transparent<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function">radial-gradient</span><span class="token punctuation">(</span>100% 100% at 50% 25%<span class="token punctuation">,</span> transparent<span class="token punctuation">,</span> #66d9ff 98%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #b3ecff<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We are using <code>background</code> with multiple values and a <code>border</code> to make the bubble effect — but it’s not very dynamic. We know the <code>border-radius</code> will always be the same. And we know the structure of the <code>border</code> and <code>background</code> will not change. But the values used within those properties and the other property values could all be random.</p>
<p>Let’s refactor the CSS to make use of variables:</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.bubble</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>100% 115% at 25% 25%<span class="token punctuation">,</span> #fff<span class="token punctuation">,</span> transparent 33%<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function">radial-gradient</span><span class="token punctuation">(</span>15% 15% at 75% 75%<span class="token punctuation">,</span> #80dfff<span class="token punctuation">,</span> transparent<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function">radial-gradient</span><span class="token punctuation">(</span>100% 100% at 50% 25%<span class="token punctuation">,</span> transparent<span class="token punctuation">,</span> #66d9ff 98%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #b3ecff<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That’s a good start. 👍</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="MWWGywm"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/MWWGywm">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Let’s add some more bubbles and leverage the inline scope to position them as well as size them. Since we are going to start randomizing more than one value, it’s handy to have a function to generate a random number in range for our markup.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> <span class="token function-variable function">randomInRange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">max<span class="token punctuation">,</span> min</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min</span></span></code></pre>
<p>With Pug, we can utilize iteration to create a large set of bubbles:</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> baseHue <span class="token operator">=</span> <span class="token function">randomInRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> bubbleCount <span class="token operator">=</span> <span class="token number">50</span></span></span>
<span class="highlight-line"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">0</span></span></span>
<span class="highlight-line"><span class="token flow-control"><span class="token branch keyword">while</span> b <span class="token operator">&lt;</span> bubbleCount</span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token function">randomInRange</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">randomInRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.bubble</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">style</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">--x: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; --size: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; --hue: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>baseHue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> b<span class="token operator">++</span></span></span></code></pre>
<p>Updating our <code>.bubble</code> styling allows us to make use of the new inline variables.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.bubble</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--x<span class="token punctuation">)</span> * 1%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Giving us a random set of bubbles:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ZEEoWOX"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ZEEoWOX">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Let’s take it even further and animate those bubbles so they float from top to bottom and fade out.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.bubble</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> float 5s infinite ease-in-out<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> float</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">from</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -100vh<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="PooeNOZ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/PooeNOZ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>That’s pretty boring. They all do the same thing at the same time. So let’s randomize the speed, delay, end scale and distance each bubble is going to travel.</p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> <span class="token function-variable function">randomInRange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">max<span class="token punctuation">,</span> min</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min</span></span>
<span class="highlight-line"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> baseHue <span class="token operator">=</span> <span class="token function">randomInRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> bubbleCount <span class="token operator">=</span> <span class="token number">50</span></span></span>
<span class="highlight-line"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">0</span></span></span>
<span class="highlight-line"><span class="token flow-control"><span class="token branch keyword">while</span> b <span class="token operator">&lt;</span> bubbleCount</span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token function">randomInRange</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> delay <span class="token operator">=</span> <span class="token function">randomInRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> speed <span class="token operator">=</span> <span class="token function">randomInRange</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> distance <span class="token operator">=</span> <span class="token function">randomInRange</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> scale <span class="token operator">=</span> <span class="token function">randomInRange</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">randomInRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token attr-class">.bubble</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">style</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">--x: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; --size: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; --hue: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>baseHue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; --distance: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distance<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; --speed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>speed<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; --delay: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>delay<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; --scale: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>scale<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> b<span class="token operator">++</span></span></span></code></pre>
<p>And now, let’s update our styles</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.bubble</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation-name</span><span class="token punctuation">:</span> float<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--speed<span class="token punctuation">)</span> * 1s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation-delay</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--delay<span class="token punctuation">)</span> * -1s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> ease-in-out<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> float</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">from</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">to</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--distance<span class="token punctuation">)</span> * -1vh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--scale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And we will get this:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="PooeNeN"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/PooeNeN">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>With around 50 lines of code, you can create a randomly generated animated scene by honing the power of the scope! 💪</p>
<h3>That’s it!</h3>
<p>We can create some pretty cool things with very little code by putting CSS variables to use and leveraging some little tricks.</p>
<p>I do hope this article has raised some awareness for the power of CSS variable scope and I do hope you will hone the power and pass it on 😎</p>
<p>All the demos in this article are available in <a href="https://codepen.io/collection/XgGdGd">this CodePen collection</a>.</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Enumeration Objects in JavaScript</title>
    <link href="https://jhey.dev/writing/enumeration-objects-in-javascript/"/>
    <updated>2019-11-12T04:19:06+00:00</updated>
    <id>https://jhey.dev/writing/enumeration-objects-in-javascript/</id>
    <content type="html"><![CDATA[
      <p>📢 Stop repeatedly typing the same <code>String</code> everywhere! 😆</p>
<p>Ever got tired of writing the same string over and over? Had a case where your code wasn’t working only to find later that it’s because you misspelled a class name by one character? 🤦‍ Some form of enumeration would likely help.</p>
<p><strong>Disclaimer</strong>, we aren’t referring to <em>strict</em> enumeration seen in strongly typed languages. This isn’t strictly possible with <code>JavaScript</code>. We look at the next best thing we have in <code>JavaScript</code> without jumping into <code>TypeScript</code>. If you’ve used <code>Redux</code> or <code>Flux</code> you’ve likely come across this form when defining <code>Action</code> types for your project.</p>
<p>For those in camp <strong>TL;DR</strong>, create <code>Object</code>s with reference to commonly used strings like class names or action types and freeze them. Use the references instead of repeating <code>String</code> across your code and reduce the risk of developer error 💪</p>
<h3>What’s enumeration?</h3>
<p>Enumeration(enumerated types) allows you to define constants for use within your code.</p>
<blockquote>
<p>In <a href="https://en.wikipedia.org/wiki/Computer_programming" title="Computer programming">computer programming</a>, an <strong>enumerated type</strong> (also called <strong>enumeration</strong>, <strong>enum</strong>, or <strong>factor</strong> in the <a href="https://en.wikipedia.org/wiki/R_programming_language" title="R programming language">R programming language</a>, and a <a href="https://en.wikipedia.org/wiki/Categorical_variable" title="Categorical variable">categorical variable</a> in statistics) is a <a href="https://en.wikipedia.org/wiki/Data_type" title="Data type">data type</a> consisting of a set of named <a href="https://en.wikipedia.org/wiki/Value_%28computer_science%29" title="Value (computer science)">values</a> called <em>elements</em>, <em>members</em>, <em>enumeral</em>, or <em>enumerators</em> of the type. The enumerator names are usually <a href="https://en.wikipedia.org/wiki/Identifier" title="Identifier">identifiers</a> that behave as <a href="https://en.wikipedia.org/wiki/Constant_%28programming%29" title="Constant (programming)">constants</a> in the language. An enumerated type can be seen as a degenerate <a href="https://en.wikipedia.org/wiki/Tagged_union" title="Tagged union">tagged union</a> of <a href="https://en.wikipedia.org/wiki/Unit_type" title="Unit type">unit type</a>. A <a href="https://en.wikipedia.org/wiki/Variable_%28computer_science%29" title="Variable (computer science)">variable</a> that has been <a href="https://en.wikipedia.org/wiki/Declaration_%28computer_science%29" title="Declaration (computer science)">declared</a> as having an enumerated type can be assigned any of the enumerators as a value. In other words, an enumerated type has values that are different from each other, and that can be compared and assigned, but are not specified by the programmer as having any particular concrete representation in the computer’s memory; compilers and interpreters can represent them arbitrarily.</p>
<p>For example, the four <a href="https://en.wikipedia.org/wiki/Suit_%28cards%29" title="Suit (cards)">suits</a> in a deck of playing cards may be four enumerators named <em>Club</em>, <em>Diamond</em>, <em>Heart</em>, and <em>Spade</em>, belonging to an enumerated type named <em>suit</em>. If a variable <em>V</em> is declared having <em>suit</em> as its data type, one can assign any of those four values to it. — <em>Wikipedia, <a href="https://en.wikipedia.org/wiki/Enumerated_type">Enumerated Type</a></em></p>
</blockquote>
<p>Quite a lot to process there. Got it? Great! 😃</p>
<h3>Why use enumeration in JavaScript?</h3>
<p>One of the main reasons to use enumeration in JavaScript is to reduce the risk of developer error. We are not all perfect! 😜</p>
<h3>How?</h3>
<p>We can reduce the risk of developer error by aiming not to repeat <code>String</code> variables in code. A common use case in front end development would be if we needed to apply and remove class names on elements. Assume, we use the class once to query for an element. Then again for making changes to the class name. And then again later to revert those changes. That’s three instances we have typed out one class name. In this case, would it not be better to store this class name somewhere and reference it? The benefit of doing so is that if we want to change the class name later, we need only do it in one place 👍</p>
<p>Also, before making the reference, if we had misspelled the class name, the code would not care. If we misspell a reference to a class name, our code will throw an error ✋</p>
<p>This can be particularly useful if our class names become quite long. This form of enumeration is often seen in projects using <code>react-redux</code> or similar, to define action types ⚛️</p>
<p>In the second case we can define a finite set of allowed values for a variable. Consider an example where a user is selecting an animal. In our code we define a finite list of animals, let’s say cat, dog, and mouse 🐭 The user types rabbit. We can check against our enumeration object to see if <code>rabbit</code> is one of the possible values. We would find that it is not and be able to prompt the user to retype.</p>
<h3>The basic code</h3>
<p>If you hadn’t guessed yet, we are going to use <code>Object</code>s for our enumeration. It’s the best fit for what we desire. We can store multiple keys for values and use them as a reference 👌</p>
<p>Let’s crack on and consider use case one, keeping a reference to class names within our code. Let’s assume we have some click event handler that adds a class and on clicking away removes the class.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.some-real-long-class'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">showElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token function-variable function">processClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!==</span> evt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      element<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'some-real-long-class--visible'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      element<span class="token punctuation">.</span><span class="token constant">IS_SHOWING</span> <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="highlight-line">      document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> processClick<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">.</span><span class="token constant">IS_SHOWING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    element<span class="token punctuation">.</span><span class="token constant">IS_SHOWING</span> <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="highlight-line">    element<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'some-real-long-class--visible'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> processClick<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This is quite a small example but we can already see the potential for error here. What if we start using this class in various places and that one time we write, <code>some-real-long-calls--visible</code>? Our app would break but there would be no apparent error thrown 👎</p>
<p>Let’s rewrite that code extracting the class names. Consider;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">CLASSES</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token constant">ELEMENT</span><span class="token operator">:</span> <span class="token string">'some-real-long-class'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token constant">VISIBLE</span><span class="token operator">:</span> <span class="token string">'some-real-long-class--visible'</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">showElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token function-variable function">processClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!==</span> evt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      element<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">VISIBLE</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      element<span class="token punctuation">.</span><span class="token constant">IS_SHOWING</span> <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="highlight-line">      document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> processClick<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">.</span><span class="token constant">IS_SHOWING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    element<span class="token punctuation">.</span><span class="token constant">IS_SHOWING</span> <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="highlight-line">    element<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">VISIBLE</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> processClick<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That’s already a great improvement. If we mistype the class reference, we will get an <code>Error</code>. There is less risk of us making an error now when using the <code>String</code>.</p>
<p>There is no <em>strict</em> way to enumerate the values, it’s whatever feels best 👍 There is no right or wrong. You could write the above alternatively as</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">CLASSES</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token constant">ELEMENT</span><span class="token operator">:</span> <span class="token string">'some-real-long-class'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token constant">VISIBLE_MODIFIER</span><span class="token operator">:</span> <span class="token string">'visible'</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">showElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token function-variable function">processClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!==</span> evt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      element<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">VISIBLE_MODIFIER</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="highlight-line">      element<span class="token punctuation">.</span><span class="token constant">IS_SHOWING</span> <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="highlight-line">      document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> processClick<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">.</span><span class="token constant">IS_SHOWING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    element<span class="token punctuation">.</span><span class="token constant">IS_SHOWING</span> <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="highlight-line">    element<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">VISIBLE_MODIFIER</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="highlight-line">    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> processClick<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>It still works! 🎉</p>
<p>Maybe a little verbose in comparison but it’s whatever feels best.</p>
<h3>Freeze it!</h3>
<p>Last but definitely not least, we need to freeze our enumerations. We can do this using <code>Object.freeze</code>. This makes our enumeration <code>Object</code>s immutable. This means that we can’t add or remove properties. Nor can we update existing values for properties. This is very important if we want our enumeration to be effective 🍨</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">ANIMALS</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  cat<span class="token operator">:</span> <span class="token string">'cat'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  dog<span class="token operator">:</span> <span class="token string">'dog'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  mouse<span class="token operator">:</span> <span class="token string">'mouse'</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line">Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token constant">ANIMALS</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">ANIMALS</span><span class="token punctuation">.</span>rabbit <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// Error, Object is not extensible</span></span>
<span class="highlight-line"><span class="token constant">ANIMALS</span><span class="token punctuation">.</span>cat <span class="token operator">=</span> <span class="token string">'dog'</span> <span class="token comment">// Error, cannot assign to read-only property</span></span>
<span class="highlight-line"><span class="token keyword">delete</span> <span class="token constant">ANIMALS</span><span class="token punctuation">.</span>mouse <span class="token comment">// Error, cannot delete property</span></span></code></pre>
<h3>Take it a step further</h3>
<p>So that’s all good but I don’t want to be typing <code>hasOwnProperty</code> checks and freezing things all the time. So we could package up our enumeration into something reusable 👍</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">Enumeration</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token function-variable function">has</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This is a foundation for what we want. A standout flaw in this implementation though would be if we wanted to set an enumeration value that already existed on the class such as <code>has</code>. Also, what if we want an object with keys that match the values? Such as;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> enums <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token constant">A</span><span class="token operator">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">:</span> <span class="token string">"B"</span> <span class="token punctuation">}</span></span></code></pre>
<p>This is a use case seen often in apps using <code>redux</code>. It’s not a great experience to have to write all that out.</p>
<p>That won’t do 👎 Our solution is trying to do too much. It’s better to create two solutions that do what we want well 👍</p>
<p>If we want a class reference, create a frozen object ❄️</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">CLASSES</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token constant">VISIBLE</span><span class="token operator">:</span> <span class="token string">'is-visible'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token constant">HIDDEN</span><span class="token operator">:</span> <span class="token string">'is-hidden'</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">HIDDEN</span> <span class="token comment">// is-hidden</span></span></code></pre>
<p>If you need something along the lines of a key mirror, use this one-liner function with an Array 👍</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> mirror <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">keys<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>keys<span class="token punctuation">,</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> key <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">ACTIONS</span> <span class="token operator">=</span> <span class="token function">mirror</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'SEND'</span><span class="token punctuation">,</span> <span class="token string">'UPDATE'</span><span class="token punctuation">,</span> <span class="token string">'ERROR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token constant">ACTIONS</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token constant">SEND</span><span class="token operator">:</span> <span class="token string">'SEND'</span><span class="token punctuation">,</span> <span class="token constant">UPDATE</span><span class="token operator">:</span> <span class="token string">'UPDATE'</span><span class="token punctuation">,</span> <span class="token constant">ERROR</span><span class="token operator">:</span> <span class="token string">'ERROR'</span><span class="token punctuation">}</span></span></code></pre>
<p>I’ve also packaged the latter up into a tiny node module you can import if you like 👍 Check out <a href="https://npmjs.org/key-book">key-book here</a>.</p>
<p>It also offers prefix/suffix support so you could create an action map for your React app like this</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> book <span class="token keyword">from</span> <span class="token string">'key-book'</span></span>
<span class="highlight-line"><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token function">book</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'SEND'</span><span class="token punctuation">,</span> <span class="token string">'DELETE'</span><span class="token punctuation">,</span> <span class="token string">'ARCHIVE'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'MESSAGES__'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">actions <span class="token comment">// {MESSAGES__SEND: "MESSAGES__SEND", MESSAGES__DELETE: "MESSAGES__DELETE", MESSAGES__ARCHIVE: "MESSAGES__ARCHIVE"}</span></span></code></pre>
<h3>That’s it!</h3>
<p>Using enumeration objects in JavaScript is a neat and concise solution. It can be pretty effective at mitigating developer errors when used in your code 💪</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Ghost Buttons with Directional Awareness in CSS</title>
    <link href="https://jhey.dev/writing/ghost-buttons-with-directional-awareness-in-css/"/>
    <updated>2019-09-13T18:42:01+01:00</updated>
    <id>https://jhey.dev/writing/ghost-buttons-with-directional-awareness-in-css/</id>
    <content type="html"><![CDATA[
      <p>It would surprise me if you’d never come across a ghost button 👻. You know the ones: they have a transparent background that fills with a solid color on hover. Smashing Magazine has <a href="https://www.smashingmagazine.com/2018/01/ghost-button-design/">a whole article</a> going into the idea. In this article, we’re going to build a ghost button, but that will be the easy part. The fun and tricky part will be animating the fill of that ghost button such that the background fills up in the direction from which a cursor hovers over it.</p>
<p>Here’s a basic starter for a ghost button:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="VwZbXNN"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/VwZbXNN">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>In most cases, the <code>background-color</code> has a <code>transition</code> to a solid color. There are designs out there where the button might fill from left to right, top to bottom, etc., for some visual flair. For example, here’s left-to-right:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="QWLvrwp"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/QWLvrwp">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>There’s a UX nitpick here. It feels off if you hover against the fill. Consider this example. The button fills from the left while you hover from the right.</p>
<p><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/09/s_F790914C0EB8AF7D7ED52D576A2D1ABF09C6B554530F0EEB9D42E134D37BA833_1567182887640_LTR-OFF-HOVER.gif?ssl=1" alt="Button filling from opposite side of hover initiation"></p>
<p>Hover feels off 👎</p>
<p>It is better if the button fills from our initial hover point.</p>
<p><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/09/s_F790914C0EB8AF7D7ED52D576A2D1ABF09C6B554530F0EEB9D42E134D37BA833_1567182965082_LTR-GOOD-HOVER.gif?ssl=1" alt="Button filling from point of hover initiation"></p>
<p>Hover feels good 👍</p>
<p>So, how can we give the button <em>directional awareness</em>? Your initial instinct might be to reach for a JavaScript solution, but we can create something with CSS and a little extra markup instead.</p>
<p>For those in camp TL;DR, here are some pure CSS ghost buttons with directional awareness!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jjRezM"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jjRezM">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Let’s build this thing step by step. All the code is available in <a href="https://codepen.io/collection/XRLRkV/">this CodePen collection</a>.</p>
<h3>Creating a foundation</h3>
<p>Let’s start by creating the foundations of our ghost button. The markup is straightforward.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Boo!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span></code></pre>
<p>Our CSS implementation will leverage CSS custom properties. These make maintenance easier. They also make for simple customization via inline properties.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">button</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--borderWidth</span><span class="token punctuation">:</span> 5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--boxShadowDepth</span><span class="token punctuation">:</span> 8<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--buttonColor</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--fontSize</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--horizontalPadding</span><span class="token punctuation">:</span> 16<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--verticalPadding</span><span class="token punctuation">:</span> 8<span class="token punctuation">;</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--borderWidth<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span> solid <span class="token function">var</span><span class="token punctuation">(</span>--buttonColor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--boxShadowDepth<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--boxShadowDepth<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span> 0 #888<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--buttonColor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--fontSize<span class="token punctuation">)</span> * 1rem<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">outline</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--verticalPadding<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--horizontalPadding<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transition</span><span class="token punctuation">:</span> box-shadow 0.15s ease<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">button:hover</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--boxShadowDepth<span class="token punctuation">)</span> / 2 * 1px<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--boxShadowDepth<span class="token punctuation">)</span> / 2 * 1px<span class="token punctuation">)</span> 0 #888<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">button:active</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 0 #888<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Putting it all together gives us this:</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="WNeOwRK"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/WNeOwRK">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Great! We have a button and a hover effect, but no fill to go with it. Let’s do that next.</p>
<h3>Adding a fill</h3>
<p>To do this, we create elements that show the filled state of our ghost button. The trick is to clip those elements with <code>clip-path</code> and hide them. We can reveal them when we hover over the button by transitioning the <code>clip-path</code>.</p>
<p><img src="https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/09/ghost-button-01.png?ssl=1" alt="Half filled button where child element has a 50% clip"></p>
<p>They <strong>must</strong> line up with the parent button. Our CSS variables will help a lot here.</p>
<p>At first thought, we could have reached for pseudo-elements. There won’t be enough pseudo-elements for every direction though. They will also interfere with accessibility… but more on this later.</p>
<p>Let’s start by adding a basic fill from left to right on hover. First, let’s add a span. That span will need the same text content as the button.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Boo!</span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Boo!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span></code></pre>
<p>Now we need to line our span up with the button. Our CSS variables will do the heavy lifting here.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">button span</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--buttonColor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--borderWidth<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span> solid <span class="token function">var</span><span class="token punctuation">(</span>--buttonColor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--borderWidth<span class="token punctuation">)</span> * -1px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg<span class="token punctuation">,</span> #fafafa<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--borderWidth<span class="token punctuation">)</span> * -1px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--verticalPadding<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--horizontalPadding<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--borderWidth<span class="token punctuation">)</span> * -1px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--borderWidth<span class="token punctuation">)</span> * -1px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Finally, we clip the span out of view and add a rule that will reveal it on hover by updating the clip. Defining a transition will give it that cherry on top.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">button span</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>0 100% 0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transition</span><span class="token punctuation">:</span> clip-path 0.25s ease<span class="token punctuation">,</span> -webkit-clip-path 0.25s ease<span class="token punctuation">;</span></span>
<span class="highlight-line">  // ...Remaining div styles</span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token selector">button:hover span</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>0 0 0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="MWgoyzg"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/MWgoyzg">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>Adding directional awareness</h3>
<p>So, how might we add directional awareness? We need four elements. Each element will be responsible for detecting a hover entry point. With <code>clip-path</code>, we can split the button area into four segments.</p>
<p><img src="https://i2.wp.com/css-tricks.com/wp-content/uploads/2019/09/ghost-button-02.png?ssl=1" alt="Button with four :hover segments"></p>
<p>Let’s add four spans to a button and position them to fill the button.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  Boo!</span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span></code></pre>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">button span</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--borderWidth<span class="token punctuation">)</span> * -1px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">-webkit-clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clip<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--borderWidth<span class="token punctuation">)</span> * -1px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--borderWidth<span class="token punctuation">)</span> * -1px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--borderWidth<span class="token punctuation">)</span> * -1px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We can target each element and assign a clip and color with CSS variables.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">button span:nth-of-type(1)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--bg</span><span class="token punctuation">:</span> #00f<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span> 100% 0<span class="token punctuation">,</span> 50% 50%<span class="token punctuation">,</span> 50% 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">button span:nth-of-type(2)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--bg</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>100% 0<span class="token punctuation">,</span> 100% 100%<span class="token punctuation">,</span> 50% 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">button span:nth-of-type(3)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--bg</span><span class="token punctuation">:</span> #008000<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 100%<span class="token punctuation">,</span> 100% 100%<span class="token punctuation">,</span> 50% 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">button span:nth-of-type(4)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--bg</span><span class="token punctuation">:</span> #800080<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span> 0 100%<span class="token punctuation">,</span> 50% 50%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Cool. To test this, let’s change the opacity on hover.</p>
<pre class="language-css"><code class="language-css"><span class="token selector">button span:nth-of-type(1):hover,
<span class="highlight-line">button span:nth-of-type(2):hover,</span>
<span class="highlight-line">button span:nth-of-type(3):hover,</span>
button span:nth-of-type(4):hover</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p><img src="https://i1.wp.com/css-tricks.com/wp-content/uploads/2019/09/s_F790914C0EB8AF7D7ED52D576A2D1ABF09C6B554530F0EEB9D42E134D37BA833_1567183872555_HOVER_NOT_QUITE.gif?ssl=1" alt="Each button quadrant being hovered and changing color"></p>
<p>So close.</p>
<p>Uh-oh. There’s an issue here. If we enter and hover one segment but then hover over another, the fill direction would change. That’s going to look off. To fix this, we can set a <code>z-index</code> and <code>clip-path</code> on hover so that a segment fills the space.</p>
<pre class="language-css"><code class="language-css"><span class="token selector">button span:nth-of-type(1):hover,
<span class="highlight-line">button span:nth-of-type(2):hover,</span>
<span class="highlight-line">button span:nth-of-type(3):hover,</span>
button span:nth-of-type(4):hover</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0 0<span class="token punctuation">,</span> 100% 0<span class="token punctuation">,</span> 100% 100%<span class="token punctuation">,</span> 0 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">z-index</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="YzKQBBQ"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/YzKQBBQ">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>Putting it all together</h3>
<p>We know how to create the fill animation, and we know how to detect direction. How can we put the two together? Use the <a href="https://css-tricks.com/almanac/selectors/g/general-sibling/">sibling combinator</a>!</p>
<p>Doing so means when we hover a directional segment, we can reveal a particular fill element.</p>
<p>First, let’s update the markup.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  Boo!</span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Boo!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Boo!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Boo!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Boo!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span></code></pre>
<p>Now, we can update the CSS. Referring to our left-to-right fill, we can reuse the styling. We only need to set a specific <code>clip-path</code> for each element. I’ve approached the ordering the same as some property values. The first child is top, the second is right, and so on.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">button b:nth-of-type(1)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>0 0 100% 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">button b:nth-of-type(2)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>0 0 0 100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">button b:nth-of-type(3)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>100% 0 0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">button b:nth-of-type(4)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>0 100% 0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The last piece is to update the <code>clip-path</code> for the relevant element when hovering the paired segment.</p>
<pre class="language-css"><code class="language-css"><span class="token selector">button span:nth-of-type(1):hover ~ b:nth-of-type(1),
<span class="highlight-line">button span:nth-of-type(2):hover ~ b:nth-of-type(2),</span>
<span class="highlight-line">button span:nth-of-type(3):hover ~ b:nth-of-type(3),</span>
button span:nth-of-type(4):hover ~ b:nth-of-type(4)</span> <span class="token punctuation">{</span>
<span class="highlight-line">  <span class="token property">--clip</span><span class="token punctuation">:</span> <span class="token function">inset</span><span class="token punctuation">(</span>0 0 0 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Tada! We have a pure CSS ghost button with directional awareness.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="ZEzyPQG"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/ZEzyPQG">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>Accessibility</h3>
<p>In its current state, the button isn’t accessible.</p>
<p><img src="https://i1.wp.com/css-tricks.com/wp-content/uploads/2019/09/s_F790914C0EB8AF7D7ED52D576A2D1ABF09C6B554530F0EEB9D42E134D37BA833_1567184369494_Screenshot2019-08-29at22.58.18.png?ssl=1" alt="VoiceOver saying &quot;Boo!&quot; five times followed by &quot;button&quot;"></p>
<p>The extra markup is read by VoiceOver.</p>
<p>Those extra elements aren’t helping much as a screen reader will repeat the content four times. We need to hide those elements from a screen reader.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  Boo!</span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Boo!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Boo!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Boo!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Boo!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span></code></pre>
<p>No more repeated content.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="wvwqomy"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/wvwqomy">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>That’s it!</h3>
<p>With a little extra markup and some CSS trickery, we can create ghost buttons with directional awareness. Use a preprocessor or put together a component in your app and you won’t need to write out all the HTML, too.</p>
<p>Here’s a demo making use of inline CSS variables to control the button color.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jjRezM"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jjRezM">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>How To: Looping Block Reveal Effect</title>
    <link href="https://jhey.dev/writing/how-to-looping-block-reveal-effect/"/>
    <updated>2019-07-10T05:41:03+01:00</updated>
    <id>https://jhey.dev/writing/how-to-looping-block-reveal-effect/</id>
    <content type="html"><![CDATA[
      <blockquote>
<p>Add a little “pizzazz” to your site ✨</p>
</blockquote>
<p>I’m sure we’ve all seen the effect. A block slides in, slides out and reveals some text. Simple enough when we only want to animate in some content. Can even achieve that with only CSS. But what about when we want to loop between content? From one phrase to the next for example.</p>
<p>It gets a little trickier.</p>
<p>For those in camp <strong>TL;DR</strong>, you can check out the code in the CodePen collection at the bottom of the article 👍 All the code required is available there 👍</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*mx1UQcpAhScuaptJ17Y3qw.gif" alt="Text Reveal Slide with no loop"></p>
<h2>Pure CSS with no loop.</h2>
<p>Let’s start by creating a pure CSS block reveal with no loop.</p>
<p>This will give us a better understanding of the problem we face when we want to start looping. We can reuse some stuff too 👍</p>
<p>Let’s start with the markup.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Hey<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>there<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>reader!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>All we need is a container with elements for each block of text we want to reveal.</p>
<p>Now for the styling 👍</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.block-reveal</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.block-reveal span</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 4rem<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Our container will use <code>display: inline-flex</code>. This is so we can keep our text blocks stacked whilst the container takes up as little space as possible. This gives us more flexibility when it comes to incorporating our block reveal into a layout. We might also consider using <code>display: grid</code> 👍</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*_1eb7xAje9840d1Zx47T4w.png" alt="Static stacked styled words"></p>
<p>Now for the blocks. The trick here will be to use <code>pseudo</code> elements on our <code>span</code>. These can then slide in and out with an animation. We can run a second animation in parallel that reveals the text content 👍</p>
<p>Let’s start by creating the blocks.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.block-reveal span</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.block-reveal span:after</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> #1e90ff<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.5<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Setting <code>opacity: 0.5</code> whilst we put everything together.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*rSY31qMXitAbGO9fYkjsjA.png" alt="Blocks in place"></p>
<p>Now let’s animate those blocks from left to right. We need to also set <code>overflow: hidden</code> on our <code>span</code>. Otherwise, the blocks won’t vanish!</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.block-reveal span:after</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> block-reveal 0.5s both<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> block-reveal</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-110%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">45%, 55%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>110%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That will give us this</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*x75BxTj0L2hoAdquCXJ8Tg.gif" alt="Simultaneous blocks sliding in and out over the words"></p>
<p>That won’t do though 👎 We want our blocks to stagger. Let’s animate our text in first and come back to that stagger later.</p>
<p>We may think to animate the <code>opacity</code> of our <code>span</code> here. This would affect the pseudo element though and ruin the effect. To get round this, we can animate <code>color</code> from <code>transparent</code> to a <code>color</code> we desire.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.block-reveal span</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> show-text 0.5s both<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> show-text</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">50%, 100%</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We will leverage <code>animation-fill-mode: both</code> for our animations. This will play a crucial part when we stagger the reveal 💪</p>
<p>We match up the timing so our text reveals when the block is covering the <code>span</code>.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*hnBfiMSPyGF9JWraqvyfHg.gif" alt="Text easing in at the wrong time"></p>
<p>That doesn’t look right 👎</p>
<p>Hold up. That doesn’t look right. The trick here is to adjust the <code>animation-timing-function</code> to use <code>steps</code>. Doing so will make our text appear at an exact point without doing percentage hacks in our keyframes.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.block-reveal span</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> show-text 0.5s <span class="token function">steps</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span> both<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p><img src="https://cdn-images-1.medium.com/max/800/1*EF_1LL9dNUXJ4mBUI7h2ZQ.gif" alt="Slowed down animation to inspect with &quot;Animations Inspector&quot;"></p>
<p>Using the <code>Chrome Animations inspector</code> to slow things right down, we can confirm the animation timeline is correct. In this case slowing the animation right down to <code>10%</code> means you can check everything is in order.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*eBaamJJS_DXiznhENvB4sw.png" alt="A view of the Google Chrome &quot;Animations Inspector&quot; tool showing that the text is revealed at the correct time"></p>
<p>Animations inspector shows that text is revealed at the point our block is paused in the middle 👍</p>
<p><strong>⚠️️ <em>Note::</em></strong> <em>that in a performance critical set up it could be preferable to use</em> <code>opacity</code> <em>to reveal the text. To do this, we could wrap each</em> <code>span</code> <em>again and use the pseudo element of that wrapper as the block.</em></p>
<hr>
<p>Right. Let’s add that stagger. There’s a few ways we can do this. The simplest is going to be applying an <code>animation-delay</code> via the <code>nth-child</code> selector.</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.block-reveal span:nth-child(1),
.block-reveal span:nth-child(1):after</span> <span class="token punctuation">{</span> <span class="token property">animation-delay</span><span class="token punctuation">:</span> 1.1s<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token selector">.block-reveal span:nth-child(2),
.block-reveal span:nth-child(2):after</span> <span class="token punctuation">{</span> <span class="token property">animation-delay</span><span class="token punctuation">:</span> 1.2s<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token selector">.block-reveal span:nth-child(3),
.block-reveal span:nth-child(3):after</span> <span class="token punctuation">{</span> <span class="token property">animation-delay</span><span class="token punctuation">:</span> 1.3s<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>
<p>We could clean this up a little with inline CSS variables.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--delay</span><span class="token punctuation">:</span> 1.1<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hey<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--delay</span><span class="token punctuation">:</span> 1.2<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>there<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">--delay</span><span class="token punctuation">:</span> 1.3<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>reader!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.block-reveal span</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> show-text 0.5s <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--delay<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> * 1s<span class="token punctuation">)</span> <span class="token function">steps</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span> both<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.block-reveal span:after</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> block-reveal 0.5s <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--delay<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> * 1s<span class="token punctuation">)</span> both<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Remove the <code>opacity</code> declaration from our block and we get</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*a1gVLuJxg8qNFHCCUDq4vw.gif" alt="Animation working as expected"></p>
<p>Nice 🎉</p>
<p>Great! That’s what we wanted. We could always take it a little further with those inline CSS variables. We could define the speed, different colors etc.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*v03wSIoJHTFItDJNSeQCXQ.gif" alt="Making use of more inline CSS variables ✨"></p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="PrVBpO"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/PrVBpO">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Can’t we loop this?</h2>
<p>Consider we only have one block and we want to cycle through the words “Hey”, “there” and “reader!”.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*Y_xzvcvlRTCCMTGwWKv_EA.gif" alt="Example looping block reveal"></p>
<p>The block needs to size dynamically 🤔</p>
<p>To do this with only CSS would be tricky. There’s a few hurdles to overcome. We would need to account for animating different blocks across the words. We could try and animate blocks for each word in parallel. We could try to create animations with large pauses and sync them up. Chrome’s Animations inspector would be invaluable for this.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token comment">/* Example keyframe with large built-in delay to account for looping */</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@keyframes</span> block-reveal-show-text--1</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">0%, 30%, 100%</span> <span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">15%, 30%</span> <span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>One of the major issues is the fact that our words are likely to differ in length. If the next word is shorter than the current word, the next block won’t cover the current word. We would need to run the reveal twice. Once to reveal the word and once to hide. But as the blocks animate at the same speed and cover different sizes, this might look a little off.</p>
<p>Any solution is also going to be tricky to maintain when our phrases grow. We would also need to account for staggering. The issue with a pure CSS solution is not only the maintainability, but scalability.</p>
<h2>A JavaScript solution</h2>
<p>With JavaScript we can create a maintainable and scalable solution. As we are going to handle animation from our JavaScript code, we will use <a href="https://greensock.com">GreenSock</a>(GSAP).</p>
<div class="post__embed-container">
      <iframe loading="lazy" class="post__embed" src="https://www.youtube.com/embed/-riXBjDfvOw" allow="encrypted-media; picture-in-picture"></iframe>
    </div>
<p>Don’t worry if you haven’t used GSAP before. The code is intuitive and I will explain each part.</p>
<h3>Markup</h3>
<p>Now we are going to loop through phrases, our markup will need to change. Consider an example where we first show “Hey there reader!” followed by “How are you?”. Our markup structure needs to compliment what we are trying to achieve. It needs to be easy for us to access the next word to reveal on a line as we loop.</p>
<p><code>GSAP</code> also doesn’t have the ability to animate pseudo elements. So we will need to add an extra element to our lines that acts as the sliding block.</p>
<p>Instead of;</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Hey<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>there<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>reader!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>Something like the following will be more suitable;</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal__line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal__word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hey<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal__word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>How<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal__block<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal__line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal__word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>there<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal__word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>are<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal__block<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal__line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal__word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>reader<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal__word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>you?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block-reveal__block<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>New markup structure will make things easier 💪</p>
<p>This does make it trickier to generate our markup. We could delegate this to our <code>JavaScript</code> later on if we wish. And for a <code>React</code> version, we would need to.</p>
<h2>Styling</h2>
<p>Our container styling remains the same. We also transfer the pseudo element styling from before to the new block elements.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.block-reveal</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.block-reveal__block</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">background</span><span class="token punctuation">:</span> #639<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.5<span class="token punctuation">;</span> <span class="token comment">/* For dev */</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We want all the words in a line to sit on top of each other. But, we want to avoid using <code>absolute</code> positioning. This would make positioning the block reveal container in a layout tricky.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.block-reveal__line</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">justify-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.block-reveal__word</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 4rem<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">grid-column</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">grid-row</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The trick here is to use <code>display: grid</code> on the line elements and make every word sit in the first column and row of that grid. That way our container doesn’t lose its width due to <code>absolute</code> positioned children 🎉</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*6SHI5tQqurNkAv0nGG2dHA.png" alt="All the words overlapped in a container"></p>
<p>Looks like a mess, but this is exactly what we want 👍</p>
<p>Now everything is sitting in the right place we can hide the text and blocks.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.block-reveal__block</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform-origin</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleX</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.block-reveal__word</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>As the line element will be the width of the largest word, sliding the block across won’t work as it did. The solution is to increase the scaled width of the block from <code>0</code> to <code>1</code> changing the <code>transform-origin</code> at the mid point. Before doing that, we calculate and set how big the block should be. Its size should match whichever is biggest out of the current word and the next word 👍</p>
<h2>JavaScript</h2>
<p>Let’s start by creating a new <code>class</code> for our block reveal. This <code>class</code> will accept parameters for a <code>DOM</code> element and an options <code>Object</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">BlockReveal</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  element <span class="token operator">=</span> <span class="token keyword">undefined</span></span>
<span class="highlight-line">  options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element</span>
<span class="highlight-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span> <span class="token operator">...</span>options <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Those options will define timings for our block reveal that are passed into GSAP 📽</p>
<p>As we will need to make some DOM related queries, let’s store our classes in a <code>CLASSES</code> Object for reference.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">CLASSES</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token constant">BLOCK</span><span class="token operator">:</span> <span class="token string">'block-reveal__block'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token constant">LINE</span><span class="token operator">:</span> <span class="token string">'block-reveal__line'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token constant">WORD</span><span class="token operator">:</span> <span class="token string">'block-reveal__word'</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We now have a choice to make. If our lines don’t have the same number of children, should we pad them out or throw an <code>Error</code>? For this solution, let’s make that check in the <code>constructor</code> and throw an <code>Error</code> if there’s a mismatch 💪</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">this</span><span class="token punctuation">.</span>wordsPerLine <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element</span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">LINE</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">WORD</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>length</span>
<span class="highlight-line"><span class="token keyword">const</span> sameLineLength <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">  <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">LINE</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token parameter">v</span> <span class="token operator">=></span> v<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">WORD</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wordsPerLine</span>
<span class="highlight-line"><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sameLength<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'BlockReveal: Lines need to be the same amount of words'</span><span class="token punctuation">)</span></span></code></pre>
<p>Now we’ve made our check and know we can proceed. Let’s cache all the elements we will need access to and store them on the class instance.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">BlockReveal</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  element <span class="token operator">=</span> <span class="token keyword">undefined</span></span>
<span class="highlight-line">  elementCache <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    blocks<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    words<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line">  wordsPerLine <span class="token operator">=</span> <span class="token keyword">undefined</span></span>
<span class="highlight-line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token function-variable function">cacheElements</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token comment">// Cache the blocks</span></span>
<span class="highlight-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>elementCache<span class="token punctuation">.</span>blocks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">BLOCK</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wordsPerLine<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">this</span><span class="token punctuation">.</span>elementCache<span class="token punctuation">.</span>words<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span></span>
<span class="highlight-line">        <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span></span>
<span class="highlight-line">          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">LINE</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> .</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">WORD</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:nth-of-type(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span></span>
<span class="highlight-line">        <span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now we can get started on the magic with GSAP ✨</p>
<p>The idea is that we create a <code>GSAP Timeline</code> that staggers animating the blocks to reveal the words. Repeating the <code>Timeline</code> will reveal the next set of words and so on.</p>
<p>There are two major steps to the <code>Timeline</code> 🎥</p>
<ol>
<li>Animate the blocks in.</li>
<li>Animate the blocks out.</li>
</ol>
<p>The trick is to hook into the onStart and onComplete when we animate the blocks in. At this point we are able to show/hide the words whilst updating the transform-origin on the blocks 👌</p>
<p>To do this, we need to track the index of the current word we are on. We can then use this index to grab elements from the <code>elementCache</code>.</p>
<p>Let’s start by creating the <code>Timeline</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">TL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimelineMax</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  delay<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  repeat<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  repeatDelay<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p><code>delay</code> is the initial delay before our Block Reveal starts. <code>repeat</code> is the number of reveals that happen. Setting <code>repeat: -1</code> will infinitely loop our Block Reveal 👌 We have two phrases, so <code>repeat: 2</code> would reveal our first phrase, then the second and stop. Lastly, <code>repeatDelay</code> is the delay between each reveal 👍</p>
<p>The <code>options</code> used for our <code>TimelineMax</code> could be passed in when we instantiate the class 😉 We will update the <code>options</code> on our class to hold <code>defaults</code> that can be extended and referenced.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  options<span class="token operator">:</span> <span class="token punctuation">{</span> delay<span class="token punctuation">,</span> repeat<span class="token punctuation">,</span> repeatDelay <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">TL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimelineMax</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  delay<span class="token punctuation">,</span></span>
<span class="highlight-line">  repeat<span class="token punctuation">,</span></span>
<span class="highlight-line">  repeatDelay<span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>Let’s add the first step to our <code>Timeline</code>.</p>
<p><code>GSAP</code> provides the perfect API for our needs. <code>staggerTo</code> allows us to animate all of our blocks at the same time with a slight <code>stagger</code>.</p>
<div class="post__embed-container">
      <iframe loading="lazy" class="post__embed" src="https://www.youtube.com/embed/DbED_akR1Xo" allow="encrypted-media; picture-in-picture"></iframe>
    </div>
<p>This is the trickiest part to all of our Block Reveal so bear with it 💪 🐻</p>
<p>We need to add a <code>staggerTo</code> call to our <code>Timeline</code> that animates the X scale on our blocks.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token constant">TL</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span></span>
<span class="highlight-line">  TweenMax<span class="token punctuation">.</span><span class="token function">staggerTo</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>elementCache<span class="token punctuation">.</span>blocks<span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token number">0.4</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">{</span> onStart<span class="token punctuation">,</span> transformOrigin<span class="token operator">:</span> <span class="token string">'left'</span><span class="token punctuation">,</span> scaleX<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token number">0.2</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    onComplete</span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>This code animates all our block elements in a stagger from <code>transform: scaleX(0)</code> to <code>transform: scaleX(1)</code>. Each animation takes <code>0.4</code> seconds and the animations are staggered by <code>0.2</code> seconds.</p>
<hr>
<h3>onStart</h3>
<p>In our <code>onStart</code> we will resize our blocks’ widths to that of the largest between the current word and the next word.</p>
<p>We iterate through the next words and compare their width to the current words. Whichever has the largest width becomes the width of the block for that reveal. We use <code>getBoundingClientRect</code> and <code>Math.ceil</code> to make sure we cover the word. This accounts for where <code>offsetWidth</code> might return <code>117</code> for a word that is actually <code>117.39</code> pixels wide.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">onStart</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> nextWords <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementCache<span class="token punctuation">.</span>words<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span></span>
<span class="highlight-line">  newWords<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">word<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> current <span class="token operator">=</span></span>
<span class="highlight-line">      word<span class="token punctuation">.</span>previousElementSibling <span class="token operator">||</span></span>
<span class="highlight-line">      word<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>wordsPerLine <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> reveal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementCache<span class="token punctuation">.</span>blocks<span class="token punctuation">[</span>index<span class="token punctuation">]</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> wordWidth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> currentWidth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token function">getBoudingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span></span>
    reveal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>
<span class="highlight-line">      current<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>wordWidth<span class="token punctuation">,</span> currentWidth<span class="token punctuation">)</span> <span class="token operator">:</span> wordWidth</span>
    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>But wait, wouldn’t it make more sense to cache the reveal widths for each index too? Yes, we could do that so we needn’t make the comparisons on each animation 👍</p>
<p>We can add a new method on the class that we invoke in the <code>constructor</code> after creating the <code>elementCache</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function-variable function">cacheBlockWidths</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token comment">// Iterate through the elementCache words</span></span>
<span class="highlight-line">  <span class="token keyword">this</span><span class="token punctuation">.</span>elementCache<span class="token punctuation">.</span>words<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">phrase</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> blockWidths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="highlight-line">    <span class="token comment">// For each word in the phrase, calculate the correct block width</span></span>
<span class="highlight-line">    phrase<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">word</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">const</span> current <span class="token operator">=</span></span>
<span class="highlight-line">        word<span class="token punctuation">.</span>previousElementSibling <span class="token operator">||</span></span>
<span class="highlight-line">        word<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>wordsPerLine <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="highlight-line">      <span class="token keyword">const</span> wordWidth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token keyword">const</span> currentWidth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span></span>
<span class="highlight-line">      blockWidths<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>wordWidth<span class="token punctuation">,</span> currentWidth<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>blockWidths<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>blockWidths<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
  <span class="token comment">/**
<span class="highlight-line">   * Push one last set of widths which equate to when everything is blank</span>
<span class="highlight-line">   * and we are revealing the first set of words.</span>
   */</span>
<span class="highlight-line">  <span class="token keyword">this</span><span class="token punctuation">.</span>blockWidths<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementCache<span class="token punctuation">.</span>words<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">word</span> <span class="token operator">=></span></span>
<span class="highlight-line">      Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That last part is important. When we start, we see no text. The first set of block widths before looping should equal the width of the first words we see.</p>
<p>⚠️ <em><strong>NOTE::</strong> One thing to bear in mind here is responsive font sizes. We will likely need to restart the animation and re-cache the block widths on page resize.</em></p>
<p>Now we can update our <code>onStart</code> to set the reveal size by looking up the cached block widths. We can add a counter variable to our class so we know when to use that set of widths equal to the first words.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">onStart</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> nextWords <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementCache<span class="token punctuation">.</span>words<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span></span>
<span class="highlight-line">  nextWords<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">word<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> block <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementCache<span class="token punctuation">.</span>blocks<span class="token punctuation">[</span>index<span class="token punctuation">]</span></span>
    block<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>
<span class="highlight-line">      <span class="token keyword">this</span><span class="token punctuation">.</span>blockWidths<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>ran <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wordsPerLine<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span></span>
    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>I promise that’s the trickiest bit out of the way now 🙌</p>
<h3>onComplete</h3>
<p>The <code>onComplete</code> grabs all the previous words and sets their <code>opacity</code> to <code>0</code> to hide them. It sets <code>opacity: 1</code> on all the new words to show them. And it sets the <code>transform-origin</code> of all the blocks to <code>right</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">onComplete</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    elementCache<span class="token operator">:</span> <span class="token punctuation">{</span> blocks<span class="token punctuation">,</span> words <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    index<span class="token punctuation">,</span></span>
<span class="highlight-line">    wordsPerLine<span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> previousWords <span class="token operator">=</span> words<span class="token punctuation">[</span>index <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> wordsPerLine <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> newWords <span class="token operator">=</span> words<span class="token punctuation">[</span>index<span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> word <span class="token keyword">of</span> previousWords<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    word<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token string">'0'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> block <span class="token keyword">of</span> blocks<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    block<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transformOrigin <span class="token operator">=</span> <span class="token string">'right'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> word <span class="token keyword">of</span> newWords<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    word<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token string">'1'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<hr>
<p>All that’s left is to animate the blocks back out to reveal the next word.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token constant">TL</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span></span>
<span class="highlight-line">  TweenMax<span class="token punctuation">.</span><span class="token function">staggerTo</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>elementCache<span class="token punctuation">.</span>blocks<span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token number">0.4</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">{</span> scaleX<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token number">0.2</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    onCompleteOut</span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p><code>onCompleteOut</code> is for updating a counter variable and updating the word index. Nothing crazy 👍</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">onCompleteOut</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>wordsPerLine <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="highlight-line">  <span class="token keyword">this</span><span class="token punctuation">.</span>ran <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Tidying up, we can make any animation durations part of our options. We can also make any styling changes we like such as different block colors etc. To infinitely loop the block reveal, set the <code>repeat</code> to <code>-1</code> 👍</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> block <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.block-reveal'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> myBlockReveal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlockReveal</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  delay<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  repeat<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  repeatDelay<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  blockStagger<span class="token operator">:</span> <span class="token number">0.15</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  blockSlide<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">myBlockReveal<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<p><img src="https://cdn-images-1.medium.com/max/800/1*ZuP6bZAitwtzT4LrES0cCA.gif" alt="Finished project showing looping block reveals"></p>
<h2>That’s it!</h2>
<p>If you’ve got this far, thank you so much for reading. You can now create a looping Block Reveal effect from scratch using <code>GreenSock</code> 💪</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="rEPrOb"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/rEPrOb">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Please do check out the code in the demos and be sure to <a href="https://codepen.io/collection/nNvvLx/">check out the collection</a>. I’ve also included a <code>React</code> port for those looking to add this to a <code>React</code> app. And also a <code>JavaScript</code> version that generates the markup for you!</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Getting Started With Styletron</title>
    <link href="https://jhey.dev/writing/getting-started-with-styletron/"/>
    <updated>2019-04-08T23:24:46+01:00</updated>
    <id>https://jhey.dev/writing/getting-started-with-styletron/</id>
    <content type="html"><![CDATA[
      <p>Styletron is a toolkit for component-oriented styling comprising of <code>CSS</code> in <code>JavaScript</code> flavouring. It’s great for <code>React</code> apps but you can use it elsewhere too!</p>
<h3>What’s CSS in JS?</h3>
<p>It’s exactly that. Defining your styling within <code>JavaScript</code>. The major benefit being that we can abstract styling to the component level.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  background<span class="token operator">:</span> <span class="token string">'#276EF1'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  color<span class="token operator">:</span> <span class="token string">'#FFFFFF'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  cursor<span class="token operator">:</span> <span class="token string">'pointer'</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>You also get the full power of <code>JavaScript</code> within your styling. Global class name pollution or creating bloated style sheets are no longer a concern 🙌</p>
<p>There are some great resources about <code>CSS</code> in <code>JS</code>. Here’s a great speaker deck about <code>CSS</code> in <code>JS</code>. It’s almost 5 years old but the concepts still hold true 👍</p>
<div style="left: 0; width: 100%; height: 0; position: relative; padding-bottom: 74.9296%;"><iframe src="https://speakerdeck.com/player/5ee70e00669c0132f0e02aa977d5e724" style="border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;" allowfullscreen scrolling="no" allow="encrypted-media"></iframe></div>
<p>There are many <code>CSS</code> in <code>JS</code> libraries available. Each have their own take on how <code>CSS</code> in <code>JS</code> should be. <code>Styletron</code> is one of those libraries. Valerii Sorokobatko has <a href="https://github.com/tuchk4/awesome-css-in-js">curated some of the popular options</a>.</p>
<h3>Styletron</h3>
<p>So what makes <code>Styletron</code> any different? It boasts high performance and scalability. It’s component-oriented. But these aren’t what sets it apart.</p>
<p>The unique selling point for <code>Styletron</code> is its novel approach to <code>CSS</code> in <code>JS</code>. Other libraries do things like inline styles or generate scoped classes.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.css-1lvna780</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">line-height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p><code>Styletron</code> gathers its speed with what it terms as “Virtual CSS Classes”. For every component style declaration created, <code>Styletron</code> creates several atomic single declaration classes. It <strong>never</strong> duplicates them. After time, new style declarations result in permutations of already generated atomic classes. So there’s <strong>zero class bloat</strong>. This results in a lot less <code>CSS</code> and a huge performance gain! 🚀</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*MPZzhxb1cFGMZfCZq4v7hw.png" alt="Graph showing how Styletron generates atomic styles"></p>
<p>The above graphic is from Ryan Tsao's <a href="https://ryantsao.com/blog/virtual-css-with-styletron">“Virtual CSS with Styletron”</a></p>
<p>With <code>Styletron</code>, you gain the benefit of atomic <code>CSS</code> without the overhead. You write your styles, it does the utility class part for you! It’s atomic <code>CSS</code> from <code>JS</code>.</p>
<h3>Example</h3>
<p>Let’s go through some features with an example. The “Hello World” of components tends to be the button. Let’s create a <code>Button</code> component with <code>Styletron</code>.</p>
<h3>The Basic Button</h3>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  background<span class="token operator">:</span> <span class="token string">'#276EF1'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  color<span class="token operator">:</span> <span class="token string">'#FFFFFF'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  cursor<span class="token operator">:</span> <span class="token string">'pointer'</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>That’s our basic <code>Button</code>.</p>
<iframe src="https://codesandbox.io/embed/p7yoxk8k4q?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Basic Button w/ Styletron"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
<p>It is not very special. Let’s make something different for this demo 🤓</p>
<p>How about something like this.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/0*8xjDhZdvmA6C25nI.gif" alt="A Button with a fancier hover fill"></p>
<h3>Creating a fancier Button</h3>
<p>Let’s start by styling the foundation for our <code>Button</code>. Nothing special happening here.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  background<span class="token operator">:</span> <span class="token string">'transparent'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  border<span class="token operator">:</span> <span class="token string">'4px solid #276EF1'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  borderRadius<span class="token operator">:</span> <span class="token string">'4px'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  color<span class="token operator">:</span> <span class="token string">'#276EF1'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  cursor<span class="token operator">:</span> <span class="token string">'pointer'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  fontWeight<span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  padding<span class="token operator">:</span> <span class="token string">'8px 16px'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  position<span class="token operator">:</span> <span class="token string">'relative'</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>The trick to our solution is to use a <code>clip-path</code> on our <code>Button</code>'s <code>:after</code> pseudo element. <code>Styletron</code> allows nested objects so we can define media queries, pseudo selectors etc.</p>
<p>We want to copy the <code>Button</code> styling onto the <code>:after</code> element and use the <code>content</code> property for the text. Hardcoding that <code>content</code> property won't do though.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  background<span class="token operator">:</span> <span class="token string">'transparent'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  border<span class="token operator">:</span> <span class="token string">'4px solid #276EF1'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  borderRadius<span class="token operator">:</span> <span class="token string">'4px'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  color<span class="token operator">:</span> <span class="token string">'#276EF1'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  cursor<span class="token operator">:</span> <span class="token string">'pointer'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  fontWeight<span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  padding<span class="token operator">:</span> <span class="token string">'8px 16px'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  position<span class="token operator">:</span> <span class="token string">'relative'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token string">':after'</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    background<span class="token operator">:</span> <span class="token string">'#276EF1'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    bottom<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    color<span class="token operator">:</span> <span class="token string">'#FFFFFF'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    content<span class="token operator">:</span> <span class="token string">'"Click Me!"'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    fontWeight<span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    padding<span class="token operator">:</span> <span class="token string">'8px 16px'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    position<span class="token operator">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    right<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    top<span class="token operator">:</span> <span class="token number">0</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>Fortunately, the second argument to our <code>styled</code> function can also be a <code>function</code>. The parameter for which is the components’ props! That means we can use <code>props.children</code> for the content prop.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token parameter">props</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token string">':after'</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    content<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>children<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></code></pre>
<p>As we are copying styles to the pseudo element, we can extract these into a variable and spread them.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> buttonStyles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token parameter">props</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token operator">...</span>buttonStyles<span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token string">':after'</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token operator">...</span>buttonStyles<span class="token punctuation">,</span></span>
<span class="highlight-line">    background<span class="token operator">:</span> <span class="token string">'#276EF1'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    border<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    bottom<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    borderRadius<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    color<span class="token operator">:</span> <span class="token string">'#FFFFFF'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    content<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>children<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">    left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    position<span class="token operator">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    right<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></code></pre>
<p>Let’s create that <code>clip-path</code> for our fancy effect.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token parameter">props</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token operator">...</span>buttonStyles<span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token string">':after'</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token operator">...</span>buttonStyles<span class="token punctuation">,</span></span>
<span class="highlight-line">    clipPath<span class="token operator">:</span> <span class="token string">'polygon(-25% -5%, -25% -5%, -5% 105%, -25% 105%)'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    transition<span class="token operator">:</span> <span class="token string">'clip-path .25s ease'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token string">':hover:after'</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    clipPath<span class="token operator">:</span> <span class="token string">'polygon(-25% -5%, 105% -5%, 125% 105%, -25% 105%)'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span></code></pre>
<p>When we aren’t hovering the <code>Button</code>, the <code>:after</code> element clips out of sight. On <code>hover</code>, the clip adjusts to reveal the <code>:after</code> element. We add a <code>transition</code> to give an animated effect. Note at this stage that <code>Styletron</code> will handle all the vendor prefixing for us! 🙌</p>
<iframe src="https://codesandbox.io/embed/6z603n7kk?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Clip Path Button w/ Styletron"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
<h3>Theming</h3>
<p>Most buttons come in a variety of colors, think <code>Bootstrap</code> etc. We can do this with theming. To use themes with <code>Styletron</code>, we create a new <code>styled</code> function using <code>React Context</code> ⚛️</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> createContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span></span>
<span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStyled <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'styletron-react'</span></span>
<span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> driver<span class="token punctuation">,</span> getInitialStyle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'styletron-standard'</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token punctuation">{</span> Consumer<span class="token punctuation">,</span> Provider <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">THEME</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  colors<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token constant">PRIMARY</span><span class="token operator">:</span> <span class="token string">'#276EF1'</span><span class="token punctuation">,</span> <span class="token constant">SECONDARY</span><span class="token operator">:</span> <span class="token string">'#95A5A6'</span> <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">ThemeProvider</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token constant">THEME</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">wrapper</span> <span class="token operator">=</span> <span class="token parameter">StyledComponent</span> <span class="token operator">=></span> <span class="token parameter">props</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>Consumer<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">{</span><span class="token parameter">theme</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>StyledComponent <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> $theme<span class="token operator">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>Consumer<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> styled <span class="token operator">=</span> <span class="token function">createStyled</span><span class="token punctuation">(</span><span class="token punctuation">{</span> wrapper<span class="token punctuation">,</span> getInitialStyle<span class="token punctuation">,</span> driver <span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>This gives us a <code>ThemeProvider</code> that we wrap round the root of our app. This makes the theme available as a <code>$theme</code> prop for our components.</p>
<p>That <code>$</code> prefix is important. This is <code>Styletron</code>'s way of filtering out <code>props</code>. Any props without the prefix get passed to the underlying <code>React</code> component. This isn't what we always want. React will throw warnings for <code>DOM</code> props it doesn't recognize. Any <code>props</code> that are style related we should prefix with <code>$</code>.</p>
<p>We can extend our styles by creating functions that will grab the correct color for a <code>Button</code> based on props.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getButtonColor</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> colors <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">.</span>$theme<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token keyword">let</span> color <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token constant">PRIMARY</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>$primary<span class="token punctuation">)</span> color <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token constant">PRIMARY</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>$secondary<span class="token punctuation">)</span> color <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token constant">SECONDARY</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> color<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span></code></pre>
<p>Integrating the functions like so.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token parameter">props</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token function">getButtonColor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">getButtonStyles</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token operator">...</span>styles<span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token string">':after'</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token operator">...</span>styles<span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token operator">...</span>otherStyles</span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token string">':hover:after'</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token operator">...</span>hoverStyles</span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>Will give us themed buttons!</p>
<iframe src="https://codesandbox.io/embed/0mz3p2o7yl?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Themed Clip Path Buttons w/ Styletron"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
<h3>Special props</h3>
<p><code>Styletron</code> also exposes two special props you can use on your components. <code>$as</code> will render the underlying component as a different HTML element.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>Button</span>
<span class="highlight-line">  $<span class="token keyword">as</span><span class="token operator">=</span><span class="token string">'a'</span></span>
<span class="highlight-line">  href<span class="token operator">=</span><span class="token string">'https://styletron.org'</span></span>
<span class="highlight-line">  target<span class="token operator">=</span><span class="token string">'_blank'</span></span>
<span class="highlight-line">  rel<span class="token operator">=</span><span class="token string">'noreferrer noopener'</span><span class="token operator">></span></span>
<span class="highlight-line">  Check out Styletron<span class="token operator">!</span></span>
<span class="highlight-line"><span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span></span></code></pre>
<p>It’s common to see developers want to render an anchor that looks like a button. We could create a <code>Styletron</code> anchor using our <code>Button</code> component.</p>
<iframe src="https://codesandbox.io/embed/qk0znoxrj6?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Themed Clip Path Anchor w/ Styletron"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
<p>The other prop is <code>$ref</code>. This works the same as the <code>ref</code> you will be familiar with. All you need do, is replace instances of <code>ref</code> with <code>$ref</code> where you are using a <code>Styletron</code> component.</p>
<h3>Pitfalls and Drawbacks</h3>
<p>Although there are some, none of these should deter you from using <code>Styletron</code>. There’s no way to select descendants or use combinators such as <code>&gt;</code>, <code>~</code>, <code>+</code> etc. This is not a draw back though. Component design should mitigate this.</p>
<p>There’s no value fallback for properties (Yet 🙂*)*.</p>
<p>Don’t mix shorthand and longhand properties. You can use both but don’t combine them. There’s no guarantee what will take precedence.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// DON'T DO THIS</span></span>
<span class="highlight-line">border<span class="token operator">:</span> <span class="token string">'4px solid blue'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">borderWidth<span class="token operator">:</span> <span class="token string">'10px'</span></span>
<span class="highlight-line"><span class="token comment">// DO EITHER THIS</span></span>
<span class="highlight-line">border<span class="token operator">:</span> <span class="token string">'10px solid blue'</span></span>
<span class="highlight-line"><span class="token comment">// OR THIS</span></span>
<span class="highlight-line">borderColor<span class="token operator">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">borderStyle<span class="token operator">:</span> <span class="token string">'solid'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">borderWidth<span class="token operator">:</span> <span class="token string">'10px'</span></span></code></pre>
<p>It’s also worth noting that any media queries will reorder in a mobile first fashion.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// THIS</span></span>
<span class="highlight-line">screen <span class="token function">and</span> <span class="token punctuation">(</span>min<span class="token operator">-</span>width<span class="token operator">:</span> <span class="token number">1200</span>px<span class="token punctuation">)</span></span>
<span class="highlight-line">screen <span class="token function">and</span> <span class="token punctuation">(</span>min<span class="token operator">-</span>width<span class="token operator">:</span> <span class="token number">768</span>px<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token comment">// BECOMES THIS</span></span>
<span class="highlight-line">screen <span class="token function">and</span> <span class="token punctuation">(</span>min<span class="token operator">-</span>width<span class="token operator">:</span> <span class="token number">768</span>px<span class="token punctuation">)</span></span>
<span class="highlight-line">screen <span class="token function">and</span> <span class="token punctuation">(</span>min<span class="token operator">-</span>width<span class="token operator">:</span> <span class="token number">1200</span>px<span class="token punctuation">)</span></span></code></pre>
<p>Last. It’s hard to debug components built with <code>Styletron</code>. This is true whenever we use atomic CSS though. There’s a workflow impact due to the fact we can’t see an amalgamation of styles for a component. There are dev tools in the works to help with this though 💪 (These are currently at the PR stage)</p>
<h3>Conclusion</h3>
<p><code>Styletron</code> is a great <code>CSS</code> in <code>JS</code> solution that should feel familiar if you’ve tried other <code>CSS</code> in <code>JS</code> offerings. You get the benefit of atomic CSS without the learning curve or politics. The speed gain and file size savings are significant.</p>
<p>You can read more about the performance side of things in Ryan Tsao’s own <a href="https://ryantsao.com/blog/virtual-css-with-styletron">intro to Styletron</a>.</p>
<p>Be sure to check out the <a href="https://www.styletron.org/concepts">concepts</a>.</p>
<p>And have a play with the demo code</p>
<iframe src="https://codesandbox.io/embed/0mz3p2o7yl?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Themed Clip Path Buttons w/ Styletron"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
    ]]></content>
  </entry>
  
  
  <entry>
    <title>Create a Password Generator with Uber&#39;s Base Web</title>
    <link href="https://jhey.dev/writing/create-a-password-generator-with-ubers-base-web/"/>
    <updated>2019-04-02T00:05:18+01:00</updated>
    <id>https://jhey.dev/writing/create-a-password-generator-with-ubers-base-web/</id>
    <content type="html"><![CDATA[
      <p><strong>In this post, you'll learn how to create a basic password generator using Base Web components. If you are unfamiliar with Base Web, please go over the <a href="https://baseweb.design/">Getting started</a> section before continuing with this article.</strong></p>
<p><img src="https://baseweb.design/images/blog/getting-started-with-base-web/result.png" alt="Password Generator Component"></p>
<h2>Setup</h2>
<p>For the sake of simplicity, we'll use <code>create-react-app</code> to bootstrap a React application.</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line">create-react-app password-generator</span>
<span class="highlight-line"><span class="token builtin class-name">cd</span> password-generator</span></code></pre>
<p>Next, we need to pull in the packages for Base Web.</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line"><span class="token function">yarn</span> <span class="token function">add</span> baseui styletron-engine-atomic styletron-react</span></code></pre>
<p>You might be asking &quot;What's Styletron?&quot;. <a href="https://www.styletron.org/">Styletron</a> is a CSS-in-JS solution for component-oriented styling.</p>
<p>As per <a href="https://baseweb.design/getting-started/setup/">Base Web's set up instructions</a>, we need to wrap our app in both the Styletron Provider and the <a href="https://baseweb.design/components/base-provider/">Base Provider</a> before we can begin:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>Provider <span class="token keyword">as</span> StyletronProvider<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'styletron-react'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>Client <span class="token keyword">as</span> Styletron<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'styletron-engine-atomic'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>LightTheme<span class="token punctuation">,</span> BaseProvider<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'baseui'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Styletron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>StyletronProvider value<span class="token operator">=</span><span class="token punctuation">{</span>engine<span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>BaseProvider theme<span class="token operator">=</span><span class="token punctuation">{</span>LightTheme<span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>BaseProvider<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>StyletronProvider<span class="token operator">></span><span class="token punctuation">,</span></span>
<span class="highlight-line">  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p><em>Do you want to learn more about Styletron? Check out the <a href="https://www.styletron.org/">Styletron docs</a>.</em></p>
<h2>What are we building?</h2>
<p>In this post, we'll implement the following mini-app, that can be used to generate passwords. It will look something like this:</p>
<p><img src="https://baseweb.design/images/blog/getting-started-with-base-web/mockup.png" alt="A mockup for our password generator component"></p>
<p>We can create the majority of our UI using the following components</p>
<ul>
<li><a href="https://baseweb.design/components/card">Card</a></li>
<li><a href="https://baseweb.design/components/button">Button</a></li>
<li><a href="https://baseweb.design/components/input">Input</a></li>
<li><a href="https://baseweb.design/components/accordion">Accordion</a></li>
<li><a href="https://baseweb.design/components/slider">Slider</a></li>
<li><a href="https://baseweb.design/components/checkbox">Checkbox</a></li>
</ul>
<p>This puts us in a good spot without needing to make any changes.</p>
<p><img src="https://baseweb.design/images/blog/getting-started-with-base-web/foundation.png" alt="What we get without any styling"></p>
<p>At this stage, we can hook up some logic and we are almost there. It's not pretty though. We need to add some of our own styling tweaks.</p>
<h2>Overrides</h2>
<p>If you've ever consumed component libraries, you've likely hit some hurdles. You may want to pass extra props or tweak the rendering. The common scenario is wanting to adjust styles. Some libraries cater for this by exposing extra verbose props.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>MyAwesomeComponent</span>
<span class="highlight-line">  callToActionsStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span></span>
<span class="highlight-line">  onActionClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span></span>
<span class="highlight-line">  containerStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span></span>
<span class="highlight-line">  style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token operator">/</span><span class="token operator">></span></span></code></pre>
<p>Base Web tackles this with an &quot;Overrides&quot; pattern. It provides a consistent API to override a components characteristics. You are able to override the styles, props and render logic of a component. And this is all made possible through one prop.</p>
<p><em>To learn more, check out the <a href="https://baseweb.design/guides/understanding-overrides/">Overrides guide</a>.</em></p>
<p>Don't throw everything into overrides though. Adjusting your theme values is better if you override the same properties over and over (<em>Read about themes <a href="https://baseweb.design/guides/theming/#theme-properties">here</a></em>).</p>
<p>To customize the <code>Card</code> component to work better for our use-case, we can do something like this:</p>
<pre class="language-jsx"><code class="language-jsx"><span class="highlight-line"><span class="token operator">&lt;</span>Card</span>
<span class="highlight-line">  overrides<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span></span>
<span class="highlight-line">    Root<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      style<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        left<span class="token operator">:</span> <span class="token string">'50%'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        maxWidth<span class="token operator">:</span> <span class="token string">'420px'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        position<span class="token operator">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        top<span class="token operator">:</span> <span class="token string">'20px'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        transform<span class="token operator">:</span> <span class="token string">'translate(-50%, 0)'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        width<span class="token operator">:</span> <span class="token string">'95vw'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">...</span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Card</span></span><span class="token punctuation">></span></span></span></code></pre>
<p>As a next step, let's move the button inside our input that generates a new password every time a user clicks it. We could use the <code>Button</code> component and tweak the positioning. But there is no need. Base Web already caters for scenarios like this:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>Input</span>
<span class="highlight-line">  overrides<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token function-variable function">After</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Button kind<span class="token operator">=</span><span class="token punctuation">{</span><span class="token constant">KIND</span><span class="token punctuation">.</span>minimal<span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>Icon <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token operator">/</span><span class="token operator">></span></span></code></pre>
<p>Using overrides, we can leverage an <code>After</code> option and pass a <code>Button</code> to it.</p>
<p><img src="https://baseweb.design/images/blog/getting-started-with-base-web/input-with-cta.png" alt="Styled Input with a call to action button"></p>
<h2>Adjusting the layout</h2>
<p>Our app looks almost there but the layout for those options doesn't look right. We need some labels and layout constraints. Base Web provides a component that aids with creating these less reusable layout pieces. We can use a <a href="https://baseweb.design/components/block/">Block</a> whenever there's a need to layout UI.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>Block marginBottom<span class="token operator">=</span><span class="token string">"scale800"</span><span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>FormControl label<span class="token operator">=</span><span class="token string">"Length"</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Slider <span class="token punctuation">{</span><span class="token operator">...</span>sliderProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>FormControl<span class="token operator">></span></span>
<span class="highlight-line"><span class="token operator">&lt;</span><span class="token operator">/</span>Block<span class="token operator">></span></span></code></pre>
<p>Alternatively, you can use the <a href="https://baseweb.design/components/use-styletron/">useStyletron</a> hook to achieve the same result:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token punctuation">[</span>css<span class="token punctuation">,</span> theme<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useStyletron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>marginBottom<span class="token operator">:</span> theme<span class="token punctuation">.</span>sizing<span class="token punctuation">.</span>scale800<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>FormControl label<span class="token operator">=</span><span class="token string">"Length"</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Slider <span class="token punctuation">{</span><span class="token operator">...</span>sliderProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>FormControl<span class="token operator">></span></span>
<span class="highlight-line"><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span></span></code></pre>
<h2>Hooking up the password generation</h2>
<p>Let's hook up the logic for our password generator. We will use <a href="https://www.npmjs.com/package/zxcvbn">zxcvbn</a> and <a href="https://www.npmjs.com/package/generate-password">generate-password</a> to handle validation and generation.</p>
<p>Base Web exposes the props we need for various change and click handlers. Except for copying our password to clipboard, interactions will generate a new password.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">setNewPassword</span> <span class="token operator">=</span> <span class="token parameter">p</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> newPassword <span class="token operator">=</span> p</span>
<span class="highlight-line">    <span class="token operator">?</span> p</span>
<span class="highlight-line">    <span class="token operator">:</span> <span class="token function">generatePassword</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token punctuation">,</span> numbers<span class="token punctuation">,</span> uppercase<span class="token punctuation">,</span> symbols<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span>score<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">zxcvbn</span><span class="token punctuation">(</span>newPassword<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token function">setStrength</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token function">setCopied</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token function">setPassword</span><span class="token punctuation">(</span>newPassword<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span></code></pre>
<p>We generate a new password inside an effect whenever one of our options changes. We also generate a new password when our Input action gets clicked.</p>
<h2>Communicating password strength</h2>
<p>One thing we aren't doing yet is communicating how strong a generated password is. We have a strength score but we aren't using it. Let's communicate password strength with a thick colored border on our input.</p>
<p>We can pass our strength score into a function that returns a color ID from our theme.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getStrengthColor</span> <span class="token operator">=</span> <span class="token parameter">strength</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>strength<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span></span>
<span class="highlight-line">      <span class="token keyword">return</span> <span class="token string">'negative400'</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></span>
<span class="highlight-line">      <span class="token keyword">return</span> <span class="token string">'warning400'</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></span>
<span class="highlight-line">      <span class="token keyword">return</span> <span class="token string">'rating400'</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></span>
<span class="highlight-line">      <span class="token keyword">return</span> <span class="token string">'positive200'</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span></span>
<span class="highlight-line">      <span class="token keyword">return</span> <span class="token string">'positive400'</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="highlight-line">      <span class="token keyword">return</span> <span class="token string">'primary50'</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span></code></pre>
<p>Tie that into our <code>Input</code>:</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>Input</span>
<span class="highlight-line">  inputRef<span class="token operator">=</span><span class="token punctuation">{</span>passwordRef<span class="token punctuation">}</span></span>
<span class="highlight-line">  value<span class="token operator">=</span><span class="token punctuation">{</span>password<span class="token punctuation">}</span></span>
<span class="highlight-line">  onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token function">setNewPassword</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">  overrides<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span></span>
<span class="highlight-line">    InputContainer<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token function-variable function">style</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> $theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">        borderLeftColor<span class="token operator">:</span> $theme<span class="token punctuation">.</span>colors<span class="token punctuation">[</span><span class="token function">getStrengthColor</span><span class="token punctuation">(</span>strength<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        borderRightColor<span class="token operator">:</span> $theme<span class="token punctuation">.</span>colors<span class="token punctuation">[</span><span class="token function">getStrengthColor</span><span class="token punctuation">(</span>strength<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        borderTopColor<span class="token operator">:</span> $theme<span class="token punctuation">.</span>colors<span class="token punctuation">[</span><span class="token function">getStrengthColor</span><span class="token punctuation">(</span>strength<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        borderBottomColor<span class="token operator">:</span> $theme<span class="token punctuation">.</span>colors<span class="token punctuation">[</span><span class="token function">getStrengthColor</span><span class="token punctuation">(</span>strength<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        borderLeftWidth<span class="token operator">:</span> $theme<span class="token punctuation">.</span>sizing<span class="token punctuation">.</span>scale200<span class="token punctuation">,</span></span>
<span class="highlight-line">        borderRightWidth<span class="token operator">:</span> $theme<span class="token punctuation">.</span>sizing<span class="token punctuation">.</span>scale200<span class="token punctuation">,</span></span>
<span class="highlight-line">        borderTopWidth<span class="token operator">:</span> $theme<span class="token punctuation">.</span>sizing<span class="token punctuation">.</span>scale200<span class="token punctuation">,</span></span>
<span class="highlight-line">        borderBottomWidth<span class="token operator">:</span> $theme<span class="token punctuation">.</span>sizing<span class="token punctuation">.</span>scale200<span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token function-variable function">After</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token operator">/</span><span class="token operator">></span></span></code></pre>
<p>And this will give us</p>
<p><img src="https://baseweb.design/images/blog/getting-started-with-base-web/strength-meter.gif" alt="Demonstrating a working strength meter indication"></p>
<h2>Conclusion</h2>
<p>With little effort we've put together an example app that uses the Base design language.</p>
<p>By default all the components have the Uber look and feel, but the powerful customization makes for a component library that feels less opinionated.</p>
<p>You can see all the code for this post in the following demo:</p>
<ul>
<li><a href="https://baseweb.design/blog/getting-started-with-base-web/#setup">Setup</a></li>
<li><a href="https://baseweb.design/blog/getting-started-with-base-web/#what-are-we-building">What are we building?</a></li>
<li><a href="https://baseweb.design/blog/getting-started-with-base-web/#overrides">Overrides</a></li>
<li><a href="https://baseweb.design/blog/getting-started-with-base-web/#adjusting-the-layout">Adjusting the layout</a></li>
<li><a href="https://baseweb.design/blog/getting-started-with-base-web/#hooking-up-the-password-generation">Hooking up the password generation</a></li>
<li><a href="https://baseweb.design/blog/getting-started-with-base-web/#communicating-password-strength">Communicating password strength</a></li>
<li><a href="https://baseweb.design/blog/getting-started-with-base-web/#conclusion">Conclusion</a></li>
</ul>
<iframe src="https://codesandbox.io/embed/password-validatorgenerator-w-base-web-forked-pbjkk?fontsize=14&hidenavigation=1&theme=dark&view=preview"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Password Validator/Generator w/ Base Web (forked)"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
    ]]></content>
  </entry>
  
  
  <entry>
    <title>React Higher Order Components in 3 Minutes</title>
    <link href="https://jhey.dev/writing/react-higher-order-components-in-3-minutes/"/>
    <updated>2018-11-22T06:57:33+00:00</updated>
    <id>https://jhey.dev/writing/react-higher-order-components-in-3-minutes/</id>
    <content type="html"><![CDATA[
      <blockquote>
<p>Grasp this useful pattern to stop repeating logic in React Components! 😎</p>
</blockquote>
<h2>What?</h2>
<p>A pattern for when we find ourselves repeating logic across components. They are not part of the <code>React</code> API.</p>
<h2>What?</h2>
<p>They are functions that take components and return new components!</p>
<h2>When?</h2>
<p>When you’re repeating patterns/logic across components.</p>
<p>Examples;</p>
<ul>
<li>Hooking into/subscribing to a data source</li>
<li>Adding interactivity to UI (<em>also achieved with wrapper/render props</em>)</li>
<li>Sorting/filtering input data</li>
</ul>
<h2>A Silly Example</h2>
<p>We have a <code>Mouse</code> component.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Mouse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"mouse"</span> role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span>🐭<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>Let’s make it <code>Draggable</code> using <code>GreenSock</code>’s <code>Draggable</code> module.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function-variable function">componentDidMount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Draggable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"mouse"</span> role<span class="token operator">=</span><span class="token string">"img"</span> ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">=</span> e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>🐭<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p><img src="https://cdn-images-1.medium.com/max/800/1*BsU7epyRljwuwMpbibf9aQ.gif" alt=""></p>
<p>We add <code>Cat</code> 😺</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Cat</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"cat"</span> role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span>😺<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>That needs to be <code>Draggable</code> too ✋ Opportunity for a Higher Order Component(HOC).</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">withDrag</span> <span class="token operator">=</span> <span class="token parameter">Wrapped</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">class</span> <span class="token class-name">WithDrag</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token function-variable function">componentDidMount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Draggable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"draggable__wrapper"</span> ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">=</span> e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Wrapped <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  WithDrag<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">WithDrag(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Wrapped<span class="token punctuation">.</span>displayName <span class="token operator">||</span> Wrapped<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span></span>
<span class="highlight-line">  <span class="token keyword">return</span> WithDrag</span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Our HOC takes a Component and returns a new Component passing <code>props</code>.</p>
<p>Many HOCs inject new props alongside those passed through. That is often an indicator of whether a HOC is suitable. If we aren’t injecting <code>props</code>, we could likely use a wrapper component or <code>render</code> props.</p>
<p>For our HOC, we could achieve the same result with <code>render</code> props. You could argue that a HOC is not suitable. But this is a “silly” example to get you familiar with looking at HOCs. It’s a little more fun than looking at hooking into a data source too! 😉</p>
<p>Let’s apply this HOC to <code>Cat</code> and <code>Mouse</code> 👍</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Mouse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"mouse"</span> role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span>🐭<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Cat</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"cat"</span> role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span>😸<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> DraggableMouse <span class="token operator">=</span> <span class="token function">withDrag</span><span class="token punctuation">(</span>Mouse<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> DraggableCat <span class="token operator">=</span> <span class="token function">withDrag</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>DraggableCat <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>DraggableMouse <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p><img src="https://cdn-images-1.medium.com/max/800/1*tqnzqosc1Ikv_-HlwnNEVA.gif" alt=""></p>
<p>Let’s hook into the <code>onDrag</code> callback and inject the <code>x</code> and <code>y</code> position as <code>props</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">withDrag</span> <span class="token operator">=</span> <span class="token parameter">Wrapped</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">class</span> <span class="token class-name">WithDrag</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token function-variable function">componentDidMount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Draggable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> onDrag<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onDrag <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token function-variable function">onDrag</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">    <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"draggable__wrapper"</span> ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">=</span> e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Wrapped <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span> x<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>x<span class="token punctuation">}</span> y<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>y<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  WithDrag<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">WithDrag(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Wrapped<span class="token punctuation">.</span>displayName <span class="token operator">||</span> Wrapped<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span></span>
<span class="highlight-line">  <span class="token keyword">return</span> WithDrag</span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Mouse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"mouse"</span> role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span></span>
<span class="highlight-line">    🐭</span>
<span class="highlight-line">    <span class="token punctuation">{</span>x <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"mouse__position"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>Now the mouse shows its XY position to the user 🤓</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*7Cw2Ce7zsg_-CJU-m6EYng.gif" alt="Mouse being dragged around and showing its position"></p>
<p>We can also pass <code>props</code> to the HOC. And then filter these out before passing through. For example, passing an <code>onDrag</code> callback.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">withDrag</span> <span class="token operator">=</span> <span class="token parameter">Wrapped</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">class</span> <span class="token class-name">WithDrag</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token function-variable function">componentDidMount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Draggable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> onDrag<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>onDrag <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">const</span> <span class="token punctuation">{</span> onDrag<span class="token punctuation">,</span> <span class="token operator">...</span>passed <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props</span>
<span class="highlight-line">      <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"draggable__wrapper"</span> ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">=</span> e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Wrapped <span class="token punctuation">{</span><span class="token operator">...</span>passed<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  WithDrag<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">WithDrag(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Wrapped<span class="token punctuation">.</span>displayName <span class="token operator">||</span> Wrapped<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span></span>
<span class="highlight-line">  <span class="token keyword">return</span> WithDrag</span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>DraggableMouse onDrag<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>By using a HOC, our components remain simple and the logic remains in one place. Our components only care about what is being passed to them. We can reuse them elsewhere without them being draggable. This makes things easier to maintain.</p>
<h2>DO’s 👍</h2>
<ul>
<li>Use when there’s an opportunity to package up a repeating pattern</li>
<li>Make debugging easier by updating the <code>displayName</code> of the returned <code>Component</code></li>
<li>Pass through <code>props</code> unrelated to the HOC</li>
</ul>
<h2>DON’Ts 👎</h2>
<ul>
<li>Overuse. Another pattern may be more appropriate.</li>
<li>Mutate the original <code>Component</code></li>
<li>Use inside the <code>render</code> method</li>
</ul>
<h2>NOTES ⚠️</h2>
<ul>
<li><code>ref</code>s aren’t passed through</li>
<li><code>static</code> methods must be copied over</li>
<li>Most HOCs can be written with <code>render</code> props and vice versa!</li>
</ul>
<h2>That’s it!</h2>
<p>This is a super small intro to <a href="https://reactjs.org/docs/higher-order-components.html">Higher Order Components</a>.</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Styling in React</title>
    <link href="https://jhey.dev/writing/styling-in-react/"/>
    <updated>2018-03-28T03:08:31+01:00</updated>
    <id>https://jhey.dev/writing/styling-in-react/</id>
    <content type="html"><![CDATA[
      <h2>Are you CSS in JS or CSS out JS? 🎨</h2>
<p>Styling is a huge part of the user experience for your apps. You’ve got a new design and you’re going to build your new awesome app in <code>React</code>. But how do you go about implementing that design?</p>
<p>It would be fair to say that <code>React</code> is pretty popular. So it’s no surprise that there are a multitude of options when it comes to styling <code>React</code> apps. There is no real right or wrong. It’s what feels best for you. The main decision will be going in or out. And by that I mean “CSS <strong>in</strong> JS” or “CSS <strong>out</strong> JS” 💅 Of course, if you’re styling a <code>React Native</code> app, that decision has already been made for you.</p>
<p>For those in camp <strong>TL;DR,</strong> There are many options when it comes to styling your <code>React</code> apps. Go with what feels best for you. Whether you go <code>CSS</code> in or out, I recommend colocating styles with their components 🙏 Be open to trying out new techniques and packages. You might surprise yourself. For more on styling <code>React</code> apps be sure to check out the <a href="https://reactjs.org/docs/faq-styling.html">Styling and CSS</a> FAQ in the docs!</p>
<h2>General structure and approach</h2>
<p>Before we dig into some of the options let’s consider structure and approach. We won’t dig into this too much I promise.</p>
<p>In general we should try to colocate styles with their respective components. This can make life a lot easier when your projects become complex. It’s also easier for those new to a project to understand where things live. If you’re opting to go the “<code>CSS</code> in <code>JS</code>” route, then you can write your styles in the component file. I would recommend extracting styles into their own files though. Smaller files are going to be easier to read and digest; especially for newcomers to a project.</p>
<p>One approach I like is to use an extension prefix. Consider a <code>Nav</code> component. I would create a folder for <code>Nav</code> inside a <code>Components</code> folder. I could then create <code>index.js</code> and <code>style.js/css</code>. You could go a step further with <code>nav.style.js</code>. This makes things like searching for a file with an IDE much easier in my experience.</p>
<p>Aside from structure, it should go without saying that it’s wise to try and reuse styles where possible. Extract common styles into their own stylesheets or modules. Consuming reusable patterns will reduce code bloat and make maintenance easier.</p>
<hr>
<p>With that out of the way, let’s move onto our options! 👍</p>
<p>The main options fall into two categories. <code>CSS</code> <strong>in</strong> <code>JS</code> or <code>CSS</code> <strong>out</strong> of <code>JS</code>. Both will work great!</p>
<h2>Good ‘ole CSS 👍</h2>
<p>Let’s start with <code>CSS</code>. It’s likely to be your first port of call and what you’re familiar with. Using <code>CSS</code> will entail assigning classes to your components using the <code>className</code> prop.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Emoji</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> large <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"emoji"</span> role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">{</span>children<span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<h3>Classes and classnames</h3>
<p>As with any project, you’ll want to spend some time considering appropriate classes. Opt for using a classing standard like <code>BEM</code>. Not long into working with the <code>className</code> prop, you’re likely to come across an issue. The issue being how to assign many classes based on <code>state</code>, <code>props</code> etc.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Emoji</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> large <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">'emoji'</span><span class="token punctuation">,</span> large <span class="token operator">?</span> <span class="token string">'emoji--large'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">}</span> role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">{</span>children<span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>Using an <code>Array</code> like this won’t work. You can use template literals of course.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Emoji</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> large <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">emoji </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>large <span class="token operator">?</span> <span class="token string">'emoji--large'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span> role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">{</span>children<span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>You could also opt to use <code>Array.join</code> if you wanted 👍</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Emoji</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> large <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">'emoji'</span><span class="token punctuation">,</span> large <span class="token operator">?</span> <span class="token string">'emoji--large'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">}</span> role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">{</span>children<span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>Alternatively, you might find more joy using the <code>classnames</code> package 👍</p>
<h3>CSS Modules</h3>
<p>If you‘re not into using class name standards, <code>CSS</code> <a href="https://github.com/css-modules/css-modules">modules</a> might be right for you. With <code>postcss-modules</code> we can use locally scoped animation and class names.</p>
<p>Writing something like</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> emoji<span class="token punctuation">,</span> large <span class="token punctuation">}</span> <span class="token keyword">from</span> '<span class="token punctuation">.</span><span class="token operator">/</span>emoji<span class="token punctuation">.</span>css</span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Emoji</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> large<span class="token operator">:</span> isLarge <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>emoji<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>isLarge <span class="token operator">?</span> large <span class="token operator">:</span> <span class="token string">''</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span> role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">{</span>children<span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>Will give us <code>HTML</code> that uses locally scoped classes</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_emoji_1fqtj_1 _large_1fqtj_4<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>😸<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span></code></pre>
<h3>Being performant + code splitting</h3>
<p>Although the majority of your app won’t be in the <code>DOM</code> on load, that doesn’t mean <code>CSS</code> performance rules don’t apply. You will still want to tackle <a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css">render blocking</a> <code>CSS</code>. You can do this by inlining critical styles and only loading what’s necessary for the root of your app.</p>
<p>And that’s a great use case for utilising <a href="https://reactjs.org/docs/code-splitting.html">code splitting</a> in your <code>React</code> apps. With code splitting you will be able to do things like lazy load styles for routes within your app.</p>
<hr>
<h2>CSS in JS 😍</h2>
<p>The alternative to <code>CSS</code> <strong>out</strong> of <code>JS</code> is to go <code>CSS</code> <strong>in</strong> <code>JS</code> ✨</p>
<p>Whilst the majority of your styling is now defined in <code>JS</code>, you will likely need to define some in <code>CSS</code>. Inlining some critical styles and defining base styling will aid with page performance 👌 Unless you are using <code>SSR</code>, there will still be a small delay between page load and app load. You can check performance for your app by running an <code>Audit</code> through the developer tools in <code>Chrome</code>.</p>
<h3>Benefits of CSS in JS?</h3>
<p>You’ve opted to go <code>CSS</code> in <code>JS</code>. You are now defining your styles within <code>JavaScript</code>. The major benefit being now that you can abstract styles to the component level. You can separate styles from logic within your components. This is important. You are getting the full power of <code>JavaScript</code> to use within your styling.</p>
<p>Not only that, you will only create the styles you need and only load them when appropriate. You can even test your styles! There aren’t the only benefits.</p>
<h3>How does it work?</h3>
<p>At it’s simplest, through inline styling. But, this is not usually how <code>CSS</code> in <code>JS</code> works. We are likely to use a third party package for our <code>CSS</code> in <code>JS</code>. These packages will do the heavy lifting for us 💪 In most cases, these packages will take our style definitions and create class names for them. These styles are then inlined within a <code>style</code> tag inside the <code>head</code> of the page <code>document</code>. A benefit to this approach being that we aren’t duplicating styles. It also makes the <code>DOM</code> easier to inspect.</p>
<p>Here’s a very simple example using <code>glamorous</code>. <code>AppHeading</code> isn’t very useful here but there for demo purposes.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> Heading <span class="token operator">=</span> glamorous<span class="token punctuation">.</span><span class="token function">h1</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  fontSize<span class="token operator">:</span> <span class="token number">100</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">AppHeading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>Heading<span class="token operator">></span>Hi 👋<span class="token operator">&lt;</span><span class="token operator">/</span>Heading<span class="token operator">></span></span></code></pre>
<p>This would create a <code>h1</code> with a unique <code>class</code> generated for it.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css-uhtiv5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hi 👋<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span></code></pre>
<p>Note the <code>class</code> name. A style rule will have been inlined 👍</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
<span class="highlight-line">  <span class="token selector">.css-uhtiv5</span> <span class="token punctuation">{</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p>Before digging into third party <code>CSS</code> in <code>JS</code>, let’s roll back to creating it ourself to understand the core benefits.</p>
<h3>CSS in JS using inline styles</h3>
<p>The premise of <code>CSS</code> in <code>JS</code> is exactly that. At it’s core, we define styling within <code>JavaScript</code> using <code>Object</code>s or template literals. A basic example being to create a style definition and apply it inline to an element. Unfortunately, we can’t pass an <code>Array</code> of <code>Object</code>s but we can pass a merging of <code>Objects</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> emoji<span class="token punctuation">,</span> large <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./emoji.style'</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Emoji</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> large<span class="token operator">:</span> isLarge <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> emoji<span class="token punctuation">,</span> isLarge <span class="token operator">?</span> large <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">{</span>children<span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>In this example, two styles <code>emoji</code> and <code>large</code> are imported. They are conditionally merged based on props.</p>
<p>How might those styles look? They could simply be as follows</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> emoji <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  fontSize<span class="token operator">:</span> <span class="token string">'8rem'</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">const</span> large <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  fontSize<span class="token operator">:</span> <span class="token string">'16rem'</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Note, in most cases when defining styles within <code>JavaScript</code>, we will use <code>camelCase</code>. Numbers are likely to default to <code>pixel</code>s too.</p>
<p>Those styles don’t look very efficient, do they? 👎</p>
<p>A major benefit of defining <code>CSS</code> in <code>JS</code> is to be able to conditionally generate styles. We can refactor our styles into a function that returns the style for our component 💪</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">EmojiStyle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> large <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  fontSize<span class="token operator">:</span> large <span class="token operator">?</span> <span class="token string">'16rem'</span> <span class="token operator">:</span> <span class="token string">'8rem'</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Emoji</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children<span class="token punctuation">,</span> large <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">EmojiStyle</span><span class="token punctuation">(</span><span class="token punctuation">{</span> large <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">{</span>children<span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>But, things are going to get pretty tedious pretty quick. That’s because we will be writing these styling functions over and over. And you’ll also have to keep up with maintaining them. You’re also inlining everything 😭</p>
<h3>Third party packages example</h3>
<p>Luckily, there are some great third party packages to aid with handling <code>CSS</code> in <code>JS</code> 😌</p>
<p>I don’t have experience with them all so I will be using <code>styled-components</code> for these examples. It’s my personal favorite and the one I have most experience with 😅 But there are many options out there. Michele Bertoli has done a great job of curating them <a href="https://github.com/MicheleBertoli/css-in-js">here</a> 👏</p>
<p>Don’t worry though as I won’t dig too far into third party packages ⛏ This is because you’ll likely want to explore for yourself and create your own preference. We will run through a very simple example so we can see the benefits.</p>
<p>If you’d rather take a quick look at <code>styled-components</code> before going any further, check it out <a href="https://www.styled-components.com/docs/basics#getting-started">here</a> 👍 Don’t worry though, I will keep any examples intuitive and simple.</p>
<p>For a more thorough look at <code>styled-components</code>, I’d strongly recommend watching this fantastic video</p>
<div class="post__embed-container">
      <iframe loading="lazy" class="post__embed" src="https://www.youtube.com/embed/bIK2NwoK9xk" allow="encrypted-media; picture-in-picture"></iframe>
    </div>
<p>Let’s start simple. If we take our example from above, we could transform that into an <code>Emoji</code> styled component.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Emoji <span class="token operator">=</span> styled<span class="token punctuation">.</span>span<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
<span class="highlight-line">  font-size: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token parameter">p</span> <span class="token operator">=></span> p<span class="token punctuation">.</span>large <span class="token operator">?</span> <span class="token number">12</span> <span class="token operator">:</span> <span class="token number">8</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">rem;</span>
</span><span class="token template-punctuation string">`</span></span></code></pre>
<p>Note how we are writing plain <code>CSS</code> there 👍 <code>styled-components</code> uses tagged template literals to support all <code>CSS</code>. You can create animations, use pseudo elements, everything is vendor prefixed for you!</p>
<p>For our example, it should be clear what’s happening here and how we could use it.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">MyFavoriteEmojis</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Emoji<span class="token operator">></span>😅<span class="token operator">&lt;</span><span class="token operator">/</span>Emoji<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Emoji<span class="token operator">></span>😎<span class="token operator">&lt;</span><span class="token operator">/</span>Emoji<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Emoji<span class="token operator">></span>👍<span class="token operator">&lt;</span><span class="token operator">/</span>Emoji<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>Want to make one larger? Boom 💣 It’s that easy.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">MyFavoriteEmojis</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Emoji<span class="token operator">></span>😅<span class="token operator">&lt;</span><span class="token operator">/</span>Emoji<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Emoji large<span class="token operator">></span>😎<span class="token operator">&lt;</span><span class="token operator">/</span>Emoji<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Emoji<span class="token operator">></span>👍<span class="token operator">&lt;</span><span class="token operator">/</span>Emoji<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>You may notice something already. Not only do we get conditional styling but our styled component gives us context.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">MyFavoriteEmojis</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"emoji"</span> role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span>😅<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"emoji"</span> large role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span>😎<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"emoji"</span> role<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span>👍<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>If we were to use <code>span</code>s, we would lose that context. If we were to use our stateless inline <code>Emoji</code> component from above, we wouldn’t get the maintenance benefits. Of course, with this example being very small, it’s may be hard to justify the switch. But think larger than that and you are likely to see the benefits.</p>
<p>Consider apps you have written that use several <code>div</code>s within a component. Using a <code>CSS</code> in <code>JS</code> solution, we not only get the power of <code>CSS</code> in <code>JS</code> but we can provide context to smaller elements. Smaller elements whose sole purpose may be to provide style.</p>
<p>And to reiterate, this is important. We are able to separate styles from logic.</p>
<p>Consider the example of a sliding side bar navigation menu.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">SideBarNav</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      open</span>
<span class="highlight-line">    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state</span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      items</span>
<span class="highlight-line">    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props</span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>nav className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">super-nav </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>open <span class="token operator">?</span> <span class="token string">'super-nav--open'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>ul className<span class="token operator">=</span><span class="token string">"super-nav__list"</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token punctuation">{</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span>li className<span class="token operator">=</span><span class="token string">"super-nav__item"</span><span class="token operator">></span></span>
<span class="highlight-line">              <span class="token operator">&lt;</span>label<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>label<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></span>
<span class="highlight-line">          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>nav<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>There’s a bit going on there already without looking at styling. But consider that our <code>CSS</code> will have to contain styling for when the nav is open and closed 👎</p>
<p>Using <code>styled-components</code> we could create something more along the lines of</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">SideBarNav</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      open</span>
<span class="highlight-line">    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state</span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      items</span>
<span class="highlight-line">    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props</span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Container open<span class="token operator">=</span><span class="token punctuation">{</span>open<span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>Items<span class="token operator">></span></span>
<span class="highlight-line">          <span class="token punctuation">{</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span>Item<span class="token operator">></span></span>
<span class="highlight-line">              <span class="token operator">&lt;</span>ItemLabel<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>label<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ItemLabel<span class="token operator">></span></span>
<span class="highlight-line">            <span class="token operator">&lt;</span><span class="token operator">/</span>Item<span class="token operator">></span></span>
<span class="highlight-line">          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span><span class="token operator">/</span>Items<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>Container<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That is so much clearer 😍 Any styling declaration via <code>classNames</code> are extracted and we are left with building blocks to create our component 👌</p>
<p>Our <code>Container</code> component may look like this</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Container <span class="token operator">=</span> styled<span class="token punctuation">.</span>nav<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
<span class="highlight-line">  background: red;</span>
<span class="highlight-line">  left: 0;</span>
<span class="highlight-line">  position: absolute;</span>
<span class="highlight-line">  top: 0;</span>
<span class="highlight-line">  transform: translateX(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token parameter">p</span> <span class="token operator">=></span> p<span class="token punctuation">.</span>open <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">100</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%);</span>
<span class="highlight-line">  transition: transform 0.25s;</span>
<span class="highlight-line">  width: 250px;</span>
</span><span class="token template-punctuation string">`</span></span></code></pre>
<p>These styled components give us small manageable blocks to build our apps with.</p>
<p>Once you start digging into using <code>CSS</code> in <code>JS</code> you start to sense its benefits. The power of <code>JavaScript</code> for your styling, better structure and context for your <code>JSX</code>.</p>
<h2>React Native</h2>
<p>It’s worth mentioning <code>react-native</code> apps and how you might style them. With <code>react-native</code>, you’re going <code>CSS</code> in <code>JS</code>. There is no notion of <code>className</code>. Everything is inline through the <code>style</code> property. But you can pass arrays of styles 😉</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>TouchableOpacity style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  backgroundColor<span class="token operator">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  height<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  width<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> secondary <span class="token operator">?</span> <span class="token punctuation">{</span> backgroundColor<span class="token operator">:</span> <span class="token string">'blue'</span> <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span></span>
<span class="highlight-line">    height<span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    width<span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontFamily<span class="token operator">:</span> <span class="token string">'Lato'</span><span class="token punctuation">,</span> fontSize<span class="token operator">:</span> <span class="token string">'24'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>Hey 👋<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span></span>
<span class="highlight-line"><span class="token operator">&lt;</span><span class="token operator">/</span>TouchableOpacity<span class="token operator">></span></span></code></pre>
<p>You’ll also get <code>StyleSheet</code>. A helper for creating your <code>react-native</code> styles.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  button<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    backgroundColor<span class="token operator">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    height<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    width<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  secondary<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    backgroundColor<span class="token operator">:</span> <span class="token string">'blue'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  content<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    height<span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    width<span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  text<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    fontFamily<span class="token operator">:</span> <span class="token string">'Lato'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    fontSize<span class="token operator">:</span> <span class="token string">'24'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>Which means you can tidy up a little like this</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>TouchableOpacity style<span class="token operator">=</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token punctuation">[</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">,</span> secondary <span class="token operator">?</span> styles<span class="token punctuation">.</span>secondary <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">></span>Hey 👋<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span></span>
<span class="highlight-line"><span class="token operator">&lt;</span><span class="token operator">/</span>TouchableOpacity<span class="token operator">></span></span></code></pre>
<p>But if you wanted to have some consistency across platforms, you could continue with <code>styled-components</code>! They have a native implementation which is pretty sweet if you ask me 👏</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Button <span class="token operator">=</span> styled<span class="token punctuation">.</span>TouchableOpacity<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
<span class="highlight-line">  background-color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token parameter">p</span> <span class="token operator">=></span> p<span class="token punctuation">.</span>secondary <span class="token operator">?</span> <span class="token string">'blue'</span> <span class="token operator">:</span> <span class="token string">'red'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span>
<span class="highlight-line">  height: 100;</span>
<span class="highlight-line">  width: 200;</span>
</span><span class="token template-punctuation string">`</span></span>
<span class="token keyword">const</span> ButtonContent <span class="token operator">=</span> styled<span class="token punctuation">.</span>View<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
<span class="highlight-line">  height: 100%;</span>
<span class="highlight-line">  width: 100%;</span>
</span><span class="token template-punctuation string">`</span></span>
<span class="token keyword">const</span> ButtonText <span class="token operator">=</span> styled<span class="token punctuation">.</span>Text<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
<span class="highlight-line">  font-family: 'Lato';</span>
<span class="highlight-line">  font-size: 24;</span>
</span><span class="token template-punctuation string">`</span></span></code></pre>
<p>Giving you a nice clean component structure of</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>Button secondary<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>secondary<span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>ButtonContent<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>ButtonText<span class="token operator">></span>Hey 👋<span class="token operator">&lt;</span><span class="token operator">/</span>ButtonText<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>ButtonContent<span class="token operator">></span></span>
<span class="highlight-line"><span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span></span></code></pre>
<h2>That’s it!</h2>
<p>If you’ve made it this far, thanks for reading 🙌 It’s not the easiest subject to write about but I hope you gained something from it.</p>
<p>We’ve taken a look at the whole <code>CSS</code> in or out of <code>JS</code> topic. For web applications, there does seem to be a shift towards going <code>CSS</code> in <code>JS</code>, at least for now. Regardless of which way you go you’ll still likely need to write or use some native <code>CSS</code> at some point.</p>
<p>If you do find yourself making the switch, I recommend checking out <code>styled-components</code>. It’s very easy to pick up.</p>
<p>As always, any questions or suggestions, please feel free to leave a response or <a href="https://twitter.com/@jh3yy">tweet</a> me 🐦!</p>
<h3>Further Reading</h3>
<ul>
<li><a href="https://reactjs.org/docs/faq-styling.html">Styling FAQ</a> — <code>React</code> docs</li>
<li><a href="https://developers.google.com/web/tools/lighthouse/audits/blocking-resources">Render blocking resources</a> — Google Developers</li>
<li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css">Render blocking CSS</a> — Google Developers</li>
<li><a href="https://github.com/MicheleBertoli/css-in-js">CSS in JS comparison</a> — Michele Bertoli</li>
<li><a href="https://www.npmjs.com/package/classnames">classnames package</a> — <code>npm</code></li>
</ul>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>JavaScript&#39;s Page Visibility API</title>
    <link href="https://jhey.dev/writing/javascripts-page-visibility-api/"/>
    <updated>2018-03-13T16:31:07+00:00</updated>
    <id>https://jhey.dev/writing/javascripts-page-visibility-api/</id>
    <content type="html"><![CDATA[
      <blockquote>
<p>I don’t want to listen to your promo video when I switch tabs 🐒</p>
</blockquote>
<p>For those not familiar, the <code>Page Visibility API</code> enables you to detect when a page is visible. This is useful when your site is using one of many browser tabs in a users browser window.</p>
<p>For those in camp <strong>TL;DR</strong>, use the <code>Page Visibility API</code> to do things like pause media when a user navigates to another tab. This has the major benefit of saving resources on a users machine so that they don’t close your app in haste.</p>
<h2>Why?</h2>
<p>The main reason is to save resources on a users machine whilst they’re not using a page. Not doing so, might prompt a user to close your site in haste assuming it’s the culprit slowing down their browser 👎</p>
<h2>When?</h2>
<p>Use the <code>Page Visibility API</code> to do certain things when a user navigates to another tab.</p>
<ul>
<li>Pause video and audio 🎵</li>
<li>Pause animations 🎞</li>
<li>Stop any network requests being made 📞</li>
<li>Any other things you might want to do when the user navigates away to another tab. For example, you might change the <code>document.title</code> or play a sound 🔈</li>
</ul>
<h2>How?</h2>
<p>We need to bind an event listener for the <code>visibilitychange</code> event. When this event fires, we can then check the value of <code>document.hidden</code>. Be aware that older versions of browser will update <code>document.msHidden</code> and <code>document.webkitHidden</code>.</p>
<p>Let’s put together a basic example. Consider this tongue in cheek site user retention strategy I tweeted recently 😜</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  document<span class="token punctuation">.</span>title <span class="token operator">=</span> document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token string">'😭 Come back! 😭'</span> <span class="token operator">:</span> <span class="token string">'Awesome Site! 👍'</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'visibilitychange'</span><span class="token punctuation">,</span> handleChange<span class="token punctuation">)</span></span></code></pre>
<p>Might not be the most effective use of the Page Visibility API but shows how easy it is to put something together.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*0K-QVPBHXyoOT_xwHr_0vw.gif" alt=""></p>
<p>You could update the <code>document.title</code> with something useful when the tab is inactive. Notifications is one use case that springs to mind. Updating a sports score for a user if they are following text commentary could be another use case.</p>
<p>You’re not limited to updating the <code>document.title</code>. You could do many things. You could pause a video, mute some audio or even bring your site to a complete halt ⏱</p>
<p>If you're daring, you might even do something to grab your users attention. However, please be wary of performance and not annoying your users.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> audio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token string">'since-youve-been-gone.mp3'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  document<span class="token punctuation">.</span>title <span class="token operator">=</span> document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token string">'😭 Come back! 😭'</span> <span class="token operator">:</span> <span class="token string">'Awesome Site! 👍'</span></span>
<span class="highlight-line">  audio<span class="token punctuation">[</span>document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token string">'play'</span> <span class="token operator">:</span> <span class="token string">'pause'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'visibilitychange'</span><span class="token punctuation">,</span> handleChange<span class="token punctuation">)</span></span></code></pre>
<p>For example, this demo plays party music when the user changes tab. Turn your speaker volume down!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="QWKxJXK"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/QWKxJXK">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>That’s it!</h2>
<p>It’s a short article today. In my view the <code>Page Visibility API</code> is often overlooked. It can be a nice touch to your sites and apps. In some cases, this small feature can add significant value to the user experience of your site.</p>
<p>You can read a little more in depth about the <code>Page Visibility API</code> on the <code>MDN</code> website <a href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API">here</a>.</p>
<p>And here’s a demo!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="WzQdKx"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/WzQdKx">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>React&#39;s Safe Context API</title>
    <link href="https://jhey.dev/writing/reacts-safe-context-api/"/>
    <updated>2018-03-08T17:14:45+00:00</updated>
    <id>https://jhey.dev/writing/reacts-safe-context-api/</id>
    <content type="html"><![CDATA[
      <blockquote>
<p>Let your props go spelunking without guiding them ⛏</p>
</blockquote>
<p>Ever needed to pass a prop down through many levels of the component tree? Did you do it manually? It’s not ideal is it? Did it have to pass through components where it looked out of place?</p>
<p>The <code>Context API</code> solves this issue. It has actually been around for some time. It’s purpose is to aid with that specific scenario 🎉</p>
<p>But in older versions of <code>React</code>, you <strong>should not</strong> use it ⚠️</p>
<blockquote>
<p>If you want your application to be stable, don’t use context. It is an experimental API and it is likely to break in future releases of React. — <em><strong>React docs</strong></em></p>
</blockquote>
<p>It’s was an experimental API with a multitude of warnings against using it. In many cases the docs suggested alternative solutions, avoiding it altogether or reconsidering your design choices. You can read about the drawbacks of the current Context API <a href="https://github.com/reactjs/rfcs/blob/master/text/0002-new-version-of-context.md#drawbacks-of-the-existing-version-of-context">here</a> 📖</p>
<p>The good news is there’s a new <code>Context API</code> as of <code>React@16.3</code>! And it’s much better 🙌</p>
<p>So, if you hadn’t heard of or used the <code>Context API</code> until now, there’s no need for FOMO 😅</p>
<p>For those in camp <strong>TL;DR</strong>, there is a new safe version of the <code>Context API</code> 🎉 It aids with providing context to components further down the component tree. Here’s a demo of a theme toggle using the new safe version that’s currently obtainable 👍</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="WzeJZz"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/WzeJZz">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>When Would I Need the Context API?</h2>
<p>It’s hard to think of an array of scenarios in which you’d need to use the <code>Context API</code>. But those that spring to mind would be</p>
<ul>
<li>Passing through theming options</li>
<li>Passing network activity status</li>
<li>Passing locale information</li>
<li>Passing user related metadata</li>
</ul>
<p>If you have any other examples, please leave a response or a note and I’ll add them in 😉</p>
<h2>Basic Theming Example</h2>
<p>Let’s consider one of those scenarios. One simple example might be how we theme components lower down the component tree within our app. There are various ways to deal with this scenario. The simplest solution may be to change a class on the body element. CSS rules can then reflect theming changes. But in our scenario, we aren’t doing that. We’re being cool and doing the whole “CSS in JS” thing 😎</p>
<p>We will need to pass a <code>theme</code> prop down the component tree that components use to define their appearance.</p>
<p>Let’s consider a super simple <code>Button</code> component. It accepts <code>theme</code> and <code>text</code> as props.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> text<span class="token punctuation">,</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>button style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> background<span class="token operator">:</span> theme <span class="token operator">===</span> <span class="token string">'night'</span> <span class="token operator">?</span> <span class="token string">'#fafafa'</span> <span class="token operator">:</span> <span class="token string">'#111111'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">{</span>text<span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>The issue here is that we have to pass that <code>theme</code> prop down through every parent component. Even when using a state container such as <code>redux</code> we may still end up traversing many components.</p>
<h2>How Might we Handle it Currently?</h2>
<p>There are ways we could currently handle this. The first is of course to pass that <code>theme</code> prop through every component in the component tree. Another way is to leverage <code>ES6</code> and use the spread operator. It feels a little dirty but it does work.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>SomeParentComponent data<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span></code></pre>
<p>A good thing about this technique it that we can define the props we care about. But we can still see that all the other props are being passed down the tree. It’s verbose enough and it’s easy to implement. In many cases it will probably suffice 👍</p>
<h2>How Might we Handle it With the Context API?</h2>
<p>The following implementation is based on what’s obtainable as of <code>React@16.3.0</code> 🤓</p>
<p>To use the Context API, we will create a Context. In our example we would create a context for theme. Something like</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> createContext<span class="token punctuation">,</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span></span>
<span class="highlight-line"><span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span></span></code></pre>
<p>When creating a Context we pass a value parameter. This will become the <code>defaultValue</code> and the <code>currentValue</code>. It will likely be a good idea to use something like <code>key-mirror</code> here to create string constants.</p>
<p>In fact, you could take it a step further and create a module for each context.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> createContext<span class="token punctuation">,</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span></span>
<span class="highlight-line"><span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">default</span> ThemeContext</span></code></pre>
<p>The new context exposes a <code>Provider</code> and <code>Consumer</code>.</p>
<h3>Providers</h3>
<p>We can use a <code>Provider</code> as a wrapper to components that will need access to the current context value. Let’s consider a simple component that’s a page within an app.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> busy<span class="token punctuation">,</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Provider<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>Page<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Title text<span class="token operator">=</span><span class="token string">"Home"</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>NetworkIndicator active<span class="token operator">=</span><span class="token punctuation">{</span>busy<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>Content data<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Page<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Provider<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>Here, the <code>ThemeContext</code> <code>Provider</code> will pass its value to any <code>Consumer</code> that wants it. Currently, that value will always be <code>day</code> ☀️ which isn’t particularly useful 🤔</p>
<p>To update the value, we will use a <code>prop</code> on the <code>Provider</code>. This could be set with component state for example 😃</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">Home</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    theme<span class="token operator">:</span> <span class="token string">'night'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> busy<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props</span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> theme <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state</span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>Page<span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Title text<span class="token operator">=</span><span class="token string">"Home"</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>NetworkIndicator active<span class="token operator">=</span><span class="token punctuation">{</span>busy<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Content data<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>button</span>
<span class="highlight-line">            onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span></span>
<span class="highlight-line">              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> theme<span class="token operator">:</span> theme <span class="token operator">===</span> <span class="token string">'day'</span> <span class="token operator">?</span> <span class="token string">'night'</span> <span class="token operator">:</span> <span class="token string">'day'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">            <span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">            Toggle Theme</span>
<span class="highlight-line">          <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span><span class="token operator">/</span>Page<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Provider<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Here, we’ve just updated the component to have state for storing the theme value. We’ve added a <code>button</code> for toggling the <code>theme</code>.</p>
<p>How about updating that value from within a child component down the tree? It’s actually pretty simple. We can pass that <code>setState</code> function into the <code>Context</code> value. This may feel familiar to those who have used <code>redux</code>. We are making an action available on <code>props</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">Home</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    theme<span class="token operator">:</span> <span class="token string">'night'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token function-variable function">toggleTheme</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span></span>
<span class="highlight-line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> theme<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>theme <span class="token operator">===</span> <span class="token string">'day'</span> <span class="token operator">?</span> <span class="token string">'night'</span> <span class="token operator">:</span> <span class="token string">'day'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> state<span class="token punctuation">,</span> toggleTheme <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> busy<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> props</span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> theme <span class="token punctuation">}</span> <span class="token operator">=</span> state</span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> theme<span class="token punctuation">,</span> toggleTheme <span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>Page<span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Title text<span class="token operator">=</span><span class="token string">"Home"</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>NetworkIndicator active<span class="token operator">=</span><span class="token punctuation">{</span>busy<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Content data<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>button</span>
<span class="highlight-line">            onClick<span class="token operator">=</span><span class="token punctuation">{</span>toggleTheme<span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">            Toggle Theme</span>
<span class="highlight-line">          <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span><span class="token operator">/</span>Page<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Provider<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>You would then be able to consume and invoke <code>toggleTheme</code> further down the component tree 🎉</p>
<p>The <code>Provider</code> has some interesting possible uses. You can have many <code>Provider</code> instances. They have their own scope. For example, you may have a <code>Provider</code> higher up the component tree that is using the value <code>day</code>. But at the same time you could have a <code>Provider</code> lower down the component tree using <code>night</code> as the value. The lower <code>Provider</code> is not affected by the higher one even though they come from the same <code>Context</code>.</p>
<h3>Consumers</h3>
<p>It’s all good providing that <code>theme</code> value, but how do we consume it? We will need a <code>Consumer</code>. Let’s consider our <code>Button</code> component from earlier.</p>
<p>Updating it might look like this</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> text <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">{</span><span class="token parameter">theme</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>button style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> background<span class="token operator">:</span> theme <span class="token operator">===</span> <span class="token string">'night'</span> <span class="token operator">?</span> <span class="token string">'#fafafa'</span> <span class="token operator">:</span> <span class="token string">'#111111'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token punctuation">{</span>text<span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>The consumer will pass a render prop which is the current value for the <code>Context</code> 👍</p>
<p>How about if we changed our <code>Button</code> component to only provide <code>children</code> as a prop?</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">Home</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    theme<span class="token operator">:</span> <span class="token string">'night'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token function-variable function">toggleTheme</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span></span>
<span class="highlight-line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> theme<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>theme <span class="token operator">===</span> <span class="token string">'day'</span> <span class="token operator">?</span> <span class="token string">'night'</span> <span class="token operator">:</span> <span class="token string">'day'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> state<span class="token punctuation">,</span> toggleTheme <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> busy<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> props</span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> theme <span class="token punctuation">}</span> <span class="token operator">=</span> state</span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> theme<span class="token punctuation">,</span> toggleTheme <span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span>Page<span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Title text<span class="token operator">=</span><span class="token string">"Home"</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>NetworkIndicator active<span class="token operator">=</span><span class="token punctuation">{</span>busy<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Content data<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>
<span class="highlight-line">          <span class="token operator">&lt;</span>Button<span class="token operator">></span>Toggle Theme<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span></span>
<span class="highlight-line">        <span class="token operator">&lt;</span><span class="token operator">/</span>Page<span class="token operator">></span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Provider<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>It’s not best practice but for the sake of demo we could also have the <code>Button</code> component bind its own <code>onClick</code>. As <code>toggleTheme</code> is available via context we can bind <code>onClick</code> to it within the component.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> text <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>theme<span class="token punctuation">,</span> toggleTheme<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span>button</span>
<span class="highlight-line">        onClick<span class="token operator">=</span><span class="token punctuation">{</span>toggleTheme<span class="token punctuation">}</span></span>
<span class="highlight-line">        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> background<span class="token operator">:</span> theme <span class="token operator">===</span> <span class="token string">'night'</span> <span class="token operator">?</span> <span class="token string">'#fafafa'</span> <span class="token operator">:</span> <span class="token string">'#111111'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span></span>
<span class="highlight-line">        <span class="token punctuation">{</span>text<span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></span>
<span class="highlight-line">    <span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span></span>
<span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>This way, it’s possible to pass actions down the component tree via the <code>Context API</code> 🎉</p>
<p>Much like Providers, you can have many Consumers within the component tree.</p>
<h2>That’s it!</h2>
<p>We’ve taken a brief look at what you can do with the safe version of the <code>Context API</code>.</p>
<p>I think it looks pretty sweet 🍭</p>
<p>Here’s the <a href="https://codepen.io/jh3y/pen/WzeJZz">demo</a> again just to show an example of what could be achieved!</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*BlljW4enti6ENsXHdgFcHA.gif" alt="A Day and Night toggle where the sun goes in and out with the moon"></p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="WzeJZz"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/WzeJZz">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h3>Further reading</h3>
<ul>
<li><a href="https://github.com/reactjs/rfcs/blob/master/text/0002-new-version-of-context.md#drawbacks-of-the-existing-version-of-context">Doc for new, safe version of context</a>  —  github.com/react</li>
<li><a href="https://codepen.io/jh3y/pen/WzeJZz">Day/Night toggle demo</a>  —  codepen.io/jh3y</li>
</ul>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>The &quot;Off&quot; Click</title>
    <link href="https://jhey.dev/writing/the-off-click/"/>
    <updated>2018-03-01T07:25:58+00:00</updated>
    <id>https://jhey.dev/writing/the-off-click/</id>
    <content type="html"><![CDATA[
      <blockquote>
<p>Clicking anywhere off an element in Javascript ✋</p>
</blockquote>
<p>I don’t know the technical term for this scenario 😅 We’ve likely all encountered it though. That scenario where you’ve bound a click to open or activate something. But, you also want a click bound to clicking anywhere else that closes it.</p>
<p>What is the technical term for that? I’m going to call it the &quot;off&quot; click.</p>
<p>Consider this common example using a side menu. You click the menu button to open the menu. When you go to click off it, you expect it to close. It shouldn’t be the case that it only closes when you click the menu button again.</p>
<p>For those in camp <strong>TL;DR</strong>, the solution is bind an &quot;Off&quot; click method to the <code>document</code> within your initial click handler. This gets added and removed when necessary. Here’s a demo!\</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jZJNOG"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jZJNOG">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Before we go any further. This isn’t just applicable to the side menu scenario. It could be used in other scenarios you may come across. It is also true, that we could use other methods to close the sliding menu such as a clickable overlay that fills the rest of the page.</p>
<h2>A Side Menu</h2>
<p>For our example, we are going to use a basic side menu that slides in and out. The menu contains items that allow the user to change the background color of the page.</p>
<h2>Basic opening and closing</h2>
<p>To open and close the side nav, we will apply a class to the menu element. The class will dictate the transform of the menu element sliding it right and left.</p>
<p>So what might the code look like for this? In the most basic implementation we can toggle the class on the menu element.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">OPEN_CLASS</span> <span class="token operator">=</span> <span class="token string">'menu--open'</span></span>
<span class="highlight-line"><span class="token keyword">const</span> menu <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.menu'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> menuBtn <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.menu__button'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token comment">// Most basic method</span></span>
<span class="highlight-line">menuBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> menu<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token constant">OPEN_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></code></pre>
<p>But, this isn’t ideal. We can open the menu, but the only way to close it is by clicking the menu button again.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*87u9lXJqAMBGYNzwKyqP6w.gif" alt="Showing how &quot;off&quot; click does nothing"></p>
<p>That won’t do 👎</p>
<h2>Introducing the &quot;Off&quot; click</h2>
<p>How do we deal with this? We need an &quot;Off&quot; click.</p>
<p>Instead of only toggling the class, we can also bind an event listener to the document at the same time. The function we bind to can then close the menu. This means clicking anywhere on the document will close the menu.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">offClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  menu<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token constant">OPEN_CLASS</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> offClick<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  menu<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token constant">OPEN_CLASS</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>menu<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token constant">OPEN_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> offClick<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line">menuBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span></span></code></pre>
<p>Wait, that doesn’t work…</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*DC1zZAU5kOQpMdtimtqhMQ.gif" alt="Menu not opening"></p>
<p>The reason? Event propagation. We bind the document click in the same instance as clicking to open the menu, the event propagates. That means the menu opens and closes so quick we never see it. Let’s fix that!</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">offClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  menu<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token constant">OPEN_CLASS</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> offClick<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  menu<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token constant">OPEN_CLASS</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>menu<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token constant">OPEN_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> offClick<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line">menuBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span></span></code></pre>
<p>To fix it we could use <code>stopPropagation</code>. This will stop the event bubbling that makes the menu close when it should be open.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*5Ae7c9KJvEfctQlxRwgZOQ.gif" alt="Menu opening and closing"></p>
<p>But the use of <code>stopPropagation</code> could introduce other pitfalls that we want to avoid 👻</p>
<h2>Be wary of using stopPropagation</h2>
<p>The use of <code>stopPropagation</code> can be risky and can introduce bugs if not used with care 🐛 In this solution, we are only using it on the click handler of the menu button. We are stopping the click event from bubbling up.</p>
<p>But using <code>stopPropagation</code> means that we create a clicking deadzone. How? Later down the line, we may decide to add an event handler to a parent of the menu button. But if we click the menu button, the event wont propagate. That means the new event handler wouldn’t fire 😢</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*LgKwZcZGSqwKke_X1vbv4g.gif" alt="Menu Button creating a deadzone click. Clicking the body increases a number on the page. But, clicking the button does nothing."></p>
<h2>Comparing events</h2>
<p>One solution is to compare the event objects. We can encapsulate the logic within our menu button click handler.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token function-variable function">offClick</span> <span class="token operator">=</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!==</span> evt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      menu<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token constant">OPEN_CLASS</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> offClick<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>menu<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token constant">OPEN_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    menu<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token constant">OPEN_CLASS</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> offClick<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line">menuBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span></span></code></pre>
<p>This way, we aren’t stopping the event propagation.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*qGKxc-FaX9W0SOh6gweL1Q.gif" alt="No more deadzone. Clicking the button triggers both actions. It increases the number but also opens and closes the menu."></p>
<p>This way we can still propagate the event but make sure that we don’t fall into the instant open and close issue.</p>
<h2>Can we extract that logic?</h2>
<p>Yes. It’s unlikely you’ll have to cater for the &quot;Off&quot; click in several places across your app, but it won’t hurt to refactor.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">addOffClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token function-variable function">offClick</span> <span class="token operator">=</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!==</span> evt<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> offClick<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> offClick<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We could now apply the behavior across different parts of our app 🎉</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token function-variable function">toggleMenu</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> menu<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token constant">OPEN_CLASS</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>menu<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token constant">OPEN_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token function">toggleMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token function">addOffClick</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> toggleMenu<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>That’s it!</h2>
<p>A quick look at the &quot;Off&quot; click scenario. We’ve covered how to handle it whilst avoiding the use of <code>stopPropagation</code>.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jZJNOG"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jZJNOG">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>How To: True Masonry Layout</title>
    <link href="https://jhey.dev/writing/how-to-true-masonry-layout/"/>
    <updated>2017-04-16T03:47:32+01:00</updated>
    <id>https://jhey.dev/writing/how-to-true-masonry-layout/</id>
    <content type="html"><![CDATA[
      <p>I’ve previously written about achieving the masonry layout effect and how to implement a pure CSS solution leveraging various techniques (<em>that can be seen <a href="/writing/how-to-pure-css-masonry-layout">here</a></em>).</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="mPgyqw"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/mPgyqw">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>The biggest drawback with a pure CSS solution is ordering. Most people implementing a masonry layout in their projects want the classic left to right chronological ordering. It’s a common question about the pure CSS solution, “How can I order the items from left to right, 1, 2, 3?”. Unfortunately, this just doesn’t seem possible with a pure CSS solution. Not in a generic and dynamic sense at least 👎</p>
<p>So how can we create this “true” masonry layout with the correct ordering? We can still leverage CSS features but we’re going need a hint of JavaScript to get it just right 😎</p>
<p>For those in camp <strong>TL;DR</strong> who want to see this “true” masonry layout in action, here’s a demo 🤓</p>
<p>If you scroll to the bottom, you can see a demo with React and also a demo with loading images 😉</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="vgZWZL"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/vgZWZL">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>Using Flexbox in a solution</h2>
<p>Previously, when exploring a pure CSS solution, I settled on using multi-column layout properties and using flexbox for clustering.</p>
<p>My thoughts about using flexbox alone lead me to believe I’d find issues regarding the height and wrap of the layout when using <code>flex-direction: column</code></p>
<blockquote>
<p>On first attempt I thought about mimicking the column layout by using “<em>flex-direction: column</em>”.The issue with using “<em>column</em>” is that you need to define a height for the layout so that columns start wrapping ..… or you need to keep adjusting the height of the layout until everything wraps and fits nicely how you want it to. If you are working with dynamic content that may vary in amount and size over time, you may find yourself adjusting to accommodate each time you roll it out.</p>
</blockquote>
<p>If we introduce JavaScript, the issue of needing to adjust <code>height</code> becomes moot as we can react to changes in content and container size 🎉</p>
<hr>
<p>So let’s begin looking at a solution. We’ll make the journey getting more complex as we go along (<em>spoiler: it never gets that complex</em>). We will start with the markup, then the CSS and lastly how we make it all work with that hint of JavaScript.</p>
<hr>
<h2>The markup</h2>
<p>Let’s begin by defining some markup. Nothing crazy here, a container with panels 👍</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-panel__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-panel__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>We have <code>masonry</code> class for our container, <code>masonry-panel</code> for our panels and <code>masonry-panel__content</code> for panel content.</p>
<p>For the demo, I decided to generate a random layout with panels of different sizes using <code>pug</code></p>
<pre class="language-pug"><code class="language-pug"><span class="highlight-line"><span class="token tag"><span class="token attr-class">.masonry</span></span></span>
<span class="highlight-line">  <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span></span></span>
<span class="highlight-line">  <span class="token flow-control"><span class="token branch keyword">while</span> n <span class="token operator">&lt;</span> <span class="token number">16</span></span></span>
<span class="highlight-line">    <span class="token punctuation">-</span><span class="token code"> <span class="token keyword">var</span> size <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">450</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token attr-class">.masonry-panel</span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token attr-class">.masonry-panel__content</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">style</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">height: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span></span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">        <span class="token tag">h1</span><span class="token punctuation">=</span><span class="token code"> n</span></span>
<span class="highlight-line">    <span class="token punctuation">-</span><span class="token code"> n<span class="token operator">++</span></span></span></code></pre>
<p>We will look at adding images and dynamic content later on 😉</p>
<h2>The CSS</h2>
<p>The CSS is quite simple but we will leverage a trick with the <code>flexbox</code> properties. Let’s start with the container.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.masonry</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">flex-flow</span><span class="token punctuation">:</span> column wrap<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The container is the top level element for our masonry layout. We are using <code>flexbox</code> so we need <code>display: flex</code>. <code>max-width</code> is set to ensure our layout doesn’t overflow. Last, we define the <code>flex-flow</code>. We want our content to wrap so we have set <code>flex-wrap</code> to <code>wrap</code> and we want the <code>flex-direction</code> to be <code>column</code> and not <code>row</code>. You might question the <code>flex-direction</code>. If we want our content to read from left to right then how is that possible using <code>flex-direction: column</code>? This is where we leverage the trick with <code>flexbox</code> properties.</p>
<p>We are going to use the <code>order</code> property to define the order in which are <code>masonry-panel</code>s will render within the layout. If you’re not familiar with the <code>order</code> property</p>
<blockquote>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a> <code>order</code> property specifies the order used to lay out flex items in their flex container. Elements are laid out in the ascending order of the <code>order</code> value. Elements with the same <code>order</code>value are laid out in the order in which they appear in the source code. — <a href="https://developer.mozilla.org/en/docs/Web/CSS/order">MDN</a></p>
</blockquote>
<p>So what does that allow us to do? When we develop our markup, it’s likely to be in the order that we want it to display.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-panel__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-panel__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-panel__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-panel__content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p><img src="https://cdn-images-1.medium.com/max/600/1*6Of1_Wzmh5L_wDP6q17xhw.png" alt="How our panels might look to start"></p>
<p>We haven’t touched on the <code>height</code> of the container yet, we will. A set <code>height</code> must be in place to make the columns wrap. If there is no set <code>height</code> then the columns will never wrap 😭. Let’s run through a quick example. Consider a layout where the panels are <code>100px</code> high and wide. Our container is <code>200px</code> high and wide and we have four panels.</p>
<p>When we don’t alter the <code>order</code>, the result will be that we get <code>1</code> and <code>2</code> in our first column and <code>3</code> and <code>4</code> in our second column. Well that’s no good 👎</p>
<p><img src="https://cdn-images-1.medium.com/max/600/1*avhygM3r80Oetc__BRwN-Q.png" alt="Panels with desired ordering"></p>
<p>The desired effect we want is <code>1</code> and <code>3</code> in the first column and the <code>2</code> and <code>4</code> in the second column. How can you calculate the order for each panel though? You don’t need to calculate the exact <code>order</code>. If we remember that items with the same <code>order</code> are laid out in the order they appear in the DOM then all we need to worry about is which column we want each item to appear in 🙌</p>
<p>To illustrate this, consider the following. Instead of the the DOM order illustrated in the square, we render the <code>order</code> property value. Each panel in column one has the value <code>1</code>. And each in column two has the value <code>2</code>.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*VKq9ZbNAGSFXOeOwYaaSuA.png" alt="How &quot;order&quot; can dictate the correct column for a panel"></p>
<p>We can either set the <code>order</code> within our <code>CSS</code> or leave it and set it within our <code>JavaScript</code>. The latter will be easier if you’re not using a <code>CSS</code> preprocessor. For those using a <code>CSS</code> preprocessor, it is possible. But might be a little more complicated than doing so within <code>JavaScript</code>. We need to set the <code>order</code> for each panel based on the desired number of columns for each desired breakpoint. You can see this in the demo pen using <code>stylus</code>.</p>
<p>The only other properties we need to set for our <code>masonry-panel</code> are <code>width</code> and <code>overflow</code>. We set the <code>overflow</code> to <code>hidden</code> to make sure that panel content doesn’t spill out. The <code>width</code> is based on how many columns we want in our layout. Let’s consider a four column layout, that requires a <code>25%</code> width for panels.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.masonry-panel</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>In order to go responsive(<em>more on this at the end</em>), we would set different <code>width</code>s and <code>order</code>s at different breakpoints. Commonly, on mobile devices we will only want one column. You might be developing mobile first, so you may have something like</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.masonry-panel</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">order</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span><span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.masonry-panel</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
  <span class="token selector">.masonry-panel:nth-of-type(1),
  .masonry-panel:nth-of-type(5)</span> <span class="token punctuation">{</span>
<span class="highlight-line">    <span class="token property">order</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
  <span class="token selector">.masonry-panel:nth-of-type(2),
  .masonry-panel:nth-of-type(6)</span> <span class="token punctuation">{</span>
<span class="highlight-line">    <span class="token property">order</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Setting responsive <code>order</code> and <code>width</code> is likely easier if leveraging a <code>CSS</code> preprocessor. If you’re not using a <code>CSS</code> preprocessor, you could set the responsive order from <code>JavaScript</code>. This would entail setting an inline <code>order</code> on <code>window</code> resize based on some given settings.</p>
<p>Any other <code>CSS</code> we put in place on the <code>CSS</code> side is for theming and aesthetics. For example, we may set <code>padding</code> on the panel content to give a gutter like effect.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.masonry-panel__content</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Or we may wish to make our panels have animated entrances in order. This can be achieved with a <code>CSS</code> preprocessor as follows</p>
<pre class="language-stylus"><code class="language-stylus"><span class="highlight-line"><span class="token selector">.masonry-panel</span></span>
<span class="highlight-line">  <span class="token property-declaration"><span class="token property">animation</span> scaleIn <span class="token number">0.25</span><span class="token unit">s</span> both</span></span>
<span class="highlight-line">  <span class="token statement"><span class="token keyword">for</span> $panel <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span>$numberOfPanels<span class="token punctuation">)</span></span></span>
<span class="highlight-line">    <span class="token selector">&amp;:nth-child(<span class="token interpolation variable"><span class="token delimiter punctuation">{</span>$panel<span class="token delimiter punctuation">}</span></span>)</span></span>
<span class="highlight-line">      <span class="token property-declaration"><span class="token property">animation-delay</span> <span class="token punctuation">(</span>$panel <span class="token operator">*</span> <span class="token number">0.15</span><span class="token unit">s</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule-declaration"><span class="token atrule">@keyframes</span> scaleIn</span></span>
<span class="highlight-line">  <span class="token selector">from</span></span>
<span class="highlight-line">    <span class="token property-declaration"><span class="token property">transform</span> <span class="token func"><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span></span></code></pre>
<h2>The JavaScript</h2>
<p>Last but not least is the <code>JavaScript</code>. We need the script in order to react to changes in viewport size and also to initially set up the layout by setting the correct <code>height</code> for our container.</p>
<p>So, let’s get started by creating a class for our layout.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">CLASSES</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token constant">MASONRY</span><span class="token operator">:</span> <span class="token string">'masonry'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token constant">PANEL</span>  <span class="token operator">:</span> <span class="token string">'masonry-panel'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token constant">PAD</span>    <span class="token operator">:</span> <span class="token string">'masonry-pad'</span><span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">Masonry</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> el</span>
<span class="highlight-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>panels <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">PANEL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Our class will take an <code>element</code> as its parameter. This element will be the containing element. It will keep a reference of the container and panels using internal references. We instantiate a <code>state</code> object for keeping a reference to the layout and content height.</p>
<p>Our first step is to start the layout but first a quick note on setting the <code>order</code>.</p>
<p>I prefer to set the order of panels via <code>CSS</code> in this example. This is so that I don’t need to keep reference and make checks within the <code>JavaScript</code> to media queries etc.</p>
<p>If we are going to set the <code>order</code> of our panels via <code>JavaScript</code>. This is a basis for how we could do it.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function-variable function">setOrders</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    panels</span>
<span class="highlight-line">  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="highlight-line">  <span class="token comment">// There needs to be an internal reference here that</span></span>
<span class="highlight-line">  <span class="token comment">// checks how many cols for viewport size</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> cols <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="highlight-line">  panels<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">panel<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    panel<span class="token punctuation">.</span>style<span class="token punctuation">.</span>order <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> cols <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> cols <span class="token operator">:</span> <span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> cols</span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We would need some way of storing the Masonry settings though in some form of options <code>Object</code>. I’ve tackled a <code>JavaScript</code> which I detail later in this article. The <code>React</code> version I put together below also uses a <code>JavaScript</code> solution 👍</p>
<p><strong>NOTE::</strong> If using IE, you’ll need to use something like a <code>for</code> loop to iterate over that <code>NodeList</code> for <code>panels</code> else it won’t work.</p>
<p>Once <code>order</code> is out of the way let’s get under way with setting up the layout.</p>
<p>We create a <code>layout</code> method in the class that will be responsible for running individual tasks that sort the layout.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function-variable function">layout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">populateHeights</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pad</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This method will be invoked from within the constructor and also on viewport size changes to reset and initialize the layout.</p>
<p>Let’s go through these individual methods one by one.</p>
<h3>reset</h3>
<p>A reset method for each time we want to re-layout. We use this method to reset internal state, reset styles and remove padding elements. More on padding elements when we get to the <code>pad</code> method*.*</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> container <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="highlight-line">  <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>heights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> fillers <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">PAD</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>fillers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> f <span class="token operator">&lt;</span> fillers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> f<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      fillers<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>fillers<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  container<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p><strong>UPDATE::</strong> It was brought to my attention that the first iteration of this code wouldn’t play nice in IE. That was due to using <code>forEach</code> on a <code>NodeList</code> and also making use of <code>remove</code> on elements. The workaround has been to revert to using a <code>for</code> loop and use <code>parentNode.removeChild</code>. Sorry for any issues this caused 😇</p>
<h3>populateHeights</h3>
<p>This method is where we determine the <code>height</code> of our content.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function-variable function">populateHeights</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> panels<span class="token punctuation">,</span> state <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> heights <span class="token punctuation">}</span> <span class="token operator">=</span> state</span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> panels<span class="token punctuation">.</span>length<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> panel <span class="token operator">=</span> panels<span class="token punctuation">[</span>p<span class="token punctuation">]</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> order<span class="token operator">:</span> cssOrder<span class="token punctuation">,</span> msFlexOrder<span class="token punctuation">,</span> height <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> order <span class="token operator">=</span> cssOrder <span class="token operator">||</span> msFlexOrder</span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>heights<span class="token punctuation">[</span>order <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> heights<span class="token punctuation">[</span>order <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="highlight-line">    heights<span class="token punctuation">[</span>order <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We iterate through the panel elements and get the computed style for each. For each <code>height</code> we need to add this to a height reference array. We know which reference in the <code>height</code> array to add the <code>height</code> to based on the <code>order</code> property of the panel.</p>
<p>For an example; we have a four column layout so heights will start out as</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">]</span></span></code></pre>
<p>We get to the first panel, it has <code>height</code> of <code>75</code>. This gives us</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token punctuation">[</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">]</span></span></code></pre>
<p>When we’ve added the <code>height</code> for our second, third and fourth panel, we get back to another panel with <code>order</code> of <code>1</code> so we need to add that <code>height</code> onto the first <code>height</code>. Consider it has a <code>height</code> of <code>25</code>, then <code>heights[0]</code> becomes <code>100</code></p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token punctuation">[</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">]</span></span></code></pre>
<p>Once we have the heights of each column we just need to set the layout correctly based on this.</p>
<h3>setLayout</h3>
<p>This likely doesn’t need its own method but feels nicer to have that separation of concerns. In this method we simply set the <code>height</code> of the container based on the column heights.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function-variable function">setLayout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> container<span class="token punctuation">,</span> state <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> heights <span class="token punctuation">}</span> <span class="token operator">=</span> state</span>
<span class="highlight-line">  <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>maxHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>heights<span class="token punctuation">)</span></span>
<span class="highlight-line">  container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>maxHeight<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This will get you pretty much there. The layout will work now 🎉 but not in every scenario 👎</p>
<h3>pad</h3>
<p>This is where the concept of padding comes in. Currently, we have our content within the fixed height container. The height has been set based on the content height. But, it’s likely that the columns aren’t all the same height. The tallest column content won’t spill out. But, there are scenarios where the other columns could have content that spills. This isn’t the desired effect.</p>
<p>So how can we combat this? The solution for me has been to introduce padding elements. These fill out the remaining space in a column that is not as tall as the tallest column. The following image illustrates padding filling out the shorter columns (<em>padding is orange</em>)</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*1Iy4S_zjgALPaxZP5rZPJg.png" alt="Padded columns to create equal heights"></p>
<p>So what does the code for <code>pad</code> look like?</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function-variable function">pad</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> container <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> heights<span class="token punctuation">,</span> maxHeight <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state</span>
<span class="highlight-line">  heights<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">height<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">&lt;</span> maxHeight <span class="token operator">&amp;&amp;</span> height <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">const</span> pad <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      pad<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">PAD</span></span>
<span class="highlight-line">      pad<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>maxHeight <span class="token operator">-</span> height<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span></span>
<span class="highlight-line">      pad<span class="token punctuation">.</span>style<span class="token punctuation">.</span>order <span class="token operator">=</span> idx <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="highlight-line">      pad<span class="token punctuation">.</span>style<span class="token punctuation">.</span>msFlexOrder <span class="token operator">=</span> idx <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="highlight-line">      container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>pad<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Here we iterate over the heights reference which maps to layout columns. We determine whether we need to generate a padding element for a column. If necessary we create a set height element that fills the required space.</p>
<p>This padding ensures our elements are always in the column we expect them to be 😀👍</p>
<hr>
<p>All that’s left to do is generate our markup and then initialize the layout. Later, we will integrate that <code>resize</code> listener into the class.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">window<span class="token punctuation">.</span>myMasonry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Masonry</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">MASONRY</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token comment">// NOTE:: For better performance, debounce this!</span></span>
<span class="highlight-line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> myMasonry<span class="token punctuation">.</span>layout<span class="token punctuation">)</span></span></code></pre>
<hr>
<h2>Going responsive</h2>
<p>Going responsive isn’t that tricky once you’ve defined your responsive boundaries. The only decision left is how you wish to put in place the responsive element of your masonry layout.</p>
<p>First, we need to define the responsive boundaries. The viewport size limits and how many columns you want to see at each one.</p>
<p>For me, I’ve named the boundaries<code>sm</code>, <code>md</code>, <code>lg</code> and <code>xl</code>. The value for each will be it’s upper bound. For example, <code>sm</code> will be any viewport up until <code>430px</code> in width.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">sm <span class="token operator">=</span> <span class="token number">430</span>px</span>
<span class="highlight-line">md <span class="token operator">=</span> <span class="token number">768</span>px</span>
<span class="highlight-line">lg <span class="token operator">=</span> <span class="token number">992</span>px</span>
<span class="highlight-line">xl <span class="token operator">=</span> <span class="token number">1500</span>px</span></code></pre>
<p>Next, define how many columns you wish to see for each boundary.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">sm <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="highlight-line">md <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="highlight-line">lg <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="highlight-line">xl <span class="token operator">=</span> <span class="token number">4</span></span></code></pre>
<p>Now we need to implement it!</p>
<p>Let’s start with the simplest responsive property, the <code>width</code> of a panel at each boundary.</p>
<pre><code>panel width = 100% / number of columns for boundary
</code></pre>
<p>This will be best implemented within our CSS.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 430px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.masonry-panel</span> <span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.masonry-panel</span> <span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.masonry-panel</span> <span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1500px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.masonry-panel</span> <span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>If we make use of a <code>CSS</code> preprocessor such as <code>stylus</code> we can define a configuration. Using the configuration, we can iterate over it to generate our styles. We define the max number of items in our layout with the items key. This is so that we don’t create unnecessary style declarations for items that won’t render.</p>
<pre class="language-stylus"><code class="language-stylus"><span class="token variable-declaration"><span class="token variable">$config</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="highlight-line">  items<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  responses<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    breakpoints<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      sm<span class="token punctuation">:</span> <span class="token number">430</span><span class="token unit">px</span></span>
<span class="highlight-line">      md<span class="token punctuation">:</span> <span class="token number">768</span><span class="token unit">px</span></span>
<span class="highlight-line">      lg<span class="token punctuation">:</span> <span class="token number">992</span><span class="token unit">px</span></span>
<span class="highlight-line">      xl<span class="token punctuation">:</span> <span class="token number">1500</span><span class="token unit">px</span></span>
    <span class="token punctuation">}</span></span><span class="token selector"><span class="token punctuation">,</span></span>
<span class="highlight-line">    cols<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      sm<span class="token punctuation">:</span> 1,</span>
<span class="highlight-line">      md<span class="token punctuation">:</span> 2,</span>
<span class="highlight-line">      lg<span class="token punctuation">:</span> 3,</span>
<span class="highlight-line">      xl<span class="token punctuation">:</span> 4,</span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The iteration to create the <code>width</code> for our panels at different breakpoints is then as simple as</p>
<pre class="language-stylus"><code class="language-stylus"><span class="highlight-line"><span class="token selector">.masonry-panel</span></span>
<span class="highlight-line">  <span class="token statement"><span class="token keyword">for</span> $breakpoint<span class="token punctuation">,</span> $value <span class="token operator">in</span> $config.responses.breakpoints</span></span>
<span class="highlight-line">    <span class="token func"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'$cols'</span><span class="token punctuation">,</span> $config.responses.cols<span class="token punctuation">[</span>$breakpoint<span class="token punctuation">]</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">    <span class="token atrule-declaration"><span class="token atrule">@media</span><span class="token punctuation">(</span>min-width $value<span class="token punctuation">)</span></span></span>
<span class="highlight-line">      <span class="token property-declaration"><span class="token property">width</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token unit">%</span> <span class="token operator">/</span> $cols <span class="token operator">*</span> <span class="token number">1</span><span class="token unit">%</span><span class="token punctuation">)</span></span></span></code></pre>
<p>The trickier of the responsive properties to implement is <code>order</code>. I’ve chosen to implement this using <code>stylus</code>. It could be done on the <code>JavaScript</code> side though. I’ll explain how in a moment.</p>
<p>First, this is how I’ve implemented responsive <code>order</code> for the panel elements using the <code>config</code> object with <code>stylus</code>.</p>
<pre class="language-stylus"><code class="language-stylus"><span class="highlight-line"><span class="token selector">.masonry-panel</span></span>
<span class="highlight-line">  <span class="token statement"><span class="token keyword">for</span> $breakpoint<span class="token punctuation">,</span> $value <span class="token operator">in</span> $config.responses.breakpoints</span></span>
<span class="highlight-line">    <span class="token func"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'$cols'</span><span class="token punctuation">,</span> $config.responses.cols<span class="token punctuation">[</span>$breakpoint<span class="token punctuation">]</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line">    <span class="token atrule-declaration"><span class="token atrule">@media</span><span class="token punctuation">(</span>min-width $value<span class="token punctuation">)</span></span></span>
<span class="highlight-line">      <span class="token property-declaration"><span class="token property">width</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token unit">%</span> <span class="token operator">/</span> $cols <span class="token operator">*</span> <span class="token number">1</span><span class="token unit">%</span><span class="token punctuation">)</span></span></span>
<span class="highlight-line"></span>
<span class="highlight-line">      <span class="token statement"><span class="token keyword">for</span> $panel <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span>$config.items<span class="token punctuation">)</span></span></span>
<span class="highlight-line">        <span class="token selector">&amp;:nth-child(<span class="token interpolation variable"><span class="token delimiter punctuation">{</span>$panel<span class="token delimiter punctuation">}</span></span>)</span></span>
<span class="highlight-line">          <span class="token variable-declaration"><span class="token variable">$newOrder</span> <span class="token operator">=</span> $panel <span class="token operator">%</span> $cols</span></span>
<span class="highlight-line">          <span class="token statement"><span class="token keyword">if</span> $newOrder <span class="token operator">==</span> <span class="token number">0</span></span></span>
<span class="highlight-line">            <span class="token variable-declaration"><span class="token variable">$newOrder</span> <span class="token operator">=</span> $cols</span></span>
<span class="highlight-line">          <span class="token property-declaration"><span class="token property">order</span> $newOrder</span></span></code></pre>
<p>We hook into the iteration we used for generating the <code>width</code> property and tack on <code>nth-child</code> rules. For each child, we set the appropriate <code>order</code> for that child at that breakpoint. We calculate the <code>order</code> using <code>modulo</code>. As order can’t be <code>0</code>, if <code>$panel % $cols</code> is <code>0</code> then the order must be the amount of columns at that breakpoint 👍</p>
<p>How about a <code>JavaScript</code> solution? We could set the <code>order</code> of elements in a method that checks the current viewport size. We’d also need to declare the responsive config within our <code>JavaScript</code></p>
<p>We can start by creating a configuration <code>Object</code> that is passed into our <code>constructor</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> masonryConfig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  breakpoints<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    sm<span class="token operator">:</span> <span class="token number">430</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    md<span class="token operator">:</span> <span class="token number">768</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    lg<span class="token operator">:</span> <span class="token number">992</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    xl<span class="token operator">:</span> <span class="token number">1500</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  cols<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    sm<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    md<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    lg<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    xl<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Then our methods for ascertaining breakpoint and desired columns along with setting panel styles could look like</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function-variable function">getViewportCols</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> config <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="highlight-line">  <span class="token keyword">let</span> breakpoint <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> b <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>breakpoints<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">></span> config<span class="token punctuation">.</span>breakpoints<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> breakpoint <span class="token operator">=</span> b</span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> config<span class="token punctuation">.</span>cols<span class="token punctuation">[</span>breakpoint<span class="token punctuation">]</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token function">setPanelStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> getViewportCols<span class="token punctuation">,</span> panels <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> cols <span class="token operator">=</span> <span class="token function">getViewportCols</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> panels<span class="token punctuation">.</span>length<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    panels<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>order <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> cols <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> cols <span class="token operator">:</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> cols</span>
<span class="highlight-line">    panels<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">100</span> <span class="token operator">/</span> cols<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%</span><span class="token template-punctuation string">`</span></span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We’d just need to add the <code>setPanelStyles</code> method as one of the lifecycle methods of <code>layout</code>. This would get invoked on iniialization and every consequent re-layout that happens as a result of viewport size change 🎉</p>
<h2>Dynamic Content</h2>
<p>There can sometimes be issues when we want to start loading images into our masonry layout. The issue being that we run our layout code but then all our images load and break the layout.</p>
<p>Fear not, there is a way to combat this.</p>
<p>There is a fantastic package called <code>imagesLoaded</code> that we can leverage. Using <code>imagesLoaded</code> we can hook into when our images load and re-run the layout method.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> myMasonry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Masonry</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> masonryConfig<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> load <span class="token operator">=</span> <span class="token function">imagesLoaded</span><span class="token punctuation">(</span>myMasonry<span class="token punctuation">.</span>container<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> myMasonry<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">load<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'progress'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> image</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token comment">// This trick allows us to avoid any floating pixel sizes</span></span>
<span class="highlight-line">  image<span class="token punctuation">.</span>img<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> image<span class="token punctuation">.</span>img<span class="token punctuation">.</span>height</span>
<span class="highlight-line">  image<span class="token punctuation">.</span>img<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>img<span class="token punctuation">.</span>height<span class="token punctuation">)</span></span>
<span class="highlight-line">  image<span class="token punctuation">.</span>img<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'loading'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// NOTE:: Not the cleanest thing to do here</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> parentPanel <span class="token operator">=</span> image<span class="token punctuation">.</span>img<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode</span>
<span class="highlight-line">  parentPanel<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">height: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>image<span class="token punctuation">.</span>img<span class="token punctuation">.</span>height<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="highlight-line">  parentPanel<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CLASSES</span><span class="token punctuation">.</span><span class="token constant">PANEL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--loading</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="highlight-line">  myMasonry<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>What we are doing here is saying, when all images have loaded run the layout code. But to go one step further, we run it after every image has loaded.</p>
<p>You may question why are we setting the <code>height</code> of the image? This is actually to avoid <code>float</code> heights like <code>400.678px</code>. These can cause bugs in the layout.</p>
<p>You can check out a demo for a responsive masonry image gallery at the bottom of this article 👍</p>
<hr>
<p>And that’s it! How to create the “true” masonry layout effect with ordering from left to right by leveraging <code>flexbox</code> properties and adding a hint of <code>JavaScript</code> to help out 🎉</p>
<p>I’ve included some demos also for reference. These include loading dynamic content and a <code>react</code> version using <code>styled-components</code>.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="vgZWZL"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/vgZWZL">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="pLyVwo"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/pLyVwo">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="jzqaxe"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/jzqaxe">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Another Webpack Intro</title>
    <link href="https://jhey.dev/writing/another-webpack-intro/"/>
    <updated>2016-09-08T16:14:35+01:00</updated>
    <id>https://jhey.dev/writing/another-webpack-intro/</id>
    <content type="html"><![CDATA[
      <blockquote>
<p>No React etc. just pure webpack!</p>
</blockquote>
<p>Let’s not beat around the bush here, there are a lot of basic introductions to <strong>webpack</strong>.</p>
<p>IMHO, some are good, some go off on tangents, some didn’t really tell me what I wanted to know when I was picking it up.</p>
<p>The goal here is to make you familiar with the basic concepts of <strong>webpack</strong> and go over some of the basics of how to use it. There will be nothing about getting your <strong>React</strong> project off the ground or how to integrate it with <strong>gulp</strong> etc.</p>
<p>If anything is unclear, please leave a note!</p>
<p>For those in camp <strong>TL;DR</strong> there is some code to play with <a href="https://github.com/jh3y/webpack-playground">here</a>! Or if you just want to get on with it, scroll down to “<em>Example”</em>.</p>
<h2>What do I think of webpack</h2>
<p>Before I dive in, I have been asked what I think of <strong>webpack</strong>.</p>
<p>I‘ll admit, I was <strong>certainly</strong> skeptical at first. I felt it was a little counter-intuitive, the docs kinda had me <strong>confused</strong> and I wasn’t 100% if I was using it right.</p>
<p>If you feel like this, hang on in there. If you’re willing to give it another shot, it gets better. Have a read through this intro and see how you feel after.</p>
<p>Once you get your head round what <strong>webpack</strong> aims to do and how it does it, begin to think about your source in the “webpack” way and become familiar with looking at config files you might really grow to like <strong>webpack</strong>.</p>
<p>I’ve actually grown to <em>really</em> like it.</p>
<h2>Why another intro?</h2>
<p>It seems webpack is not the most intuitive tool to grasp. Head over to the docs and you might be overwhelmed by not only the content, but the sheer mass of it!</p>
<p>Some of my “favorite” quotes in the docs comments;</p>
<blockquote>
<p>The document is so obscure, I read so many times,but still can not figure out how to use it comprehensively and cleanly.</p>
<p>Thought I was the only one…! I came here from angular 2.It’s just a module bundler,it’s just a tool,yet it feels like rocket science with this bloated and all-over-the-place documentation</p>
<p>What are the advantages of this over using streams in Gulp? I don’t understand.</p>
<p>great tool, awful documentation</p>
</blockquote>
<p>That last one is particularly succinct. From my experience, <strong>webpack</strong> is a greal tool. But to appreciate how great it is, you need to at the very least have a basic understanding of it and I feel a lot of people may give up at the first hurdle because of this. Especially, if you are coming from a tool like <strong>Gulp</strong> where any valid JS will work and things are a little more intuitive.</p>
<p>That’s the purpose of this post. To give a basic understanding and show how to do some of the basic things you might want to achieve.</p>
<h2>Not a task runner</h2>
<p><strong>webpack</strong> is not a task runner. It is a bundler.</p>
<p>This is the most important concept to let sink in. Those familiar with tools like <strong>browserify</strong> should be OK with this idea. For those that are not, <strong>forget</strong> about the notion of tasks.</p>
<p>In fact, you may not need that task runner of choice you’ve been using <strong>at all</strong>.</p>
<h2>What does it do?</h2>
<p><strong>webpack</strong> is a bundler.</p>
<p>You write your configuration file and get on with writing your project code. When you run <strong>webpack</strong>, it works out your project dependency tree and calculates the required assets for your project. What you get in return is a dump of the static assets and bundle in a defined location that are required to make your project work.</p>
<p><strong>webpack</strong> abstracts you away from worrying about things like concatenation of scripts and publishing of static assets.</p>
<p>You specify what assets you need and when in your source using CommonJS/Node style syntax. <strong>webpack</strong> handles the rest. The best part is that those assets can be any assets, not just JavaScript. You can even require syntax that would need to be processed such as CoffeeScript, SASS, LESS etc. This may not feel quite right to start with but once you’re familiar with it, it‘s actually pretty good.</p>
<p>The aim is to make everything a module and only bundle the things we <strong>need</strong>. Imagine we are working on a project with components. With <strong>webpack</strong> we can treat a component as a module that requires it’s own styling and other assets. We don’t need to write some clever task runner logic to handle it. This will make sense with the walkthrough further down but for now imagine a TODO component that has it’s own styles.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token comment">/**
<span class="highlight-line">  * TODO component</span>
*/</span>
<span class="highlight-line"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./todo.scss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">var</span> <span class="token function-variable function">Todo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">default</span> Todo<span class="token punctuation">;</span></span></code></pre>
<h2>Concepts</h2>
<p>Before I walkthrough a common <strong>webpack</strong> setup, it’s key to go over some of the main concepts you’ll be seeing in a configuration file. For a start, here is a configuration file.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> autoprefixer      <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> webpack           <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> path              <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">IS_DIST</span> <span class="token operator">=</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'--dist'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  devServer<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    port<span class="token operator">:</span> <span class="token number">1987</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  entry<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    app<span class="token operator">:</span> <span class="token string">'./src/script/app.js'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token comment">/* create a vendor chunk for grabbing vendor resources */</span></span>
<span class="highlight-line">    vendor<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">      <span class="token string">'lodash'</span></span>
<span class="highlight-line">    <span class="token punctuation">]</span></span>
<span class="highlight-line">    <span class="token comment">/* Create another chunk for a different page etc. */</span></span>
<span class="highlight-line">    <span class="token comment">// app2: './src/script/app2.js'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  output<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    path<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/public</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">    filename<span class="token operator">:</span> <span class="token string">'[name].js'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  module<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    loaders<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        loader<span class="token operator">:</span> <span class="token string">'babel'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        include<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(src\/script)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        query<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">          presets<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">            <span class="token string">'es2015'</span></span>
<span class="highlight-line">          <span class="token punctuation">]</span></span>
<span class="highlight-line">        <span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.styl$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        include<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(src\/)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        <span class="token comment">// loader: 'style-loader!css-loader!postcss-loader!stylus-loader'</span></span>
<span class="highlight-line">        loader<span class="token operator">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader!postcss-loader!stylus-loader?paths=src/style'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span></span>
<span class="highlight-line">    <span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  resolve<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    root<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">      path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/script'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/style'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    extensions<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.styl'</span> <span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  plugins<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">      template<span class="token operator">:</span> <span class="token string">'./src/markup/index.html'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      filename<span class="token operator">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vendor'</span><span class="token punctuation">,</span> <span class="token string">'app'</span><span class="token punctuation">]</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token comment">/* chunkName= */</span><span class="token string">'vendor'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token comment">/* filename= */</span><span class="token string">'vendor.js'</span></span>
<span class="highlight-line">    <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token comment">/* Example if we wanted to create a second page */</span></span>
<span class="highlight-line">    <span class="token comment">// new HtmlWebpackPlugin({</span></span>
<span class="highlight-line">    <span class="token comment">//   template: './src/markup/index.html',</span></span>
<span class="highlight-line">    <span class="token comment">//   chunks: ['app2'],</span></span>
<span class="highlight-line">    <span class="token comment">//   filename: 'app.html'</span></span>
<span class="highlight-line">    <span class="token comment">// }),</span></span>
<span class="highlight-line">    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">'app.css'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token comment">/* If --dist is present in process opts then minimize bundles */</span></span>
<span class="highlight-line">    <span class="token punctuation">(</span><span class="token constant">IS_DIST</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token function-variable function">postcss</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">[</span> autoprefixer <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span></span></code></pre>
<p>This lives in the root of our project and is used by <strong>webpack</strong> to create your bundles. We are exposing “config” to <strong>webpack</strong>.</p>
<h3>Entry</h3>
<p>This is where <strong>webpack</strong> starts. This is where we define the entry point to our app. We <strong>can</strong> define more than one entry point. The easiest example would be;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">entry<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  app<span class="token operator">:</span> <span class="token string">'src/script/app.js'</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>“app.js” becomes our starting point. This would be where we initialize our app and pull in global things such as our base styles etc.</p>
<h3>Output</h3>
<p>Where are bundles and assets get dumped.</p>
<h3>Chunks</h3>
<p>I won’t go too much into chunks because I believe it could be a topic in itself. They are as they sound, chunks of your codebase. There are three types; entry, normal and initial.</p>
<p>The simplest to explain would be the entry chunks, each named entry becomes a chunk with that name. So in our entry, we would have an entry chunk named “app”. But we can much further than this when we start discussing “code splitting”.</p>
<h3>Loaders</h3>
<p>I mentioned previously that you may be able to get rid of your task runner completely. Loaders handle the transformation of required modules.</p>
<p>For example; let’s say we require some styles for a component and they are written with SASS. The browser needs CSS. Loaders handle the preprocessing for us.</p>
<p>You can either use loaders directly in your source. This style requires that loaders are piped with <strong>!</strong> and prefix the module path.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'css-loader!sass-loader!./styles/base.sass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>Or you can define loaders within your configuration so you can simply do;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./styles/base.sass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>More on loaders later.</p>
<h3>Plugins</h3>
<blockquote>
<p>For everything else, there’s a plugin.</p>
</blockquote>
<p>There seems to be some confusion around the difference between plugins and loaders on the <strong>webpack</strong> docs;</p>
<blockquote>
<p>It’s not immediately clear what differentiates a plugin from a loader. The loader has the interface of input source -&gt; output source, but what about plugin? What is their purpose? I’m sure I will figure it out shortly, but current docs do not do a good job of differentiating.</p>
</blockquote>
<p>To me, loaders handle processing individual files whether they need transformation or not. I need this module, the loader handles grabbing it.</p>
<p>Plugins are there to handle everything else. Scenarios that can’t be handled by loaders. We can’t put a concrete label on them because they don’t really have limits. In some cases they will do things that are bundle specific, like minification of source. But in other cases they may be generating their own files to go alongside the bundle. An example being the <strong>html-webpack-plugin</strong> that will create markup files for you based on the bundle and defined options.</p>
<hr>
<h2>Example</h2>
<p>I’m going to try and replicate the majority of my <strong><a href="https://github.com/jh3y/gulp-boilerplate">gulp-boilerplate</a></strong>;</p>
<ul>
<li>Markup compilation</li>
<li>Stylesheet compilation(<em>Stylus w/ autoprefixing</em>)</li>
<li>Script compilation(<em>Babel</em>)</li>
<li>Static server with automatic livereload and style injection</li>
</ul>
<p>We use npm to install required packages and I am using a self-documented Makefile for running commands (<em>This is just a preference of mine to avoid using npm run-scripts, you can use run-scripts if you like</em>)</p>
<p><strong>NOTE::</strong> You can grab the source from <a href="https://github.com/jh3y/webpack-playground">here</a> if you get stuck or need some guidance.</p>
<h3>Source structure</h3>
<pre><code>+ repo
  + src
+ markup
      - index.html
+ script
      + components
        + binarizer
          - binarizer.js
          - binarizer.styl
      + modules
        - convert.js
      - app.js
+ style
      - base.styl
- Makefile
- package.json
- webpack.config.babel.js
</code></pre>
<p><strong>NOTE::</strong> <em>instead of using “webpack.config.js”, I am using “webpack.config.babel.js”. This is possible with the use of “babel-register”.</em></p>
<h3>Configuration file</h3>
<p>Here is the resulting configuration file for reference(<em>likely to be updated</em>).</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> autoprefixer      <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> webpack           <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> path              <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">IS_DIST</span> <span class="token operator">=</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'--dist'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  devServer<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    port<span class="token operator">:</span> <span class="token number">1987</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  entry<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    app<span class="token operator">:</span> <span class="token string">'./src/script/app.js'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token comment">/* create a vendor chunk for grabbing vendor resources */</span></span>
<span class="highlight-line">    vendor<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">      <span class="token string">'lodash'</span></span>
<span class="highlight-line">    <span class="token punctuation">]</span></span>
<span class="highlight-line">    <span class="token comment">/* Create another chunk for a different page etc. */</span></span>
<span class="highlight-line">    <span class="token comment">// app2: './src/script/app2.js'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  output<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    path<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/public</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">    filename<span class="token operator">:</span> <span class="token string">'[name].js'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  module<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    loaders<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        loader<span class="token operator">:</span> <span class="token string">'babel'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        include<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(src\/script)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        query<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">          presets<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">            <span class="token string">'es2015'</span></span>
<span class="highlight-line">          <span class="token punctuation">]</span></span>
<span class="highlight-line">        <span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.styl$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        include<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(src\/)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        <span class="token comment">// loader: 'style-loader!css-loader!postcss-loader!stylus-loader'</span></span>
<span class="highlight-line">        loader<span class="token operator">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader!postcss-loader!stylus-loader?paths=src/style'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span></span>
<span class="highlight-line">    <span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  resolve<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    root<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">      path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/script'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/style'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    extensions<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.styl'</span> <span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  plugins<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">      template<span class="token operator">:</span> <span class="token string">'./src/markup/index.html'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      filename<span class="token operator">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vendor'</span><span class="token punctuation">,</span> <span class="token string">'app'</span><span class="token punctuation">]</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token comment">/* chunkName= */</span><span class="token string">'vendor'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token comment">/* filename= */</span><span class="token string">'vendor.js'</span></span>
<span class="highlight-line">    <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token comment">/* Example if we wanted to create a second page */</span></span>
<span class="highlight-line">    <span class="token comment">// new HtmlWebpackPlugin({</span></span>
<span class="highlight-line">    <span class="token comment">//   template: './src/markup/index.html',</span></span>
<span class="highlight-line">    <span class="token comment">//   chunks: ['app2'],</span></span>
<span class="highlight-line">    <span class="token comment">//   filename: 'app.html'</span></span>
<span class="highlight-line">    <span class="token comment">// }),</span></span>
<span class="highlight-line">    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">'app.css'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token comment">/* If --dist is present in process opts then minimize bundles */</span></span>
<span class="highlight-line">    <span class="token punctuation">(</span><span class="token constant">IS_DIST</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token function-variable function">postcss</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">[</span> autoprefixer <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span></span></code></pre>
<h3>Handling JavaScript and our first entry point</h3>
<p>Let’s start with JavaScript and creating a basic bundle. We have two entries in our configuration file;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">entry<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  app<span class="token operator">:</span> <span class="token string">'./src/script/app.js'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token comment">/* create a vendor chunk for grabbing vendor resources */</span></span>
<span class="highlight-line">  vendor<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">    <span class="token string">'lodash'</span></span>
<span class="highlight-line">  <span class="token punctuation">]</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span></code></pre>
<p>Our first entry point is going to be “app.js”;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token string">'../style/style.styl'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">import</span> <span class="token string">'lodash'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Binarizer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./components/binarizer/binarizer'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.my-element'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> myBinarizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binarizer</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>Don’t worry about the logic, just focus on the importing.</p>
<p>Hmm. That looks like ES6. Yes, I’m using “import” rather than “require”. That won’t be supported everywhere but it’s use is possible using a loader. Introducing our first loader definition.</p>
<p>To convert our ES6 code to browser happy code, we will use the <strong>babel-loader</strong>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token punctuation">{</span></span>
<span class="highlight-line">  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">  loader<span class="token operator">:</span> <span class="token string">'babel'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  include<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(src\/script)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">  query<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    presets<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">      <span class="token string">'es2015'</span></span>
<span class="highlight-line">    <span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span></code></pre>
<p>Loader definitions all take the same options so you don’t have to worry about different config options like with say something like Grunt.</p>
<ul>
<li>The <strong>test</strong> key is used to check whether a module should be using this loader.</li>
<li>The <strong>loader</strong> key defines which loader to use with this module.</li>
<li>The <strong>include</strong> key(preferred over the <strong>excludes</strong> key according to docs) tells webpack to only use the loader on matching modules within the defined directories.</li>
<li>The <strong>query</strong> key is for additional options.</li>
</ul>
<p>Here we are simply saying whenever there is a .js file loaded from within “src/script” use the <strong>babel-loader</strong> to convert the script.</p>
<hr>
<p>Back to what we’re importing. Notice that we are also importing <strong>lodash</strong>. We can import vendor scripts just as we would in <strong>node</strong>. However, instead of packaging them within in our bundle, we may choose to keep them separate in their own bundle such as <strong>vendor.js</strong>.</p>
<p>This is possible by creating another chunk and using our first plugin;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">entry<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  app<span class="token operator">:</span> ‘<span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>script<span class="token operator">/</span>app<span class="token punctuation">.</span>js’<span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token comment">/* create a vendor chunk for grabbing vendor resources */</span></span>
<span class="highlight-line">  vendor<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">    ‘lodash’</span>
<span class="highlight-line">  <span class="token punctuation">]</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span></code></pre>
<p>The plugin we will use is the <strong>CommonsChunkPlugin</strong>. This will create another bundle with a given name based off of the provided chunk.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">plugins<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span></span>
<span class="highlight-line">    <span class="token comment">/* chunkName= */</span><span class="token string">'vendor'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token comment">/* filename= */</span><span class="token string">'vendor.js'</span></span>
<span class="highlight-line">  <span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">]</span></span></code></pre>
<p>When we run <strong>webpack</strong>;</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line">webpack --progress --colors</span></code></pre>
<p>We’ll expect to get back <strong>app.js</strong> and <strong>vendor.js</strong>. But, where will they go?</p>
<p>This is what we need the <strong>output</strong> key for in our configuration. This defines where our bundled assets get dumped and with what name.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">output<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  path<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/public</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">  filename<span class="token operator">:</span> <span class="token string">'[name].js'</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span></code></pre>
<p>This means that our assets will get dumped in the <strong>public</strong> folder. The use of “[name]” means that they will have a filename matching their chunk name. You can also use other options here such as “[hash]”.</p>
<p>It is also worth making a remark here about “code splitting”. I’ve shown a simple way here with using named chunks and use of the <strong>CommonsChunkPlugin</strong>. But later down the line when you’re dealing with more complex applications you’ll most likely be needing to give performance some consideration. Webpack does have some(<em>and I hate to use the word</em>) magic up it’s sleeve. Let’s consider a single page application with several views. If we load the scripts for all those views on the first page this can slow down our app on initial load and this will impact performance. What if we could make it so that our app only pulled in bundled chunks of logic when they were required? For example, if I had an app where I could view and edit photos, I wouldn’t need the editing logic if I landed on the view page. Webpack makes this possible with anonymous chunks and the use of <strong>require.ensure</strong>. Not a real world example but an easy way to show the code working would be to alter <strong>app.js</strong> to use <strong>require.ensure</strong> to get our Binarizer module and then show our app as loaded on first load;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token string">'style.styl'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">import</span> <span class="token string">'lodash'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.my-element'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'loading'</span><span class="token punctuation">;</span></span>
<span class="highlight-line">require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'components/binarizer/binarizer'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> Binarizer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'components/binarizer/binarizer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> myBinarizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binarizer<span class="token punctuation">.</span>Binarizer</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>This is a real simple example of code splitting and it’s a topic which could have it’s own article on it’s own so I strongly encourage looking it up!</p>
<h3>Handling Markup</h3>
<p>Our scripts aren’t much good without some markup to use them in.</p>
<p>When I first started with <strong>webpack</strong>, working out how to keep my markup within my <strong>src</strong> folder wasn’t instantly obvious.</p>
<p>I’m a firm believer in source belonging in the <strong>src</strong> folder. I don’t want to commit parts of the <strong>public</strong> folder etc.</p>
<p>The <strong>html-webpack-plugin</strong> is really good for this scenario. You create your markup templates and let the plugin publish them to your output path.</p>
<p>Under “src/markup” we have <strong>index.html</strong>;</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en-us<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Webpack playground<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, user-scalable=0, maximum-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webpack playground<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>webpack-playground<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-element<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre>
<p>Note that we omit any script, link and style tags. <strong>webpack</strong> magic will handle this!</p>
<p>Under plugins, we simply declare the use of our plugin to create our markup files;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  template<span class="token operator">:</span> <span class="token string">'./src/markup/index.html'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  filename<span class="token operator">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vendor'</span><span class="token punctuation">,</span> <span class="token string">'app'</span><span class="token punctuation">]</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span></code></pre>
<p>Note that we declare the chunks to be included. This gives us the ability to pick and choose which chunks we could need for which pages.</p>
<p>To create multiple pages, we use multiple instances of the plugin.</p>
<h3>Handling Styles</h3>
<p>Handling styles is actually pretty nice once you’ve got into it. It’s certainly something I feel compliments the whole modular approach.</p>
<p>First things first, the project is using Stylus so we are going to need another loader;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token punctuation">{</span></span>
<span class="highlight-line">  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.styl$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">  include<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(src\/)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">  loader<span class="token operator">:</span> <span class="token string">'style-loader!css-loader!postcss-loader!stylus-loader'</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This will inline our styles within our bundle. I’m not a massive fan of this, it just doesn’t sit right with me. I prefer a native CSS file for the majority. No worries, digging around would lead you to reading up on <a href="https://webpack.github.io/docs/stylesheets.html">stylesheets</a>. Here you’ll find that there’s a happy medium if you prefer this approach;</p>
<blockquote>
<p>Create one css file per initial chunk (see <a href="https://webpack.github.io/docs/code-splitting.html">Code Splitting</a>) and embed stylesheets into additional chunks. (recommended)</p>
</blockquote>
<p>Cool!</p>
<p>If you read up on it, you’ll find that using the <strong>extract-text-webpack-plugin</strong> you can extract the styles and create the file you want. This just requires changing our loader definition and adding the plugin.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">/* Loader definition */</span></span>
<span class="highlight-line"><span class="token punctuation">{</span></span>
<span class="highlight-line">  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.styl$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">  include<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(src\/)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">  loader<span class="token operator">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader!postcss-loader!stylus-loader'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token comment">/* Plugins */</span></span>
<span class="highlight-line"><span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">'app.css'</span><span class="token punctuation">)</span></span></code></pre>
<p>Our markup will get the link to <strong>app.css</strong> automagically and we can now import our styles where we need them.</p>
<h3>Autoprefixing, How?</h3>
<p>Easy. We’ll need to use the <strong>postcss-loader</strong>. After going and looking at the docs, we can see that it’s as simple as adding the loader to our loader chain for our style files and declaring that the <strong>postcss-loader</strong> uses <strong>autoprefixer</strong> by adding the following to the root of our configuration;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function-variable function">postcss</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">[</span> autoprefixer <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>You can provide options to <strong>autoprefixer</strong> if required.</p>
<h3>Where to include global styles</h3>
<p>This is one that might seem off at first. You’ll be looking to include your base/global styles at the entry point to your application. We are doing this in <strong>app.js</strong></p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> '<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>style<span class="token operator">/</span>style<span class="token punctuation">.</span>styl</span></code></pre>
<p>Global styling assets such as variables need to be imported by the modules that need them.</p>
<h3>Component Specific Styles</h3>
<p>The nicest thing I believe with styles is that with webpack, you can just pull in styles where you need them, you don’t have to micro manage it with your task runner. For example, let’s say I have some component with it’s own specific styles.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token comment">/**
<span class="highlight-line">  * Some awesome component</span>
*/</span>
<span class="highlight-line"><span class="token comment">// Import component specific styles</span></span>
<span class="highlight-line"><span class="token keyword">import</span> <span class="token string">'./style/component.styl'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token comment">// Import utils</span></span>
<span class="highlight-line"><span class="token keyword">import</span> <span class="token string">'../utils'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token comment">// Awesome logic goes here</span></span></code></pre>
<h3>Importing Vendor Styles</h3>
<p>What about vendor styles? In most cases we are going to pull in some common CSS utilities like <strong>normalize</strong>.</p>
<p>I tend to do this in the root of my styles. Prefixing a vendor name with <strong>~</strong> will find it.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">@<span class="token keyword">import</span> <span class="token string">'~normalize.css'</span></span>
<span class="highlight-line">@<span class="token keyword">import</span> <span class="token string">'base.styl'</span></span>
<span class="highlight-line">@<span class="token keyword">import</span> <span class="token string">'./components/button.styl'</span></span></code></pre>
<h3>Handling Assets</h3>
<p>I’m not going to touch too much on the handling of images and other assets. Essentially anything that you need to be an asset becomes a module so you need to require/import it. If I need an image then I need to import it. This will mainly become prevalent in projects that use libraries such as React;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> imageSrc <span class="token operator">=</span> <span class="token keyword">import</span> <span class="token string">'../img/profile.png'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> image <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">image<span class="token punctuation">.</span>src   <span class="token operator">=</span> imageSrc<span class="token punctuation">;</span></span></code></pre>
<p>In the majority of cases, there is going to be a loader for what you need or a plugin to help you.</p>
<p>Remember. Google <strong>is</strong> your friend.</p>
<h3>Optimizing Code</h3>
<p>I’ll briefly touch upon the optimization of code. In most projects, you’ll have some way of creating a distributable version of your source or a production ready version.</p>
<p>A common example would be minifying your JavaScript. In a task runner you’re likely to add a step for minifying the output with uglify.</p>
<p>With webpack it’s a little different. This is because you’re working against the bundle. If you’re going to minify one thing, you’re minifying all the things! I kinda like this though.</p>
<h4>How?</h4>
<p>As we are in node land, we can add an additional option when we invoke <strong>webpack</strong>. It will mean nothing to <strong>webpack</strong>, but we can use it in our configuration file. When we want to optimize our source we can invoke <strong>webpack</strong> with an additional <strong>dist</strong> option</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line">webpack --progress --colors --dist</span></code></pre>
<p>Inside our configuration we can create a reference that checks for the existence of this option;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">IS_DIST</span> <span class="token operator">=</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>‘<span class="token operator">--</span>dist’<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span></code></pre>
<p>All that’s left is to determine whether a plugin should be used or not based on this reference. Inside our plugins we add the following;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token punctuation">(</span><span class="token constant">IS_DIST</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span></code></pre>
<p>That’s all there is to it. When it runs, all outputted assets will be minified where appropriate.</p>
<h3>Serving It</h3>
<p>The last piece to our webpack starter pack is serving up all of our assets so we can see them working in the browser. We also want watching and some livereload goodness thrown in.</p>
<p>Simply, <strong>webpack-dev-server</strong> handles it all.</p>
<p>It accepts the same options as <strong>webpack</strong> does when we run that. The only difference is that we require reloading and style injection. For this, we need to use the <strong>hot</strong> and <strong>inline</strong> options along with the <strong>d</strong> option for watching;</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line">webpack-dev-server --progress --colors --hot -d --inline</span></code></pre>
<h3>Bonus:: Handling Ugly Imports</h3>
<p>You might have noticed some of those “import” statements we’ve been using get pretty ugly when we start using relative paths.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token string">'../styles/style.styl'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">import</span> <span class="token string">'../../modules/someModule'</span><span class="token punctuation">;</span></span></code></pre>
<p>Imagine how bad this gets when the our codebase grows and we have further nested directories etc.</p>
<p>Luckily, <strong>webpack</strong> is ahead of the game on this. If we have a <strong>src</strong> folder where all our source lives we can tell <strong>webpack</strong> about root paths to resolve and use as a lookup. For example, to look for modules with a root path of “src/styles” and “src/scripts”.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="highlight-line">resolve<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  root<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/scripts'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/styles'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">]</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p><em>NOTE:: For path resolution within style files, you’ll need to refer to loader documentation for your loader of choice.</em></p>
<h3>Bonus:: Setting Up Tests</h3>
<p>You may be wondering how to set up creating test source with <strong>webpack</strong>. It isn’t straight-forward when first using <strong>webpack</strong>. Let’s have a quick look at getting set up with <strong>mocha/chai</strong>.</p>
<p>First things first. I prefer to structure my source so that my tests are relative to the entities being tested. For example, if I have</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line">src/script/component/superComponent.js</span></code></pre>
<p>then I will also have;</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line">src/script/component/superComponent.test.js</span></code></pre>
<p>This comes into play later on.</p>
<p>If you start searching for ways to set up tests with <strong>webpack</strong>, you’ll see various things such as loaders for <strong>mocha</strong> etc.</p>
<p>Getting set up is much simpler than that. Yes, <strong>webpack</strong> will only dump out one bundle, but we can pass <strong>webpack</strong> a different config when we want in order to generate a test bundle for <strong>mocha</strong> to use.</p>
<p>If we create a new config named <strong>webpack.config.test.babel.js</strong>, we can use a testing root as our entry point.</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line">webpack --config webpack.config.test.babel.js --progress --colors</span></code></pre>
<blockquote>
<p>But won’t we have to import every test from the entry point?</p>
</blockquote>
<p>No. There is a little trick. What we do is create an entry point that will do all the lifting for us. Create a test building entry point at <strong>test/test.build.js</strong>;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">var</span> context <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'../src/script/'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\.test\.js</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">context<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> context<span class="token punctuation">;</span></span></code></pre>
<p>This trick simply searches the given directory and imports all modules that end with <strong>.test.js</strong>.</p>
<blockquote>
<p>What about when a module tries to import styles?</p>
</blockquote>
<p>We only care about the importing of scripts for our unit tests, so in our test config we tell <strong>webpack</strong> to essentially ignore anything other than scripts using a special loader known as the <strong>null-loader</strong>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token punctuation">{</span></span>
<span class="highlight-line">  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.styl$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">  include<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(src\/)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">  loader<span class="token operator">:</span> <span class="token string">'null-loader'</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Our test config will look something like the following;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  entry<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    test<span class="token operator">:</span> <span class="token string">'./test/test.build.js'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  output<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    path<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/test</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">    filename<span class="token operator">:</span> <span class="token string">'[name].js'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  module<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    loaders<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(js|jsx)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        loader<span class="token operator">:</span> <span class="token string">'babel'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        include<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(src\/script)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        query<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">          presets<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">            <span class="token string">'es2015'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">            <span class="token string">'react'</span></span>
<span class="highlight-line">          <span class="token punctuation">]</span></span>
<span class="highlight-line">        <span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.styl$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        include<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(src\/)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        loader<span class="token operator">:</span> <span class="token string">'null-loader'</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span></span>
<span class="highlight-line">    <span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  resolve<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    extensions<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.jsx'</span> <span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span></span></code></pre>
<p>To run our tests;</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line">webpack --config webpack.config.test.babel.js</span>
<span class="highlight-line">./node_modules/bin/mocha test/test.js</span></code></pre>
<h2>That’s it!</h2>
<p>Yep. It’s just another <strong>webpack</strong> intro. It also may not be the clearest thing to follow(<em>please leave notes and suggestions, I’ll do my best to clarify and make alterations if necessary</em>).</p>
<p>But, this one covers some things which weren’t at first obvious to me and I feel are somewhat overlooked without having to dig through various blog posts and reems of documentation.</p>
<p>I can understand why so many of these intros and tutorials pop up. It’s not easy to write about. I can really sympathise with the webpack author. It’s a really great tool, but it’s pretty hard to write about.</p>
<p>You can grab a playground repo <a href="https://github.com/jh3y/webpack-playground">here</a> to experiment with and play around with webpack.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> autoprefixer      <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> webpack           <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token keyword">const</span> path              <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token constant">IS_DIST</span> <span class="token operator">=</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'--dist'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  devServer<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    port<span class="token operator">:</span> <span class="token number">1987</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  entry<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    app<span class="token operator">:</span> <span class="token string">'./src/script/app.js'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token comment">/* create a vendor chunk for grabbing vendor resources */</span></span>
<span class="highlight-line">    vendor<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">      <span class="token string">'lodash'</span></span>
<span class="highlight-line">    <span class="token punctuation">]</span></span>
<span class="highlight-line">    <span class="token comment">/* Create another chunk for a different page etc. */</span></span>
<span class="highlight-line">    <span class="token comment">// app2: './src/script/app2.js'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  output<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    path<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/public</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">    filename<span class="token operator">:</span> <span class="token string">'[name].js'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  module<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    loaders<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        loader<span class="token operator">:</span> <span class="token string">'babel'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        include<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(src\/script)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        query<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">          presets<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">            <span class="token string">'es2015'</span></span>
<span class="highlight-line">          <span class="token punctuation">]</span></span>
<span class="highlight-line">        <span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">{</span></span>
<span class="highlight-line">        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.styl$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        include<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(src\/)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span></span>
<span class="highlight-line">        <span class="token comment">// loader: 'style-loader!css-loader!postcss-loader!stylus-loader'</span></span>
<span class="highlight-line">        loader<span class="token operator">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader!postcss-loader!stylus-loader?paths=src/style'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span></span>
<span class="highlight-line">    <span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  resolve<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    root<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">      path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/script'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/style'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    extensions<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.styl'</span> <span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  plugins<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="highlight-line">    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">      template<span class="token operator">:</span> <span class="token string">'./src/markup/index.html'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      filename<span class="token operator">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vendor'</span><span class="token punctuation">,</span> <span class="token string">'app'</span><span class="token punctuation">]</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span></span>
<span class="highlight-line">      <span class="token comment">/* chunkName= */</span><span class="token string">'vendor'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token comment">/* filename= */</span><span class="token string">'vendor.js'</span></span>
<span class="highlight-line">    <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token comment">/* Example if we wanted to create a second page */</span></span>
<span class="highlight-line">    <span class="token comment">// new HtmlWebpackPlugin({</span></span>
<span class="highlight-line">    <span class="token comment">//   template: './src/markup/index.html',</span></span>
<span class="highlight-line">    <span class="token comment">//   chunks: ['app2'],</span></span>
<span class="highlight-line">    <span class="token comment">//   filename: 'app.html'</span></span>
<span class="highlight-line">    <span class="token comment">// }),</span></span>
<span class="highlight-line">    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">'app.css'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token comment">/* If --dist is present in process opts then minimize bundles */</span></span>
<span class="highlight-line">    <span class="token punctuation">(</span><span class="token constant">IS_DIST</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token function-variable function">postcss</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">[</span> autoprefixer <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span></span></code></pre>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>How To: Pure CSS Carousel</title>
    <link href="https://jhey.dev/writing/how-to-pure-css-carousel/"/>
    <updated>2016-05-23T22:00:00+01:00</updated>
    <id>https://jhey.dev/writing/how-to-pure-css-carousel/</id>
    <content type="html"><![CDATA[
      <p>The carousel can be pretty daunting. There are so many options, features, devices/browsers to please. Do you even need a carousel? 😕</p>
<blockquote>
<p><strong>“No!!! Seriously, you really shouldn’t”</strong> — <em><a href="http://shouldiuseacarousel.com/">shouldiuseacarousel.com</a>(love the inline comments in the markup, check the</em> <code>console</code> <em>😂)</em></p>
</blockquote>
<p>If you decide you need a carousel, you don’t have to create one yourself. You might look at <a href="http://kenwheeler.github.io/slick/">slick carousel</a> or something from a large UI framework such as <a href="http://getbootstrap.com/javascript/#carousel">Bootstrap</a>.</p>
<p>And this is where the disclaimer comes in 👉 If you’re looking for a feature rich carousel, a pure <code>CSS</code> “carousel”(<em>heavy emphasis on the quotes</em>) is not for you. You can close the browser tab, continue with your carousel and most likely no kittens will come to harm 😉</p>
<p>For those intrigued or looking to save kittens, let’s explore! 🔍</p>
<p>For those in camp <strong>TL;DR</strong>, Here’s a demo!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="WwVKLN"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/WwVKLN">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>A Background for Pure CSS Components</h2>
<p>Doing things in pure <code>CSS</code> as opposed to with a hint of <code>JavaScript</code> is not something new. I’ve written before about thinking CSS first.</p>
<p>The capability to create this “carousel” example isn’t something new that’s sprung up. A new <code>CSS</code> feature hasn’t landed. What it is, is another case of thinking outside the box a little and getting <code>CSS</code> to do more heavy lifting for us. Most pure <code>CSS</code> tricks come from observing how elements respond to user interaction 😎</p>
<p>The most simple pure <code>CSS</code> solution most will be familiar with is to show something like a tooltip or a menu. Hover state provides an opportunity to alter render state without touching any <code>JavaScript</code>.</p>
<h3>The “carousel” trick 🎩</h3>
<p>So, what’s the trick for getting this “carousel” to work?</p>
<p>The use of the <code>label</code> element in combination with <code>input</code> elements of type <code>radio</code>. In particular we leverage the <code>for</code> and <code>checked</code> attributes of each. We use the sibling combinator(<code>~</code>) and preprocessor looping. We can use these to generate <code>nth-of-type</code> selectors for the number of slides we are showing.</p>
<p>We are going to explore two styles of “carousel”. One will give us the sliding effect from side to side. The other will be more of a fade in/out deal(<em>check the <a href="http://codepen.io/jh3y/pen/WwVKLN">demo</a> quick to see what I mean</em>).</p>
<p>Consider the following markup which will give us the latter style.</p>
<p><strong>NOTE;</strong> The only difference in markup structure is that we introduce a “track” element. The track wraps our slide elements for the sliding style.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel my-carousel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__activator<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activator<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__activator<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activator<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__activator<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activator<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__control carousel__control--backward<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__control carousel__control--forward<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__control carousel__control--backward<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__control carousel__control--forward<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__control carousel__control--backward<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__control carousel__control--forward<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__slide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__slide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__slide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__indicators<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__indicator<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__indicator<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__indicator<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span></code></pre>
<p>Got an idea of how it might work? If not consider this <a href="https://jsbin.com/xemamoboma/2/edit?html,output">demo</a> that lays out the elements with no “carousel” styling. Click some of the elements, in particular, the <code>label</code>s. It should make sense and you might be able to proceed with implementing it yourself based off this 👍</p>
<p>Clicking about a bit we see that clicking a <code>label</code> element will check the related <code>radio</code> button. The link is between the radio <code>ID</code> and the <code>for</code> attribute.</p>
<h2>The sibling combinator ~</h2>
<p>The order in the <code>DOM</code> is <strong>important</strong>. We welcome back the sibling combinator that I’ve written about before.</p>
<p>The sibling combinator enables us to select adjacent elements. Thos adjacent elements follow a given element.</p>
<p>Each time our <code>input</code> type <code>radio</code> changes, a new <code>input</code> becomes <code>:checked</code>. At this point we can say “<em>Hey! show the relevant slide and controls that follows this particular checked input</em>”. For this reason our <code>input</code> elements are first within the carousel.</p>
<p>Take this example;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.carousel__activator:nth-of-type(1):checked ~ .carousel__slide:nth-of-type(1)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> showSlide 0.5s forwards<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Here we are saying, “<em>when the <strong>first</strong> input is active, then make the <strong>first</strong> slide visible</em>”.</p>
<p>The use of the sibling combinator is key here.</p>
<h2>nth-of-type selector</h2>
<p>The other important <code>CSS</code> feature we are leveraging is the <code>nth-of-type</code> selector. This selector gives us a little more freedom with the structure of our markup.</p>
<p>In this example we cater for five slides so we go up to <code>nth-of-type(5)</code>. We can leverage <code>CSS</code> preprocessor looping to generate them. For a more robust solution we may tell our preprocessor that the number of slides can go up to <code>10</code>.</p>
<p>The code used to generate these rules would be something like;</p>
<pre class="language-stylus"><code class="language-stylus"><span class="highlight-line"><span class="token variable-declaration"><span class="token variable">$panels</span> <span class="token operator">=</span> <span class="token number">10</span></span></span>
<span class="highlight-line"><span class="token statement"><span class="token keyword">for</span> $num <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span>$panels<span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token selector">.carousel__activator:nth-of-type(<span class="token interpolation variable"><span class="token delimiter punctuation">{</span>$num<span class="token delimiter punctuation">}</span></span>) ~ .carousel__slide:nth-of-type(<span class="token interpolation variable"><span class="token delimiter punctuation">{</span>$num<span class="token delimiter punctuation">}</span></span>)</span></span>
<span class="highlight-line">    <span class="token property-declaration"><span class="token property">display</span> block</span></span>
<span class="highlight-line">    <span class="token property-declaration"><span class="token property">animation</span> showSlide <span class="token number">0.5</span><span class="token unit">s</span> forwards</span></span></code></pre>
<p>This particular snippet is using <code>Stylus</code>. Using other preprocessors like <code>SASS</code>/<code>LESS</code> would be no issue though.</p>
<h2>Styling it up — Fade in/out</h2>
<p>As mentioned before, we are going to produce two styles of carousel.</p>
<p>Our markup structure before was;</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel my-carousel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__activator<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activator<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__activator<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activator<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__activator<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activator<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__control carousel__control--backward<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__control carousel__control--forward<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__control carousel__control--backward<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__control carousel__control--forward<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__control carousel__control--backward<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__control carousel__control--forward<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__slide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__slide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__slide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__indicators<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__indicator<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__indicator<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__indicator<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span></code></pre>
<p>By default, for the fade in/out style we will hide all our slides using the <code>display</code> property. We also <code>position</code> them <code>absolute</code>ly within our carousel element.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.carousel__slide</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This ensures that our slides fill out the carousel element.</p>
<p>We then toggle the visibility of our selected slide using the <code>~</code> combinator;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.carousel__activator:nth-of-type(1):checked ~ .carousel__slide:nth-of-type(1)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> showSlide 0.5s forwards<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We can add an animation to our slide content so that they fade in also at this point to give a nice fade in effect.</p>
<p>It’s important to note that whilst showing a slide, we also show relevant controls for that slide. This applies to both styles of carousel.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.carousel__activator:nth-of-type(1):checked ~ .carousel__controls:nth-of-type(1)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>All that’s left to do from here with this style is add some extra nice touches and style themes that we desire.</p>
<h2>Styling it up — Sliding</h2>
<p>The sliding style carousel works different to our fade in/out style. As such it requires a small tweak to the markup. We need to wrap our <code>carousel__slide</code> elements inside a container. We will call this element the <code>carousel__track</code>.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__track<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__slide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carousel__slide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>The “trick” to making the slide work is to line up all slides side by side within the track. We then slide the track element within the carousel using <code>CSS</code> transforms. This will give the effect of our slides sliding from side to side.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.carousel__track .carousel__slide:nth-of-type(1)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.carousel__track .carousel__slide:nth-of-type(2)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.carousel__track .carousel__slide:nth-of-type(3)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>200%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>When a radio <code>input</code> becomes <code>:checked</code> we translate the track on the x-axis, scaled by the <code>nth-child</code> value. For example, to show the second slide we will translate our track on the x-axis by <code>-100%</code>.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.carousel__activator:nth-of-type(2):checked ~ .carousel__track</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-100%<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The scale is;</p>
<pre class="language-stylus"><code class="language-stylus"><span class="highlight-line"><span class="token property-declaration"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token func"><span class="token function">translateX</span><span class="token punctuation">(</span><span class="token func"><span class="token function">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span>$num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token unit">%</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></span></span></code></pre>
<p>We do need to make sure our track element has the <code>transition</code> property set. This is so that are sliding is not instant and we actually get the animated effect;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.carousel__track</span> <span class="token punctuation">{</span> <span class="token property">transition</span><span class="token punctuation">:</span> transform 0.5s<span class="token punctuation">;</span> <span class="token punctuation">}</span></span></code></pre>
<p>That’s all there is to it for sliding specific styles. Both styles share many of the styling rules.</p>
<h2>Extra nice touches</h2>
<p>We can add some nice touches like showing indicators and extra controls. For example, here are the indicators for our carousels;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.carousel__indicator</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">z-index</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.35<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">margin</span><span class="token punctuation">:</span> 0 2.5px 0 2.5px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.carousel__indicator:hover</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.75<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And this is how you show them as active when the appropriate slide is being shown.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.carousel__activator:nth-of-type(1):checked ~ .carousel__indicators .carousel__indicator:nth-of-type(1)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>All that’s left to do is position things where you desire and theme them up!</p>
<h2>A note on accessibility</h2>
<p>Accessibility is important when developing for the web. With pure <code>CSS</code> carousels we can strive to make things pretty accessible 👍 We are providing a list of content. We make a slight alteration to our implementation. We make it so that all content is always visible but not always in the carousel viewbox. That way, a screen reader such as <code>OSX</code>’s <code>Voiceover Utility</code> will read out all our slides to the user as intended.</p>
<p>Our slides before had <code>top</code>, <code>right</code>and <code>left</code>defined for them with <code>absolute</code> positioning. Let’s make it so that only the visible slide gets this positioning and they are all visible at all times;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.carousel__activator:nth-of-type(1):checked ~ .carousel__slide:nth-of-type(1)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">animation</span><span class="token punctuation">:</span> showSlide 0.5s forwards<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.carousel__slide</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We also remove the list style from our carousel so the <code>VoiceOver</code> doesn’t tell us we have an empty bullet for each slide 👍</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.carousel</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>For our markup, let’s make the slider version not use a list for the container. The track element inside it can become a list. Remove the padding and margin from the track;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.carousel__track</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transition</span><span class="token punctuation">:</span> transform 0.5s<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>That’s it!</h2>
<p>We’ve explored creating pure <code>CSS</code> carousels. Taking advantage of element behavior and <code>CSS</code> features, we can do some pretty neat things. Which style of <code>CSS</code> only “carousel” do you prefer? Or should we banish carousels altogether? What else could we come up with? Be sure to check out the <a href="https://codepen.io/jh3y/pen/WwVKLN">demo</a>.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="WwVKLN"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/WwVKLN">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>A Quick Guide for Switching to Gulp 4</title>
    <link href="https://jhey.dev/writing/a-quick-guide-for-switching-to-gulp-4/"/>
    <updated>2016-03-17T03:53:20+00:00</updated>
    <id>https://jhey.dev/writing/a-quick-guide-for-switching-to-gulp-4/</id>
    <content type="html"><![CDATA[
      <p>A new version of gulp is here. What do you <strong>need</strong> to know? Will your <code>gulpfile</code>s break?</p>
<p>There are various changes listed in the <a href="https://github.com/gulpjs/gulp/blob/4.0/CHANGELOG.md">CHANGELOG</a> for <code>gulp@4.0</code>. The majority are non-breaking. The major breaking change is the introduction of <code>gulp.series</code> and <code>gulp.parallel</code>.</p>
<p>Before going any further, thanks to Gulp for sharing this guide over on Twitter 🐦!</p>
<blockquote class="twitter-tweet" data-theme="dark">
      <a href="https://twitter.com/gulpjs/status/957412715974164480?ref_src=twsrc%5Etfw">Check out this tweet!</a>
    </blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>For those in camp <strong>TL;DR</strong> — not a huge impact. Your tasks will break if they use the list parameter to define task dependencies. It’s not a huge refactor though to get things back in working order. You can see a gist using <code>gulp@4.0</code> below and here’s a <a href="https://github.com/jh3y/gulp-boilerplate">link</a> to a <code>gulp</code> boilerplate using <code>gulp@4.0</code>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> gulp <span class="token keyword">from</span> <span class="token string">'gulp'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">compileMarkup</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// COMPILE MARKUP }</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">compileScript</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// COMPILE SCRIPT }</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">compileStyle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// COMPILE STYLE }</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">watchMarkup</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// WATCH MARKUP }</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">watchScript</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// WATCH SCRIPT }</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">watchStyle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// WATCH STYLE }</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> compile <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>compileMarkup<span class="token punctuation">,</span> compileScript<span class="token punctuation">,</span> compileStyle<span class="token punctuation">)</span></span>
<span class="highlight-line">compile<span class="token punctuation">.</span>description <span class="token operator">=</span> <span class="token string">'compile all sources'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token comment">// Not exposed to CLI</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">startServer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// START SERVER }</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> serve <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>compile<span class="token punctuation">,</span> startServer<span class="token punctuation">)</span></span>
<span class="highlight-line">serve<span class="token punctuation">.</span>description <span class="token operator">=</span> <span class="token string">'serve compiled source on local server at port 3000'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> watch <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>watchMarkup<span class="token punctuation">,</span> watchScript<span class="token punctuation">,</span> watchStyle<span class="token punctuation">)</span></span>
<span class="highlight-line">watch<span class="token punctuation">.</span>description <span class="token operator">=</span> <span class="token string">'watch for changes to all source'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> defaultTasks <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>serve<span class="token punctuation">,</span> watch<span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">export</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  compile<span class="token punctuation">,</span></span>
<span class="highlight-line">  compileMarkup<span class="token punctuation">,</span></span>
<span class="highlight-line">  compileScript<span class="token punctuation">,</span></span>
<span class="highlight-line">  compileStyle<span class="token punctuation">,</span></span>
<span class="highlight-line">  serve<span class="token punctuation">,</span></span>
<span class="highlight-line">  watch<span class="token punctuation">,</span></span>
<span class="highlight-line">  watchMarkup<span class="token punctuation">,</span></span>
<span class="highlight-line">  watchScript<span class="token punctuation">,</span></span>
<span class="highlight-line">  watchStyle<span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">default</span> defaultTasks</span></code></pre>
<h2>Series + Paralell</h2>
<p>This is the big change. It seems there has been a big effort made towards enabling more control over how tasks run 🛂</p>
<h3>Always in parallel or chained ⛓</h3>
<p>In previous versions of <code>gulp</code> we could pass a list parameter to a task. This would define a set of tasks that would run before that task.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// do something})</span></span></code></pre>
<p>In this example, task <code>a</code> relies on tasks <code>b</code> and <code>c</code> to run before it will. Tasks <code>b</code> and <code>c</code> will run in parallel. You don’t have control over their running order unless you create a chain;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// do something})</span></span>
<span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// do something})</span></span></code></pre>
<p>This ensures a running order of <code>b</code>, then <code>c</code>, then <code>a</code>. If you need to chain tasks, it could soon get confusing. Task metadata and good docs might help but wouldn’t it be much easier to have something like;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token function">series</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// do something})</span></span></code></pre>
<p>That’s pretty much what you’re getting with <code>gulp@4.0</code> 🎉</p>
<h3>The new kids on the block</h3>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<p>Rather intuitive. The list parameter gets deprecated 👢</p>
<p>If we look at our first example;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// do something })</span></span></code></pre>
<p>To convert this for <code>gulp@4.0</code></p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token comment">// do something</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></code></pre>
<p>If you’re switching to <code>gulp@4.0</code>, and you haven’t already, you’ll likely want to stop using anonymous functions. They print <code>&lt;anonymous&gt;</code> when run and aren’t very useful when viewing task metadata. If you haven’t used task metadata, I recommend it. You can read about it <a href="https://medium.com/gulpjs/gulp-sips-custom-task-metadata-9a2dc80ac7b1">here</a>.</p>
<p>You could change the above to</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token comment">// do something</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></code></pre>
<p>But to make it even better 👍</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">var</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// do some stuff }</span></span>
<span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span></span></code></pre>
<p>Or better than that</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">var</span> a <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span></span>
<span class="highlight-line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span>a <span class="token punctuation">}</span></span></code></pre>
<p>Yep that does actually work. You can <code>export</code> functions as tasks. This isn’t specific to <code>gulp@4.0</code> but if you’re switching why not try out something new? You can see more on <code>exports</code> as tasks <a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/exports-as-tasks.md">here</a>.</p>
<p>I’d switch out the variable <code>a</code> declaration there though. Though it would still work via hoisting.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">var</span> doStuff <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span></span>
<span class="highlight-line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> doStuff<span class="token operator">:</span> doStuff <span class="token punctuation">}</span></span></code></pre>
<p>Let’s take it a little further. Odds are you are using newer <code>JavaScript</code> syntax via <code>babel</code> etc.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> doStuff <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">export</span> <span class="token punctuation">{</span> doStuff <span class="token punctuation">}</span></span></code></pre>
<p>Or</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">const</span> doStuff <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span></span></code></pre>
<p>That’s tidy 😎</p>
<p>If you don’t mind, the rest of the examples will use the newer syntax style 👍</p>
<p>Right, back to <code>gulp@4.0</code>. The new API encourages you to think more about the actual structure of your build tasks. It also advocates smaller comprehensive tasks which provides better flexibility when making changes.</p>
<h3>A real example</h3>
<p>Let’s consider a real use case.</p>
<p>A common default task is something like <code>develop</code>. This may have once looked like</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'develop'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'serve'</span><span class="token punctuation">,</span> <span class="token string">'watch'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span></code></pre>
<p>It should be pretty self explanatory what these tasks do;</p>
<ul>
<li><code>serve</code> — serves up assets on a local static server</li>
<li><code>watch</code> — watches all source and triggers compilation on change</li>
</ul>
<p>This makes perfect sense to run in <code>parallel</code></p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> defaultTasks <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>serve<span class="token punctuation">,</span> watch<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">default</span> defaultTasks</span></code></pre>
<p>An example of <code>series</code> in use? It’s likely that <code>serve</code> task will want to compile assets before serving. Something like</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> compileAssets <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">[</span>compileScript<span class="token punctuation">,</span> compileStyle<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">startServer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// magic }</span></span>
<span class="highlight-line"><span class="token keyword">const</span> serve <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>compileAssets<span class="token punctuation">,</span> startServer<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">export</span> <span class="token punctuation">{</span> serve <span class="token punctuation">}</span></span></code></pre>
<h2>And that’s all there is to it!</h2>
<p>Migration to <code>gulp@4.0</code> should be pretty straightforward. The documentation is good and there are plenty of resources out there to help you if you get stuck. I’ve left some links below and an example <code>gist</code> using the new syntax. You can also check out a <code>gulp</code> boilerplate using <code>gulp@4.0</code> <a href="https://github.com/jh3y/gulp-boilerplate">here</a> 👍🤓</p>
<p>As always, any questions or suggestions, please feel free to leave a response or <a href="https://twitter.com/@jh3yy">tweet</a> me 🐦!</p>
<h3>Some links</h3>
<ul>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/exports-as-tasks.md">Exports as tasks</a> — Gulp on Github</li>
<li><a href="https://medium.com/gulpjs/gulp-sips-custom-task-metadata-9a2dc80ac7b1">Custom task metadata </a>— Gulp on Medium</li>
</ul>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> gulp <span class="token keyword">from</span> <span class="token string">'gulp'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">compileMarkup</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// COMPILE MARKUP }</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">compileScript</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// COMPILE SCRIPT }</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">compileStyle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// COMPILE STYLE }</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">watchMarkup</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// WATCH MARKUP }</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">watchScript</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// WATCH SCRIPT }</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">watchStyle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// WATCH STYLE }</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> compile <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>compileMarkup<span class="token punctuation">,</span> compileScript<span class="token punctuation">,</span> compileStyle<span class="token punctuation">)</span></span>
<span class="highlight-line">compile<span class="token punctuation">.</span>description <span class="token operator">=</span> <span class="token string">'compile all sources'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token comment">// Not exposed to CLI</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">startServer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// START SERVER }</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> serve <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>compile<span class="token punctuation">,</span> startServer<span class="token punctuation">)</span></span>
<span class="highlight-line">serve<span class="token punctuation">.</span>description <span class="token operator">=</span> <span class="token string">'serve compiled source on local server at port 3000'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> watch <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>watchMarkup<span class="token punctuation">,</span> watchScript<span class="token punctuation">,</span> watchStyle<span class="token punctuation">)</span></span>
<span class="highlight-line">watch<span class="token punctuation">.</span>description <span class="token operator">=</span> <span class="token string">'watch for changes to all source'</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">const</span> defaultTasks <span class="token operator">=</span> gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span>serve<span class="token punctuation">,</span> watch<span class="token punctuation">)</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">export</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  compile<span class="token punctuation">,</span></span>
<span class="highlight-line">  compileMarkup<span class="token punctuation">,</span></span>
<span class="highlight-line">  compileScript<span class="token punctuation">,</span></span>
<span class="highlight-line">  compileStyle<span class="token punctuation">,</span></span>
<span class="highlight-line">  serve<span class="token punctuation">,</span></span>
<span class="highlight-line">  watch<span class="token punctuation">,</span></span>
<span class="highlight-line">  watchMarkup<span class="token punctuation">,</span></span>
<span class="highlight-line">  watchScript<span class="token punctuation">,</span></span>
<span class="highlight-line">  watchStyle<span class="token punctuation">,</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">default</span> defaultTasks</span></code></pre>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>How To: Update All NPM Packages in Your Project at Once</title>
    <link href="https://jhey.dev/writing/how-to-update-all-npm-packages-in-your-project-at-once/"/>
    <updated>2016-01-30T03:00:18+00:00</updated>
    <id>https://jhey.dev/writing/how-to-update-all-npm-packages-in-your-project-at-once/</id>
    <content type="html"><![CDATA[
      <p>Is there a quick and easy out-of-the-box way to update all the npm packages in your project? Yes. Does it quite work as you expect? Not always.</p>
<p>For those in camp <strong>TL;DR;</strong> write and execute a node script(<em>source below</em>) to rewrite all the versions listed in <code>package.json</code>.</p>
<h2>How can I check to see which packages are out of date?</h2>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line"><span class="token function">npm</span> outdated</span></code></pre>
<p>The <code>outdated</code> command will list any packages that are not up to date 👍</p>
<h2>Is there not an npm command to upgrade these?</h2>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line"><span class="token function">npm</span> update --save/--save-dev</span></code></pre>
<p><em>Yes</em>. That is it. It will only update packages so far though. The <code>update</code> function respects <code>semver</code>. For example, if I have a package which is at version <code>1.3.5</code>, but the latest version is <code>3.0.5</code>, the package would only <em>update to the latest <code>minor</code> version</em>. In our example, <code>1.9.9</code> may be the highest version prior to <code>2.0.0</code>.</p>
<p>There is good reason for this. <em>New major versions may introduce breaking changes that could break your project.</em> You want to avoid this scenario. The restricted power of <code>npm update</code> promotes manual updates. In turn, manual updates make it easier to spot the culprit if something should break 👀</p>
<h2>Sooo, why would I want to do this then?</h2>
<p>It’s a valid question.</p>
<p>Ever have a project that you didn’t touch for some time? And when you returned to it, the package dependencies were very out of date?</p>
<p>It may be risky, but, sometimes you want a quick solution to update all dependencies. <em>A solution that updates every dependency to its latest version so you can see what happens.</em></p>
<p>Something like the following would be ideal;</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line"><span class="token function">npm</span> update --save/--save-dev -f</span></code></pre>
<p>This would be intuitive. You’d assume this would force packages to update to their latest version.</p>
<h2>How do we do it then?</h2>
<p>A solution could be to use <code>npm run scripts</code>. We can define a script, let’s call it <code>update:packages</code>. This script executes a node script that wipes all defined versions in our <code>package.json</code> file. It then removes our installed node modules. Finally, it updates them all saving the new versions to <code>package.json</code>.</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line">“scripts”<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  “update<span class="token operator">:</span>packages”<span class="token operator">:</span> “node wipe-dependencies.js &amp;&amp;</span>
<span class="highlight-line">                      rm -rf node_modules &amp;&amp; npm update --save-dev</span>
<span class="highlight-line">                      &amp;&amp; npm update --save”</span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span></code></pre>
<p>To run this on the command line;</p>
<pre class="language-shell"><code class="language-shell"><span class="highlight-line"><span class="token function">npm</span> run update:packages</span></code></pre>
<p>Once updated, you can then revert to using the <code>npm update</code>command as you are now up to date.</p>
<h2>That node script? wipe-dependencies.js?</h2>
<p>Small 😎 Using <code>fs</code>, read our <code>package.json</code> file, modify the content and write them back to the file.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">wipeDependencies</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> file  <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'package.json'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> devDep <span class="token keyword">in</span> content<span class="token punctuation">.</span>devDependencies<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    content<span class="token punctuation">.</span>devDependencies<span class="token punctuation">[</span>devDep<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> dep <span class="token keyword">in</span> content<span class="token punctuation">.</span>dependencies<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    content<span class="token punctuation">.</span>dependencies<span class="token punctuation">[</span>dep<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'package.json'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">.</span>main <span class="token operator">===</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">wipeDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> wipeDependencies</span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Wipe the version numbers replacing them with an asterisk.</p>
<p>This version covers both <code>devDependencies</code> and <code>dependencies</code>. You could modify the script to only update <code>devDependencies</code>. This could be less risky for the actual output of your project to start with.</p>
<h2>BONUS: Only update packages in the npm registry</h2>
<p><a href="https://medium.com/u/8f9a4ea788a9?source=post_page-----17a8981860ea--------------------------------">Vidur</a> raised a great point in one of the responses about packages that are not part of the <code>npm</code> registry. This is a great spot! We will likely want to avoid those.</p>
<p>When first tackling this problem, I was more concerned catching packages that we don’t want to update. For example, ignore <code>git</code> endpoints by implementing a check before asterisking the version.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">wipeDependencies</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> file  <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'package.json'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> devDep <span class="token keyword">in</span> content<span class="token punctuation">.</span>devDependencies<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>content<span class="token punctuation">.</span>devDependencies<span class="token punctuation">[</span>devDep<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>git<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      content<span class="token punctuation">.</span>devDependencies<span class="token punctuation">[</span>devDep<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> dep <span class="token keyword">in</span> content<span class="token punctuation">.</span>dependencies<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>content<span class="token punctuation">.</span>dependencies<span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>git<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      content<span class="token punctuation">.</span>dependencies<span class="token punctuation">[</span>dep<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'package.json'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">.</span>main <span class="token operator">===</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">wipeDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> wipeDependencies</span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That’s OK. But, it’s not great 👎 It only checks for git endpoints. If there are other patterns we wish to add in future, they must be more checks implemented.</p>
<p>One thing we do know, any package in the <code>npm</code> registry will adhere to <code>SemVer</code>. Its version number will in most cases only contain numbers and symbols such as <code>15.0.0</code> or <code>3.21.2</code> preceded by some symbols. There are also cases where the version may contain prerelease strings such as <code>alpha</code> or <code>beta</code>.</p>
<p>Flip our thinking on its head. Instead of excluding versions that contain patterns, include those that adhere to <code>SemVer</code>. Create a registered expression and use it against the version. Do this to determine whether a version requires updating. This means that versions will only get updated if they match <code>SemVer</code> 🎉</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">wipeDependencies</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> file  <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'package.json'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> devDep <span class="token keyword">in</span> content<span class="token punctuation">.</span>devDependencies<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>devDependencies<span class="token punctuation">[</span>devDep<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\W+\d+.\d+.\d+-?((alpha|beta|rc)?.\d+)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      content<span class="token punctuation">.</span>devDependencies<span class="token punctuation">[</span>devDep<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> dep <span class="token keyword">in</span> content<span class="token punctuation">.</span>dependencies<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>dependencies<span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\W+\d+.\d+.\d+-?((alpha|beta|rc)?.\d+)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      content<span class="token punctuation">.</span>dependencies<span class="token punctuation">[</span>dep<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'package.json'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">.</span>main <span class="token operator">===</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token function">wipeDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> wipeDependencies</span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>That’s it!</h2>
<p>A quick and easy, albeit risky way to update all <code>npm</code> packages in your project at once.</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Guide to BEM</title>
    <link href="https://jhey.dev/writing/guide-to-bem/"/>
    <updated>2016-01-26T18:37:54+00:00</updated>
    <id>https://jhey.dev/writing/guide-to-bem/</id>
    <content type="html"><![CDATA[
      <p>I use BEM where I can and when it’s appropriate. That last piece is important. BEM is <strong>not</strong> appropriate in <strong>every</strong> scenario. I’m not preaching that everyone should go out and BEM, SMACSS etc. all their code. Classname standards are important though and and deserve time and consideration. Good classnames are going to make things a lot easier for developers new to a code base.</p>
<h2>What is BEM?</h2>
<pre class="language-css"><code class="language-css"><span class="token selector">.btn</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token selector">//block
<span class="highlight-line">.btn__txt</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token selector">//block element</span>
<span class="highlight-line">.btn--lg</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token selector">//block modifier</span>
.btn__txt--red</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> //block element with modifier</code></pre>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn--lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn__txt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span></code></pre>
<p><strong>BEM</strong> stands for <em>block, element, modifier</em>. What are these three components?</p>
<ul>
<li><strong>block</strong> — Represents a high level component that may comprise of many smaller elements. Rendered in isolation or with others.</li>
<li><strong>element</strong> —Aan element is a building block of a block denoted by two underscores. It has a dependency on it’s block. In some cases a mutual dependency if an element provides important context for a block.</li>
<li><strong>modifier</strong> —Express different aesthetic effects and states of elements and blocks. Denoted by two hyphens.</li>
</ul>
<p>An analogy? A sports team(please suggest better).</p>
<p>The team is the block.</p>
<ul>
<li>A player is an element.</li>
<li>A players’ position could be the modifier.</li>
</ul>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.team</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.team__player</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.team__player--forward</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.team__player--defender</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span></code></pre>
<hr>
<p>BEM aids with readability for not only your CSS, but your markup too. If I was new to a repo and saw the following;</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn--lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn__txt btn__txt--red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>push me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span></code></pre>
<p>We might assume from reading the markup that I have a large variation of a button with red text saying “push me!&quot;.</p>
<p>It’s likely there are variations for small and other text colors. If not, it is clear how we would go about introducing them. The element hierarchy/dependency of a block is intuitive.</p>
<p>The features of BEM promote flat specificity. They allow us to tackle complex specificity, in some cases eradicating it altogether.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.btn .txt</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token selector">=> .btn__txt</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span></code></pre>
<p>There may be scenarios where you can’t quite BEM it. You’re unable to escape levelled specificity or something doesn’t quite sit right. Don’t give up at the first attempt. The power of BEM is that it makes you consider your markup and CSS. One blocks rule should not interfere with nor override another. It may be that you need to introduce a new element to your block or think about adding a modifier to a sub-block. In my honest opinion, try your best to avoid sub-elements.</p>
<p>BEM can get quite opinionated when not so simple use cases arise. That’s one of the pitfalls with BEM. There is no strict right or wrong. Knowing when it’s necessary and how to use it is BEMs trickiest aspect.</p>
<p>At the very least, attempting to use BEM or any classing standard for that matter is a step in the right direction. It can improve your code leaps and bounds if you’ve got into a bit of a state with your CSS and markup.</p>
<p>For a high level intro, that’s pretty much all you need to know to get started with BEM.</p>
<hr>
<h2>Working observations</h2>
<p>It’s when you start working with BEM and tackling real projects that questions regarding BEM usage arise.</p>
<h3>Many modifiers, much ugliness</h3>
<p>What if you have several modifiers for a block or element? You don’t want to end up with several large bloated classnames. If the modifiers are small then do you need to write a big extra class for them? How about the following modifiers?</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.btn.small</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.btn.medium</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.btn.large</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span></code></pre>
<p>Is this right or is this wrong? It’s only a little modifier and we save having to write long classes in our markup.</p>
<p>We should not be doing this. The classes “small&quot;, “medium&quot;, and “large&quot; offer no context. They could get altered or have side effects if we say wrote CSS for those classes elsewhere.</p>
<p>Say we had the following CSS;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.small</span> <span class="token punctuation">{</span> <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span></span></code></pre>
<p>Now our small layout panels become red and we don’t want that. Our class isn’t specific enough in our markup, we now have red panels 😢</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.btn.small</span> <span class="token punctuation">{</span> <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">}</span></span></code></pre>
<p>We could add a specific <code>background-color</code> declaration to our nested classes but now it’s getting messy 😕</p>
<p>This is why taking time to determine our elements and modifiers is important. ⏲</p>
<p>Consider this;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.btn--small</span> <span class="token punctuation">{</span> <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span> <span class="token punctuation">}</span></span></code></pre>
<p>This means instead of our previous markup which could be;</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn small<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span></code></pre>
<p>We now have;</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”btn</span> <span class="token attr-name">btn--small”</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>This is nice with small convenient examples like “<strong>.btn</strong>&quot;. This get’s a little bloated when we have larger block names 😅</p>
<p>Consider;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line">&lt;div class=<span class="token string">"super-block small red"</span>>&lt;/div></span>
<span class="highlight-line"><span class="token comment">/* BEMifying to */</span></span>
<span class="highlight-line">&lt;div class=<span class="token string">"super-block super-block--small super-block--red"</span>>&lt;/div></span></code></pre>
<p>We are only using two modifiers and our classes are becoming larger. They don’t have to though. We can change them by defining appropriate abbreviations. How about the following?</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”sb</span> <span class="token attr-name">sb--sm</span> <span class="token attr-name">sb--red”</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>That now has a smaller footprint than our original markup! And still retains meaning if we understand the abbreviations 👍</p>
<h3>Preprocessors and &amp;</h3>
<p>I write very little <code>CSS</code> without using a preprocessor. Personally, I’m a fan of <code>Stylus</code>. When using <code>BEM</code>, preprocessors can be pretty useful 💪</p>
<p>We would not want the following code to be compiled. This goes against <code>BEM</code> and causes unnecessary bloat.</p>
<pre class="language-stylus"><code class="language-stylus"><span class="highlight-line"><span class="token selector">.btn <span class="token punctuation">{</span></span></span>
<span class="highlight-line">  <span class="token selector">.btn__txt <span class="token punctuation">{</span></span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This code, would actually go against our BEM ideals producing</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.btn .btn__txt</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span></code></pre>
<p>Luckily, the ampersand operator comes to the rescue!</p>
<pre class="language-stylus"><code class="language-stylus"><span class="highlight-line"><span class="token selector">.btn <span class="token punctuation">{</span></span></span>
<span class="highlight-line">  <span class="token selector">&amp;__txt <span class="token punctuation">{</span></span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>If you are writing vanilla CSS, or non-nested [<em>insert flavor of choice</em>] syntax, you’re unlikely to fall into this trap whilst trying to keep your specificity as flat as possible.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token comment">/* VANILLA CSS */</span></span>
<span class="highlight-line"><span class="token selector">.btn</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.btn--red</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.btn__txt</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token comment">/* NESTED */</span></span>
<span class="highlight-line"><span class="token selector">.btn</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">&amp;--red</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">&amp;__txt</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3>BEM Preprocessor Mixins? 🤓</h3>
<p>Most preprocessors have some form of mixin functionality. Leveraging this can really help with visually understanding any <code>BEM</code> in your code. Consider the following <code>Stylus</code> code;</p>
<pre class="language-stylus"><code class="language-stylus"><span class="highlight-line"><span class="token comment">// RED MODIFIER BLOCK</span></span>
<span class="token variable-declaration"><span class="token variable">red</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="highlight-line">  color<span class="token punctuation">:</span> <span class="token color">red</span><span class="token punctuation">;</span></span>
<span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token comment">// TXT ELEMENT BLOCK</span></span>
<span class="token variable-declaration"><span class="token variable">txt</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="highlight-line">  font-size<span class="token punctuation">:</span> <span class="token number">10</span><span class="token unit">px</span><span class="token punctuation">;</span></span>
<span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token comment">// ELEMENT MIXIN</span></span>
<span class="highlight-line"><span class="token func"><span class="token function">el</span><span class="token punctuation">(</span>elName<span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token func"><span class="token function">define</span><span class="token punctuation">(</span>‘content’<span class="token punctuation">,</span> <span class="token func"><span class="token function">lookup</span><span class="token punctuation">(</span>elName<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">  <span class="token selector">&amp;__<span class="token interpolation variable"><span class="token delimiter punctuation">{</span>elName<span class="token delimiter punctuation">}</span></span></span></span>
<span class="highlight-line">    <span class="token interpolation variable"><span class="token delimiter punctuation">{</span>content<span class="token delimiter punctuation">}</span></span></span>
<span class="highlight-line">    <span class="token interpolation variable"><span class="token delimiter punctuation">{</span>block<span class="token delimiter punctuation">}</span></span></span>
<span class="highlight-line"><span class="token comment">// MODIFIER MIXIN</span></span>
<span class="highlight-line"><span class="token func"><span class="token function">mod</span><span class="token punctuation">(</span>modName<span class="token punctuation">)</span></span></span>
<span class="highlight-line">  <span class="token func"><span class="token function">define</span><span class="token punctuation">(</span>‘content’<span class="token punctuation">,</span> <span class="token func"><span class="token function">lookup</span><span class="token punctuation">(</span>modName<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></span>
<span class="highlight-line">  <span class="token selector">&amp;--<span class="token interpolation variable"><span class="token delimiter punctuation">{</span>modName<span class="token delimiter punctuation">}</span></span></span></span>
<span class="highlight-line">    <span class="token interpolation variable"><span class="token delimiter punctuation">{</span>content<span class="token delimiter punctuation">}</span></span></span>
<span class="highlight-line">    <span class="token interpolation variable"><span class="token delimiter punctuation">{</span>block<span class="token delimiter punctuation">}</span></span></span>
<span class="highlight-line"><span class="token selector">/**</span></span>
<span class="highlight-line"> * OUR ACTUAL CODE</span>
<span class="token selector">*/
.btn <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property-declaration"><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token unit">px</span><span class="token punctuation">;</span></span></span>
<span class="highlight-line">  <span class="token func"><span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="highlight-line">  <span class="token func"><span class="token function">mod</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="highlight-line">  +<span class="token func"><span class="token function">mod</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// BLOCK MIXIN</span></span></span>
<span class="highlight-line">    <span class="token property-declaration"><span class="token property">color</span><span class="token punctuation">:</span> <span class="token color">green</span><span class="token punctuation">;</span></span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This would output;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.btn</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.btn__txt</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.btn--red</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">color</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.btn--green</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">color</span><span class="token punctuation">:</span> #008000<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Not everyone will be using Stylus. But the same concept can work with the preprocessor of your choice. That is of course, feature . It’s an interesting approach.</p>
<h3>Nested elements</h3>
<p>How do I tackle nested elements?</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv__item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv__item__link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>LINK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span></span></code></pre>
<p>Not quite.</p>
<p>You’re looking to avoid scenarios like this ideally. In this case, items and links should both be their own elements.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv__item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv__link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>LINK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span></span></code></pre>
<p>If you needed to be specific about a link within an item. You may look to introduce a modifier to tackle this.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv__item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv__link nv__link--header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>LINK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span></span></code></pre>
<p>You may decide that a link is not even an element of nav and you want to just introduce modifiers for links within the nav.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nv__item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link--nv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>LINK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span></span></code></pre>
<p>That’s one of those fun/tricky parts of <code>BEM</code>, emphasising there is no 100% right or wrong way when working with <code>BEM</code>. It’s a convention to help you out!</p>
<h2>That’s it!</h2>
<p>A quick look at BEM. Might not be appropriate in every scenario but can aid in making your source user friendly.</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>How To: Pure CSS Masonry Layouts</title>
    <link href="https://jhey.dev/writing/how-to-pure-css-masonry-layout/"/>
    <updated>2016-01-21T02:47:07+00:00</updated>
    <id>https://jhey.dev/writing/how-to-pure-css-masonry-layout/</id>
    <content type="html"><![CDATA[
      <p>One popular content layout style is “masonry”. Not familiar with it? Think Pinterest, Windows’ Metro etc. To describe it in words, an almost crazy paving effect whereby variable sized blocks <em>of</em> content are pieced together in an aesthetically pleasing style, often <em>staggered</em>.</p>
<p><img src="https://miro.medium.com/max/1244/1*TfCvIdT79TwK8zcCeG-qSQ.png" alt="Multicolor masonry effect"></p>
<p>Masonry style layouts aren’t something new. So why look at them now? There are some great solutions out there for getting the masonry effect already aren’t there? This is true. <em>However, can we push a pure CSS solution a little further? Could we leverage Flexbox to achieve a more desired effect and push the capabilities a little further?</em></p>
<p>For those in camp <em><strong>TL;DR</strong></em> feel free to check out some code I’ve pieced together <a href="https://github.com/jh3y/driveway">here</a>(github), the code for this post <a href="https://jsbin.com/loronibali/2/edit?html,output">here</a> or the more polished version <a href="http://codepen.io/jh3y/pen/mPgyqw">here</a>. Alternatively, here’s a demo of the end result 😇</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="mPgyqw"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/mPgyqw">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p><strong>NOTE:</strong> If you need your content to go from left to right in a date ordered style, pure CSS masonry might not be the right solution for you. I have put <em>together a post though on creating that style of masonry layout with some JavaScript help <a href="/writing/how-to-true-masonry-layout">here</a></em> 😊</p>
<h2>The basic effect</h2>
<p>Let’s start with a basic layout. Imagine the DOM structure for our layout to be something similar to the following;</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-layout__panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-layout__panel-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">CONTENT</span> <span class="token attr-name">HERE</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-layout__panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-layout__panel-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">CONTENT</span> <span class="token attr-name">HERE</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-layout__panel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-layout__panel-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">CONTENT</span> <span class="token attr-name">HERE</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">FOLLOWING</span> <span class="token attr-name">CONTENT</span> <span class="token attr-name">PANELS</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>We are looking to add columns to our content. Based on our DOM structure, can we can achieve a pretty basic masonry effect withminimal effort using either CSS3 multi-column layouts or Flexbox?</p>
<h3>What are multi-column layout properties and Flexbox?</h3>
<p>Both introduced with CSS3, multi-column layout properties and Flexbox address ways in which to lay out content. Both have pretty apt names. Multi-column layout properties give you the power to lay out content in columns without too much heavy lifting. Flexbox provides exactly that, flexible boxes for your layout that can shrink, grow and flow how you desire. I won’t be going through them in detail in this <em>post</em> so I’d recommend familiarising yourself with them before reading any further.</p>
<h3>Using multi-column layout properties</h3>
<p>CSS3 introduced multi-column layouts with properties such as <em>column-count</em> and <em>column-gap.</em> This makes achieving <em>a basic masonry effect rather simple. Note that it is <strong>important</strong> to use the break-inside property on the content blocks of the layout. This ensures that content blocks don’t break and span across columns. The CSS for a starting point could</em> be;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.masonry-layout</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">column-count</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">column-gap</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout__panel</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout__panel-content</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>See it in action <a href="https://jsbin.com/rezufoxima/2/edit?css,output">here</a>. It’s a good start and shows that the multi-column layout properties can do a lot of th<em>e heavy lifting f</em>or us.</p>
<h3>Using Flexbox</h3>
<p>Could we achieve the same with Flexbox? It isn’t quite as loose and forgiving as using the multi-column layout properties. I found issues with the approaches I took trying to tackle the issue with Flexbox.</p>
<p>On first attempt I thought about mimicking the column layout by using “<em>flex-direction: column</em>”. <em>The issue with using “column” is that you need to define a height for the layout so that columns start wrapping</em>. But this isn’t ideal as any overflow becomes horizontally scrollable. Either that or you need to keep adjusting the height of the layout until everything wraps and fits nicely how you want it to. If you are working with dynamic content that may vary in amount and size over time, you may find yourself adjusting to accommodate each time you roll it out. This pretty much goes against the ideals of Flexbox in my opinion.</p>
<p>Consider the following code using Flexbox;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.masonry-layout</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout__panel</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">flex</span><span class="token punctuation">:</span> 1 1 auto<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 33.3%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>It will yield a result which can be seen <a href="https://jsbin.com/qacawerica/2/edit?html,css,output">here</a>. Notice that the content becomes horizontally scrollable <em>which</em> isn’t desired.</p>
<p>Anotherapproach is to use “<em>flex-direction: row</em>”. This doesn’t quite work either. You can set the amount of columns by restricting the width of items in the layout, but, wrapping either introduces white space or all items adjusting to be the same width depending on the property you define for “<em>align-items</em>”. Neither result is desirable. You can see the result of using “<em>flex-direction: row</em>” with “<em>align-items: flex-start</em>” <a href="https://jsbin.com/yofikeveba/2/edit?css,output">here</a>.</p>
<p>If you’re willing to be a bit more controlling with your markup and structure, you <strong>can</strong> achieve the desired effect with flexbox. Consider a structure like the following;</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-layout__column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-layout__panel>&lt;/div>
    &lt;div class=<span class="token punctuation">"</span></span><span class="token attr-name">masonry-layout__panel</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-layout__column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-layout__panel>&lt;/div>
    &lt;div class=<span class="token punctuation">"</span></span><span class="token attr-name">masonry-layout__panel</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>Adding columns to your layout, you are given some extra control over the layout. However, you will need to give some more thought to how and where you want specific parts of your content to sit. See this approach in action <a href="https://jsbin.com/zurapetono/1/edit?html,css,output">here</a>.</p>
<h3><em>Going with multi-column layout properties</em></h3>
<p>For achieving the basic masonry style layout, multi-column layout properties are a clear winner in my <em>opinion</em>. This is based on the simplicity and reduced markup. They get the job done. If you’re looking for the basic masonry effect, then something like this is all you’ll need. I can see the benefit of both approaches though for sure.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.masonry-layout</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">column-count</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">column-gap</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout__panel</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout__panel-content</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Looking at that code. Our panels should also be blocks themselves ideally. So we refactor to.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.masonry-layout</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">column-count</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">column-gap</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-panel</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-panel__content</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Our basic masonry effect still has potential. We could take it a little further. Maybe Flexbox will fit nicely elsewhere.</p>
<h2>Nested clusters of content</h2>
<p>Introducing nested clusters of content to our layout can break the content up a bit and disturb the flow a little which is our intention. It can be used to give the effect that content is spanning columns.</p>
<p>Nested clusters of contents are essentially nested layouts that will either flow vertically or horizontally. Flexbox is a great fit here.</p>
<p><img src="https://miro.medium.com/max/419/1*XaERXcb0ysiyMTNxva-j4Q.png" alt="Nested cluster"></p>
<p>A vertically flowing 2 column nested cluster</p>
<p><em>Our</em> base layout doesn’t fit perfectly into a quadrangle but our clusters <strong>must</strong>. This is because we don’t want patches of white space appearing in our masonry layout. We could define cluster size classes to combat this. Consider the following example sizes;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.masonry-layout-panel--small</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-panel--medium</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-panel--large</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>But, this doesn’t quite feel right. Set sizes aren’t going to play nice in every scenario. The better approach may be to introduce the column-like containers we discussed earlier. Consider something like the following;</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”masonry-layout-panel</span> <span class="token attr-name">masonry-layout-cluster</span> <span class="token attr-name">masonry-layout-cluster--vertical”</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”masonry-layout-cluster__segment</span> <span class="token attr-name">masonry-layout-cluster__segment--column”</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”masonry-layout-panel</span> <span class="token attr-name">masonry-layout-cluster__segment”</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”masonry-layout-panel__content”</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”masonry-layout-cluster__segment</span> <span class="token attr-name">masonry-layout-cluster__segment--column”</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”masonry-layout-panel</span> <span class="token attr-name">masonry-layout-cluster__segment”</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”masonry-layout-panel__content”</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>yes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”masonry-layout-panel</span> <span class="token attr-name">masonry-layout-cluster__segment”</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”masonry-layout-panel__content”</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">          Some cool pics.</span>
<span class="highlight-line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>Clusters can either flow horizontally or vertically. If a cluster flows horizontally, we define columns of segments that flow vertically and vice-versa. We alter the flow using “<em>flex-direction</em>”. Cluster segments grow/shrink to accommodate white space with clusters becoming blocks in themselves.</p>
<p>If we want some tighter control on the cluster segments, we can use utility classes to define percentage flex-basis for them. We don’t need a “full-size” utility class as we can just include one item in a container and it will span full width or height. For say “half-size” though we could define 50% flex-basis. The nice feature of this implementation is that any number of rows or columns should span accordingly to the content.</p>
<p>How might the code look? Consider the following;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.masonry-layout-cluster</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-cluster--vertical</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-cluster--horizontal</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-cluster__segment</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">flex</span><span class="token punctuation">:</span> 1 1 auto<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-cluster__segment--row</span> <span class="token punctuation">{</span></span>
<span class="highlight-line"> <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-cluster__segment--column</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-cluster__segment--half</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">flex-basis</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-cluster__segment--quarter</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">flex-basis</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>You can see the code in action <a href="https://jsbin.com/tuxoqusaxu/2/edit?css,output">here</a>. Nested clusters are the trickiest concept to explain, and with them out of the way, we can tackle some easier features!</p>
<h2>Theming &amp; image panels</h2>
<p>The aim is to keep our layout structure styling generic and isolated from theming styles. This promotes easier re-<em>use</em> in other projects. If you’ve checked out any of the code demos mentioned previously, you’ll notice that content panels have rounded borders etc. This can be achieved by adding some minimal theming.</p>
<p><img src="https://miro.medium.com/max/452/1*n2mjkAnx5NNAK7w-I1zJxw.png" alt="Image panel example"></p>
<p>A picture panel</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.masonry-layout-panel__content</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>How about images? It’s quite common that you may wish to display images as complete panels in your masonry layout. If we put an image within our panel content it would be affected by the padding we’ve defined for our theme previously. So why don’t we just give the “<em>masonry-layout__panel-content</em>” class to our image with a modifier?</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/photo.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masonry-layout-panel__content--img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span></code></pre>
<p>It’s nearly there but not quite. If we add a little theming specific to images we can get round this.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.masonry-layout-panel__content--img</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Check out how it’s starting to look <a href="https://jsbin.com/zamabonuhe/2/edit?html,css,output">here</a>. <em><strong>Note:</strong></em> Because the classnames are becoming rather bloated, from here on, abbreviations are being used in code examples. For example; “<em>masonry-layout”</em> becomes “<em>ml</em>”, “<em>masonry-layout-cluster</em>” becomes “<em>ml-clstr</em>” etc. Also, image placeholders display in yellow.</p>
<h2>Animating panels on hover</h2>
<p><img src="https://miro.medium.com/max/489/1*sDjPLMU-Q2I3KpWOiuO8Gw.png" alt="Panel mid transition"></p>
<p>How about making panels respond to interaction? We could make it so that panels flip and reveal extra content when we hover ove<em>r them. In order to do this we make our panel content a flip card. Adding a front and back content container we can define the front and back for a panel. This does requires that we have a set height for our panels so we can use</em> utility classes for defined heights. For example;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.masonry-layout-flip--medium</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We introduce a new block for flippers.</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”masonry-layout-panel</span> <span class="token attr-name">masonry-layout-flip--medium</span> <span class="token attr-name">masonry-layout-flip”</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”masonry-layout-panel__content</span> <span class="token attr-name">masonry-layout-flip__content”</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”img/photo-1.jpg”</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”masonry-layout-flip__panel</span> <span class="token attr-name">masonry-layout-flip__panel--front</span> <span class="token attr-name">masonry-layout-flip__panel--img”</span><span class="token punctuation">/></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”masonry-layout-flip__panel</span> <span class="token attr-name">masonry-layout-flip__panel--back”</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Here is a flpped image…<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>
<span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span></code></pre>
<p>Using CSS3 transforms and transitions we can apply a hover animation so that our panel flips and shows a reverse side to it.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.masonry-layout-flip</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">perspective</span><span class="token punctuation">:</span> 1000<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-flip:hover .masonry-layout-flip__content</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-flip--md</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-flip__panel</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-flip__panel--front</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">z-index</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-flip__panel--back</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.masonry-layout-flip__content</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">overflow</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transition</span><span class="token punctuation">:</span> 0.25s<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The layout is taking shape, see the animated panel in action <a href="https://jsbin.com/vixaxofato/3/edit?html,css,output">here</a>.</p>
<p><img src="https://miro.medium.com/max/505/1*8Y__HtUYHClzv9jTMvxLAQ.png" alt="Panel with focus effect"></p>
<p>We aren’t just limited to flip panels. We could add various effects and features to panels such as focus effects. I’ll include some bonus features in the final bonus code.</p>
<h2>Going responsive</h2>
<p>If you’ve got this far, you’ll notice that our masonry layout isn’t looking great on smaller viewports. Let’s make it responsive. How do we want it to respond? As our viewport increases in size, we want to increase the amount of columns in our layout. As our viewport decreases in size, in addition the amount of columns decreasing, we might want our nested clusters to collapse and allow the segments to take up full width of the layout. We will also be looking to develop our layout styles mobile first. Consider the following for responsive column count;</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.masonry-layout</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">column-count</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">column-gap</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.masonry-layout</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">column-count</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.masonry-layout</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">column-count</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>For nested clusters, we want to ignore things such as horizontal flow and flex-basis at lower viewports. <em>We want our clusters to collapse and segments take up full viewport width</em> regardless of whether they are columns, rows, etc.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.masonry-layout-cluster__segment--row</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.masonry-layout-cluster--vertical</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token comment">/* FLEX-BASIS IGNORED AT LOWER VIEWPORT */</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.masonry-layout-cluster__segment--half</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">.masonry-layout-cluster__segment--quarter</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>You can see a demo of the layout taking on a responsive feel <a href="https://jsbin.com/loronibali/2/edit?css,output">here</a>.</p>
<h2>Using a CSS preprocessor</h2>
<p>It goes without saying that developing the CSS is a lot easier if you make the use of a CSS preprocessor. I strongly recommend using one along with tools to aid in adding vendor prefixes. I personally use Stylus and the actual source for developing the styles wasn’t that large in comparison to the output.</p>
<p>Though, just for reference, here is the final CSS used for this post(<em>minus the vendor prefixes and color theming to save some space</em>).</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">.ml</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">column-count</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">column-gap</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml *</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.ml</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">column-count</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.ml</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">column-count</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-pnl</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.ml-pnl</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">break-inside</span><span class="token punctuation">:</span> avoid<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-pnl__cntnt</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-pnl__cntnt--img</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-flp</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">perspective</span><span class="token punctuation">:</span> 1000<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-flp:hover .ml-flp__cntnt</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-flp--sm</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-flp--md</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-flp--lg</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-flp__pnl</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-flp__pnl--frnt</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">z-index</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-flp__pnl--bck</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-flp__cntnt</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">overflow</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">transition</span><span class="token punctuation">:</span> 0.25s<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-clstr</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-clstr--vrt</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.ml-clstr--vrt</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-clstr--hrz</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-clstr__sgmnt</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">flex</span><span class="token punctuation">:</span> 1 1 auto<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-clstr__sgmnt--rw</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.ml-clstr__sgmnt--rw</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.ml-clstr__sgmnt--clmn</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token selector">.ml-clstr__sgmnt--hlf</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token selector">.ml-clstr__sgmnt--qrt</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>To conclude</h2>
<p><em>We’ve explored masonry layouts in pure CSS. I’m actually quite happy with the outcome.</em> Pure CSS masonry layouts can work. I wouldn’t say they are flawless though. I can see potential problem scenarios. For example; if you wanted to display a blog with the content in date order, this would be tricky. I think it would require some <em>extra</em> thought. One solution would be to use columns and then populate them accordingly in date order. The result would be the newest item being in column one, the second newest in column two and so on (<em>If you do really need your content in date order or from left to right, you might be best with a solution that introduces some JavaScript. I’ve put together a post for a possible solution <a href="https://medium.com/@_jh3y/how-to-the-masonry-layout-56f0fe0b19df">here</a>.</em>)</p>
<p>I am going to continue working on the code and see what else I can come up with <a href="https://github.com/jh3y/driveway">here</a>(github). Feel free to fork a version or experiment with the demo code <a href="https://jsbin.com/loronibali/2/edit?html,output">here</a> (<em><strong>Note:</strong> If you’ve got this far and check out the demo you’ll notice some extra features such as focus on hover</em>).</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="mPgyqw"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/mPgyqw">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>How To: Find Input Cursor Position with JavaScript</title>
    <link href="https://jhey.dev/writing/how-to-finding-input-cursor-position-with-javascript/"/>
    <updated>2015-10-08T04:36:09+01:00</updated>
    <id>https://jhey.dev/writing/how-to-finding-input-cursor-position-with-javascript/</id>
    <content type="html"><![CDATA[
      <p>A rather specific scenario here. But, how do you get the location of the cursor in a <code>textarea</code>? or an <code>input</code>? There is no straightforward method or property that can you can utilise. You can get selection indexes but these don’t give you the actual cursor location.</p>
<hr>
<p>For those in camp <strong>TL;DR;</strong> do some trickery 🐇 by cloning the input and getting the position of the appended <code>span</code>. Here’s a demo! 🎉</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="rpoxxL"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/rpoxxL">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>And here's a <a href="https://use-caret-position.netlify.app/">React Hook</a> for it!</p>
<h2>Why?</h2>
<p>Use cases where you need to show some custom UI at the exact location where the user is interacting. Popular examples include type aheads such as those for Github issues and Twitter hashtags. Or interactive tooltips likes those on the Medium WYSIWYG editor.</p>
<h2>How?</h2>
<p>The concept is actually pretty simple.</p>
<ol>
<li>Create a replica element of our <code>textarea</code>/<code>input</code> with near identical styling.</li>
<li>Generate a substring of the <code>textarea</code>/<code>input</code> text content up to the point of the caret.</li>
<li>Populate the replica element with that substring.</li>
<li>Append a <code>span</code> element that contains the rest of the content.</li>
<li>Append the replica element to the <code>DOM</code></li>
</ol>
<p>The position of the cursor is the position of the appended <code>span</code> 💡 Once we have the position of the <code>span</code>, we need to remove the replica element from the <code>DOM</code>. Note, the position of the span will be relative to the replica element. To get the absolute positioning on the page of the cursor we will also need to account for the location of the <code>input</code>/<code>textarea</code>. This is critical so that we don’t have to start wrapping our <code>input</code> elements and allows us to append our custom UI to the <code>document.body</code> 👍</p>
<p>This is the foundation for finding the cursor position. We can refer to it as the <strong>foundation cursor position</strong>. It does <strong>not</strong> consider potential scroll position, custom styling or our desired behavior.</p>
<p>Those calculations are best made to the obtained foundation cursor position.</p>
<p><img src="https://cdn-images-1.medium.com/max/600/1*Rr2T_9F-CjH5FAWlT2ckMA.png" alt="Highlighting some text and revealing a selection menu"></p>
<p>For example, you may want to show custom UI beneath the cursor or center aligned above the cursor. In both use cases, you will need the foundation cursor position before anything else. We will look at different implementations below.</p>
<h2>Code</h2>
<p>So how does that code look for obtaining the foundation cursor position? 🤓</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token comment">/**
<span class="highlight-line"> * returns x, y coordinates for absolute positioning of a span within a given text input</span>
<span class="highlight-line"> * at a given selection point</span>
<span class="highlight-line"> * @param {object} input - the input element to obtain coordinates for</span>
<span class="highlight-line"> * @param {number} selectionPoint - the selection point for the input</span>
 */</span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getCursorXY</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">input<span class="token punctuation">,</span> selectionPoint</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    offsetLeft<span class="token operator">:</span> inputX<span class="token punctuation">,</span></span>
<span class="highlight-line">    offsetTop<span class="token operator">:</span> inputY<span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span> <span class="token operator">=</span> input</span>
<span class="highlight-line">  <span class="token comment">// create a dummy element that will be a clone of our input</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// get the computed style of the input and clone it onto the dummy element</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> copyStyle <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">of</span> copyStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    div<span class="token punctuation">.</span>style<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> copyStyle<span class="token punctuation">[</span>prop<span class="token punctuation">]</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token comment">// we need a character that will replace whitespace when filling our dummy element if it's a single line &lt;input/></span></span>
<span class="highlight-line">  <span class="token keyword">const</span> swap <span class="token operator">=</span> <span class="token string">'.'</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> inputValue <span class="token operator">=</span> input<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">'INPUT'</span> <span class="token operator">?</span> input<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"> </span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> swap<span class="token punctuation">)</span> <span class="token operator">:</span> input<span class="token punctuation">.</span>value</span>
<span class="highlight-line">  <span class="token comment">// set the div content to that of the textarea up until selection</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> textContent <span class="token operator">=</span> inputValue<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> selectionPoint<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// set the text content of the dummy element div</span></span>
<span class="highlight-line">  div<span class="token punctuation">.</span>textContent <span class="token operator">=</span> textContent</span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">'TEXTAREA'</span><span class="token punctuation">)</span> div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'auto'</span></span>
<span class="highlight-line">  <span class="token comment">// if a single line input then the div needs to be single line and not break out like a text area</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">'INPUT'</span><span class="token punctuation">)</span> div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'auto'</span></span>
<span class="highlight-line">  <span class="token comment">// create a marker element to obtain caret position</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// give the span the textContent of remaining content so that the recreated dummy element is as close as possible</span></span>
<span class="highlight-line">  span<span class="token punctuation">.</span>textContent <span class="token operator">=</span> inputValue<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>selectionPoint<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'.'</span></span>
<span class="highlight-line">  <span class="token comment">// append the span marker to the div</span></span>
<span class="highlight-line">  div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// append the dummy element to the body</span></span>
<span class="highlight-line">  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// get the marker position, this is the caret position top and left relative to the input</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> offsetLeft<span class="token operator">:</span> spanX<span class="token punctuation">,</span> offsetTop<span class="token operator">:</span> spanY <span class="token punctuation">}</span> <span class="token operator">=</span> span</span>
<span class="highlight-line">  <span class="token comment">// lastly, remove that dummy element</span></span>
<span class="highlight-line">  <span class="token comment">// NOTE:: can comment this out for debugging purposes if you want to see where that span is rendered</span></span>
<span class="highlight-line">  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// return an object with the x and y of the caret. account for input positioning so that you don't need to wrap the input</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    x<span class="token operator">:</span> inputX <span class="token operator">+</span> spanX<span class="token punctuation">,</span></span>
<span class="highlight-line">    y<span class="token operator">:</span> inputY <span class="token operator">+</span> spanY<span class="token punctuation">,</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Pretty much like that 😉</p>
<p>So what’s happening there?</p>
<p>We’ve gone over the basic concept in “How?” but let’s walk through what’s happening;</p>
<ol>
<li>Pass the <code>input</code>/<code>textarea</code> along with the selection index as params to our <code>getCursorXY</code> method</li>
<li>Create a replica <code>div</code> and copy the styling of our <code>input</code> by looping over the returned <code>Object</code> from <code>getComputedStyle</code></li>
<li>Fill that replica <code>div</code> with a substring of text content up until the selection index</li>
<li>Create a <code>span</code> element and give it the text content of the remaining text content not included in the substring</li>
<li>Append that <code>span</code> to the replica <code>div</code></li>
<li>Append that replica <code>div</code> to the <code>DOM</code></li>
<li>Obtain the location of the cursor 🎉</li>
<li>Remove the replica element from the <code>DOM</code></li>
<li>Return the text cursor position accounting for the <code>input</code> position on the page 👍</li>
</ol>
<h2>Real scenarios</h2>
<p>Cool, but how can we use this in real scenarios and how does the <code>HTML</code> work, can I just use this on an a plain <code>input</code>/<code>textarea</code>? 🤔</p>
<p>Yes! You can. Using the <code>getCursorXY</code> method against your <code>input</code> will give you the correct cursor location. It is then up to you what you do with the location.</p>
<h3>Showing the cursor position on input and click</h3>
<p>Let’s walk through one of the demo scenarios.</p>
<p>The desired behavior is that whenever we type or click, there will be an indicator showing the cursor.</p>
<p>So, on input and click we need to append a marker element to the document body if there isn’t one. We also need to calculate the correct position for that marker on every input or click. As a bonus, if we click off of the input, we want the marker to disappear.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token comment">/**
<span class="highlight-line"> * shows a position marker that highlights where the cursor is</span>
<span class="highlight-line"> * @param {object} e - the input or click event that has been fired</span>
 */</span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">showPositionMarker</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token comment">// grab the input element</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> currentTarget<span class="token operator">:</span> input <span class="token punctuation">}</span> <span class="token operator">=</span> e</span>
<span class="highlight-line">  <span class="token comment">// create a function that will handle clicking off of the input and hide the marker</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token function-variable function">processClick</span> <span class="token operator">=</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!==</span> evt <span class="token operator">&amp;&amp;</span> evt<span class="token punctuation">.</span>target <span class="token operator">!==</span> e<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token function">toggleMarker</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token comment">// create a function that will toggle the showing of the marker</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token function-variable function">toggleMarker</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    input<span class="token punctuation">.</span>__IS_SHOWING_MARKER <span class="token operator">=</span> <span class="token operator">!</span>input<span class="token punctuation">.</span>__IS_SHOWING_MARKER</span>
<span class="highlight-line"></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>__IS_SHOWING_MARKER <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>input<span class="token punctuation">.</span>__MARKER<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token comment">// assign a created marker to input</span></span>
<span class="highlight-line">      input<span class="token punctuation">.</span>__MARKER <span class="token operator">=</span> <span class="token function">createMarker</span><span class="token punctuation">(</span><span class="token string">'Here I am! 😜'</span><span class="token punctuation">,</span> <span class="token string">'position'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">      <span class="token comment">// append it to the body</span></span>
<span class="highlight-line">      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>__MARKER<span class="token punctuation">)</span></span>
<span class="highlight-line">      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> processClick<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>__MARKER<span class="token punctuation">)</span></span>
<span class="highlight-line">      document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> processClick<span class="token punctuation">)</span></span>
<span class="highlight-line">      input<span class="token punctuation">.</span>__MARKER <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token comment">// if the marker isn't showing, show it</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>input<span class="token punctuation">.</span>__IS_SHOWING_MARKER<span class="token punctuation">)</span> <span class="token function">toggleMarker</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token comment">// if the marker is showing, update its position</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>__IS_SHOWING_MARKER<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token comment">// grab the properties from the input that we are interested in</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      offsetLeft<span class="token punctuation">,</span></span>
<span class="highlight-line">      offsetTop<span class="token punctuation">,</span></span>
<span class="highlight-line">      offsetHeight<span class="token punctuation">,</span></span>
<span class="highlight-line">      offsetWidth<span class="token punctuation">,</span></span>
<span class="highlight-line">      scrollLeft<span class="token punctuation">,</span></span>
<span class="highlight-line">      scrollTop<span class="token punctuation">,</span></span>
<span class="highlight-line">      selectionEnd<span class="token punctuation">,</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span> <span class="token operator">=</span> input</span>
<span class="highlight-line">    <span class="token comment">// get style property values that we are interested in</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> lineHeight<span class="token punctuation">,</span> paddingRight <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token comment">// get the cursor X and Y from our helper function</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getCursorXY</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> selectionEnd<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token comment">// set the marker positioning</span></span>
<span class="highlight-line">    <span class="token comment">// for the left positioning we ensure that the maximum left position is the width of the input minus the right padding using Math.min</span></span>
<span class="highlight-line">    <span class="token comment">// we also account for current scroll position of the input</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> newLeft <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span></span>
<span class="highlight-line">      x <span class="token operator">-</span> scrollLeft<span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">(</span>offsetLeft <span class="token operator">+</span> offsetWidth<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>paddingRight<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token comment">// for the top positioning we ensure that the maximum top position is the height of the input minus line height</span></span>
<span class="highlight-line">    <span class="token comment">// we also account for current scroll position of the input</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> newTop <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span></span>
<span class="highlight-line">      y <span class="token operator">-</span> scrollTop<span class="token punctuation">,</span></span>
<span class="highlight-line">      <span class="token punctuation">(</span>offsetTop <span class="token operator">+</span> offsetHeight<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>lineHeight<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">)</span></span>
<span class="highlight-line">    input<span class="token punctuation">.</span>__MARKER<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">left: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>newLeft<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px; top: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>newTop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This is a basic demo, it’s not polished 💍 by any means 😅</p>
<p>The important things to take notice of here is what we do with the returned cursor position for our <code>input</code>.</p>
<p>In this scenario, we get the foundation cursor position first. But then we account for any custom styling and any scrolling that may have happened. Using <code>Math.min</code> we can ensure that there is a limit on the markers position in certain directions. Consider the <code>left</code> position. We don’t want the marker to go any further left than the furthest right of the input minus any padding so we limit that. In the demo, I’ve applied a basic position to the marker and then offset the indicator using basic <code>CSS</code> transforms 🤓</p>
<p>As an added bonus, when we create the marker, we add an event listener to the <code>document.body</code> to listen for clicks. This is so that when we click off of the <code>input</code> the marker can be removed from the <code>DOM</code>.</p>
<hr>
<p>That is one basic scenario we can use our obtained cursor position in. See the demo for other possible use cases such as type aheads and selection highlighting.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*SGOYhF7lCjv3g2Q2TONHEg.png" alt="An example type ahead triggered by a special character"></p>
<h2>Wrapping up</h2>
<p>Not the most common article topic. But, an interesting problem with an interesting solution that I felt was worthy of sharing.</p>
<p>Be sure to check out the demo and code 🤓</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="rpoxxL"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/rpoxxL">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Hopefully this can help you out if you come across the same problem. There may indeed be better ways to solve this and if you find one I’d certainly like to see it 👍 😃</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Implementing Touch Gestures with JavaScript</title>
    <link href="https://jhey.dev/writing/implementing-touch-gestures-with-javascript/"/>
    <updated>2015-10-01T13:48:03+01:00</updated>
    <id>https://jhey.dev/writing/implementing-touch-gestures-with-javascript/</id>
    <content type="html"><![CDATA[
      <blockquote>
<p>Don’t be afraid to just get in there and write your own 🤓</p>
</blockquote>
<p>Touch support is becoming more and more likely to be required in your applications. Let’s take a look at why and then how you can combat this with some simple script 👊</p>
<h2>The Impact of Responsive Web Design</h2>
<p>Responsive web design is commonplace in the majority of projects these days. Developing web applications whilst considering an array of device sizes is the norm. In fact, many projects will prioritise mobile first.</p>
<p>Consider this scenario though. You’ve put the graft in and created a web app for your end client. It’s looking sweet across all your test devices. You’ve tapped about a bit and all seems good. You hand it over to the client…</p>
<blockquote>
<p><em>Oh 😞, It’s not working. When I swipe, I expected this to do this, nothing happens… and I can’t rotate this?!</em></p>
</blockquote>
<p>There can almost be a blurred definition of what going “responsive” entails. By definition, responsive design deals with the look and render of your site/app. But, a client or end user may be expecting an almost native experience for devices with touch support.</p>
<p>Native “look and feel” may be a little out of sight without reaching for something like React Native. But, with a little JavaScript you can add basic touch support to your web applications. All is not lost 😅</p>
<p>For those in camp <strong>TL;DR</strong>, here’s a demo!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="NYPoXB"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/NYPoXB">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<hr>
<h2>All About Events</h2>
<p>It’s of no surprise that we listen for certain events to put together basic touch support. Much like binding an event listener for mouse interaction, you bind an event listener for a touch.</p>
<p>For the most basic touch gestures such as a tap. The browser can deal with these without any changes; a tap is a click handled by the “click” event.</p>
<p>How about more complex gestures such as swiping and pinching? These make the concept of touch more complicated. The result is that we need more events to listen for and bind to.</p>
<ol>
<li>Start the touch — <code>touchstart</code></li>
<li>Listen for any movement during the touch to handle gestures — <code>touchmove</code></li>
<li>End the touch — <code>touchend</code></li>
<li>Abandon the touch — <code>touchcancel</code>/<code>touchleave</code></li>
</ol>
<h2>A Basic Start</h2>
<p>Let’s dive into a simple example 🏊</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body</span>
<span class="highlight-line">body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'green'</span><span class="token punctuation">)</span></span></code></pre>
<p>Here, we just change the <code>body</code> style when different <code>touch</code> events are fired 🎨</p>
<p>On touch start the <code>body</code> color will change to <code>red</code>, if we take our finger away, <code>body</code> color will change to <code>green</code>. If we start a touch, move our finger around, and then take it away, we would see <code>red</code>, then <code>blue</code>, then <code>green</code>.</p>
<p>You can see this happening in the demo.</p>
<h2>Going Further, Swipe</h2>
<p>One of the most requested touch gestures is horizontal swiping. This is usually required for carousel or galleries.</p>
<p>What are the logical steps for this gesture? 🚶</p>
<ol>
<li>The user starts by placing their finger on the screen — <code>touchstart</code></li>
<li>The user moves their finger across the screen — <code>touchmove</code></li>
<li>The user lifts their finger from the screen ending the swipe — <code>touchend</code></li>
</ol>
<p>We could actually detect swipe detection in a very basic way by not using <code>touchmove</code>. Using the information provided in the <code>touchend</code> event we can determine the gesture.</p>
<p>This leads onto the anatomy of the <code>TouchEvent</code>.</p>
<hr>
<p>A <code>TouchEvent</code> is much like any other event. But, we get extra information about how many touches there are and where. This information is critical to implementing touch gestures.</p>
<p>You can read more about the different properties of a <code>TouchEvent</code> <a href="https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent">here</a> 📖</p>
<hr>
<p>A Touch object gives you various information about a Touch such as its location on screen. See <a href="https://developer.mozilla.org/en-US/docs/Web/API/Touch">here</a> for more.</p>
<hr>
<p>For a basic horizontal swipe, we can make use of the <code>touchend</code>and <code>touchstart</code>events. We only need the start and end location of our touch to determine the gesture.</p>
<p>Consider the following implementation;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement</span>
<span class="highlight-line"><span class="token keyword">const</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body</span>
<span class="highlight-line"><span class="token keyword">const</span> header <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token keyword">const</span> swipeLimit <span class="token operator">=</span> <span class="token number">50</span></span>
<span class="highlight-line"></span>
<span class="highlight-line"><span class="token keyword">let</span> startX</span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">endTouch</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--bg'</span><span class="token punctuation">,</span> <span class="token string">'limegreen'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> finishingTouch <span class="token operator">=</span> e<span class="token punctuation">.</span>changedTouches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX</span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>startX <span class="token operator">&lt;</span> finishingTouch <span class="token operator">-</span> swipeLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    header<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'Swiped Right'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    header<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'Swiped Left'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--translate'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  body<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span> moveTouch<span class="token punctuation">)</span></span>
<span class="highlight-line">  body<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> endTouch<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">moveTouch</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--bg'</span><span class="token punctuation">,</span> <span class="token string">'dodgerblue'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> progressX <span class="token operator">=</span> startX <span class="token operator">-</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX</span>
<span class="highlight-line">  <span class="token keyword">const</span> translation <span class="token operator">=</span> progressX <span class="token operator">></span> <span class="token number">0</span></span>
<span class="highlight-line">    <span class="token operator">?</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>progressX<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>progressX<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--translate'</span><span class="token punctuation">,</span> translation<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">startTouch</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> touches <span class="token punctuation">}</span> <span class="token operator">=</span> e</span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>touches <span class="token operator">&amp;&amp;</span> touches<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> touch <span class="token operator">=</span> touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="highlight-line">    startX <span class="token operator">=</span> touch<span class="token punctuation">.</span>clientX</span>
<span class="highlight-line">    root<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--bg'</span><span class="token punctuation">,</span> <span class="token string">'#e74c3c'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span> moveTouch<span class="token punctuation">)</span></span>
<span class="highlight-line">    body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> endTouch<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span>
<span class="highlight-line">body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> startTouch<span class="token punctuation">)</span></span></code></pre>
<p>There is a fair bit to take in there but we can break it down.</p>
<p>All we are doing is adding event listeners to the <code>document.body</code>. As the <code>TouchEvent</code>s fire, we update some <code>CSS</code> variables and update some header content.</p>
<h3>Starting with touchstart</h3>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">startTouch</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> touches <span class="token punctuation">}</span> <span class="token operator">=</span> e</span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>touches <span class="token operator">&amp;&amp;</span> touches<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> touch <span class="token operator">=</span> touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="highlight-line">    startX <span class="token operator">=</span> touch<span class="token punctuation">.</span>clientX</span>
<span class="highlight-line">    root<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--bg'</span><span class="token punctuation">,</span> <span class="token string">'#e74c3c'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span> moveTouch<span class="token punctuation">)</span></span>
<span class="highlight-line">    body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> endTouch<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<ol>
<li>We check the amount of touches. We can assume a single finger swipe if <code>touches.length === 1</code>.</li>
<li>If we have the right amount of touches, we store the start position with <code>startX</code>. This is the value of <code>clientX</code> on the <code>Touch</code> event.</li>
<li>Bind to the <code>touchmove</code>and <code>touchend</code>events. We also update the <code>CSS</code> variable <code>--bg</code> to show a <code>touchstart</code>.</li>
</ol>
<h3>Moving with touchmove</h3>
<p>We aren’t using <code>touchmove</code> for anything important here. But we can give a little user feedback by updating some <code>CSS</code> variables for <code>translation</code> and <code>background-color</code>. This is certainly important when trying to provide a better experience for your users. For a swipe you might move the element as it’s being touched.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">moveTouch</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--bg'</span><span class="token punctuation">,</span> <span class="token string">'dodgerblue'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> progressX <span class="token operator">=</span> startX <span class="token operator">-</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX</span>
<span class="highlight-line">  <span class="token keyword">const</span> translation <span class="token operator">=</span> progressX <span class="token operator">></span> <span class="token number">0</span></span>
<span class="highlight-line">    <span class="token operator">?</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>progressX<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>progressX<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--translate'</span><span class="token punctuation">,</span> translation<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We calculate the correct distance to translate our element by referencing the starting and current location of the touch. We work out whether to apply it in a negative manner or positive based on swipe direction.</p>
<h3>Ending with touchend</h3>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">endTouch</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--bg'</span><span class="token punctuation">,</span> <span class="token string">'limegreen'</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token keyword">const</span> finishingTouch <span class="token operator">=</span> e<span class="token punctuation">.</span>changedTouches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX</span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>startX <span class="token operator">&lt;</span> finishingTouch <span class="token operator">-</span> swipeLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    header<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'Swiped Right'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    header<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'Swiped Left'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line">  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--translate'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  body<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span> moveTouch<span class="token punctuation">)</span></span>
<span class="highlight-line">  body<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> endTouch<span class="token punctuation">)</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<ol>
<li>There will only be one solo touch within the <code>changedTouches</code> array of our <code>TouchEvent</code>. We grab the last location of our <code>touch</code> using the <code>clientX</code>property of this solo <code>Touch</code>.</li>
<li>We can then use this value and compare it to the starting position of our touch in combination with a swipe limit. Why do we need a swipe limit? Without it, a user tapping the screen could trigger swipe logic. This is because their finger may have moved a mere pixel on the horizontal plane. For this implementation, we define a swipe limit of <code>50px</code>. Based on this comparison we can determine whether the user has swiped left or right 🎉</li>
<li>Carry out the action we want for swiping and then tidy up and remove event listeners from <code>document.body</code>.</li>
</ol>
<h2>The Rest is Down To You! (And Your Clients)</h2>
<p>We’ve taken a look at implementing basic touch support for a swipe gesture. No extra libraries or frameworks required 🎉 We could do a lot more with our solution but this is just an intro. Desired experience for your apps will likely differ from app to app.</p>
<p>On top of that we have only looked at one gesture. There are still gestures such as pinch and rotate to consider. These require the use of multi-touch detection and a little extra thinking. You can see a demo of pinch zooming below.</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="NYPoXB"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/NYPoXB">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="LdVYWz"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/LdVYWz">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Using Transition Events in JavaScript</title>
    <link href="https://jhey.dev/writing/using-transition-events-in-javascript/"/>
    <updated>2015-05-22T13:33:54+01:00</updated>
    <id>https://jhey.dev/writing/using-transition-events-in-javascript/</id>
    <content type="html"><![CDATA[
      <p><strong>TL;DR</strong> <em>I made a carousel type component using the <strong>transitionend</strong> event and vanilla JavaScript, here’s some notes about using the <strong>transitionend</strong> event and how I overcame a particular tricky behavior</em></p>
<p>CSS animations and transitions are becoming commonplace.</p>
<p>But, there are times when you need tighter control over transitioning elements or you need to be able to trigger some behaviour once something has finished sliding around the screen or spinning.</p>
<p>Enter the <strong><a href="https://developer.mozilla.org/en-US/docs/Web/Events/transitionend">transitionend</a></strong> event.</p>
<p><em><strong>Note::</strong> there is also an <strong>animationend</strong> event that will fire when an element has finished an animation using a keyframe. I believe this can be used in much the same way as <strong>transitionend</strong>.</em></p>
<h2>transitionend</h2>
<p>The <strong>transitionend</strong> event allows you to listen for the moment an element stops a transition.</p>
<p>There is not much more to it. Transition an element, listen for the transition to end, fire some logic.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'element'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'transitionend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Look I didz a transition!!!111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>If your browser supports it, you can use it. Check out the browser support <a href="https://developer.mozilla.org/en-US/docs/Web/Events/transitionend#Browser_compatibility">here</a>.</p>
<h2>What Could I Do With It?</h2>
<p>You might not even have any animation or transitions happening on your page so you certainly won’t need <strong>transitionend</strong>.</p>
<p>Even if you do have some, it’s not an event you’ll likely need or can force into your code. But, there can be scenarios where it might be handy.</p>
<p>A use case might be resetting the state of an element once it has transitioned.</p>
<p>For example; let’s say we have an element whose opacity is animated from 0.5 to 1 and this takes 1 second with the following CSS.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">el</span> <span class="token punctuation">{</span> <span class="token property">transition</span><span class="token punctuation">:</span> fadeIn 1s ease 0s<span class="token punctuation">;</span> <span class="token punctuation">}</span></span></code></pre>
<p>Once a transition has happened, we can use the <strong>transitionend</strong> event to fire some code.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'transitionend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'Seen me?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">0.5</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>This still isn’t ideal because we are relying on knowing the CSS declared opacity of the element within our JavaScript and this is a coupling that is undesired.</p>
<p>Instead we should define classes and then make use of <strong>transitionend</strong> to manage the appropriate classes.</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">el</span>            <span class="token punctuation">{</span></span>
<span class="highlight-line">                <span class="token property">transition</span><span class="token punctuation">:</span> opacity 0s ease 0s<span class="token punctuation">;</span></span>
<span class="highlight-line">                <span class="token property">opacity</span>   <span class="token punctuation">:</span> 0.5<span class="token punctuation">;</span></span>
<span class="highlight-line">              <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.is__shown</span>    <span class="token punctuation">{</span> <span class="token property">opacity</span>   <span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">.is__active</span>   <span class="token punctuation">{</span> <span class="token property">transition</span><span class="token punctuation">:</span> opacity 1s ease 0s<span class="token punctuation">;</span> <span class="token punctuation">}</span></span></code></pre>
<p>We add the classes to trigger the animation on say a user click</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">el<span class="token punctuation">.</span>className <span class="token operator">+=</span> <span class="token string">'is__extended is__active'</span><span class="token punctuation">;</span></span></code></pre>
<p>And once the transition has taken place, reset the element by removing these classes, essentially meaning that the element will revert to its previous base style.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'transitionend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token comment">// removing classes by just wiping the className</span></span>
<span class="highlight-line">  el<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>I’ve put together a simple demo which can be seen <a href="https://jsfiddle.net/6pmon5rh/6/">here</a>.</p>
<h2>Chaining Transitions</h2>
<p>One scenario that you could come across is wanting to chain transitions based on some internal state or behaviour.</p>
<p>If we think about this, essentially inside our <strong>transitionend</strong> callback we wish to trigger the code that initially made our transition fire.</p>
<p>For example;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'transitionend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  el<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span> el<span class="token punctuation">.</span>className <span class="token operator">+=</span> <span class="token string">' is__active is__moving'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>Logically, this looks correct and you’d think it might work but it will not.</p>
<p>I recently encountered this whilst creating a carousel like component where by I wanted to be able to transition to a particular slide of content based on a target id. This would entail chaining the transition until I got to my target. You can imagine the code to be somewhat similar as to above but I was checking to see if the current slide after a transition matched my target slide and if not keep going.</p>
<h3>How Do You Get Around This?</h3>
<p>It’s a basic solution;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'transitionend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  el<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="highlight-line">      el<span class="token punctuation">.</span>className <span class="token operator">+=</span> <span class="token string">' is__active is__moving'</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>That’s right, you wrap the trigger in a zero millisecond timeout and it will re-trigger the animation for you therefore enabling you to chain your transitions from JavaScript either infinitely or until a condition is met without having to use animation keyframes.</p>
<p>I’ve put both versions in the <a href="https://jsfiddle.net/6pmon5rh/6/">demo</a>.</p>
<p>Thinking about it, you could use animation keyframes but you’d want to intervene at the end of a keyframe animation loop exactly and I haven’t investigated just quite how possible this is.</p>
<h2>Beware When Using browsersync</h2>
<p>One thing I will point out and it may just be a problem that I encountered personally.</p>
<p>I was working on a project making use of <strong>transitionend</strong> using browser-sync and gulp.</p>
<p>I had a transition trigger on click, if I mashed the click the transitions would work as expected but then after they finished I would get some extra transitions in a sort of lag like effect.</p>
<p>I tried debouncing, throttling, adding guards to stop the callback firing…</p>
<h2>What was the problem?</h2>
<p>I had my project open in multiple tabs. Once I went back down to one tab, all was good and it worked fine. Multiple instances on the same page work fine too. So whether there is something strange happening with my setup or there is some quirk with browsersync, beware!</p>
<hr>
<p>The <strong>transitionend</strong> event provides a pretty cool way to manage your transitioning elements in JavaScript so be sure to check it out if it’s the right fit for you.</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Advanced Gulp</title>
    <link href="https://jhey.dev/writing/advanced-gulp/"/>
    <updated>2015-04-10T13:15:23+01:00</updated>
    <id>https://jhey.dev/writing/advanced-gulp/</id>
    <content type="html"><![CDATA[
      <p>Just over a year ago I wrote an article about adopting gulp as a new task runner. My opinion of gulp has not changed. I still find it to be the best for me. But, I have learnt more about it. The following are some tips and pointers for using gulp that should enable you to put together an awesome gulpfile.</p>
<hr>
<p><strong>TL;DR</strong> I used gulp for a year and put together a better <a href="https://github.com/jh3y/gulp-boilerplate">gulp boilerplate</a> using tips and tricks I’ve learnt. It can be seen <a href="https://github.com/jh3y/gulp-boilerplate">here</a>. It gets set up with a livereload static server and stylus, babel and pug compilation.</p>
<hr>
<h2>Task Dependencies</h2>
<p>A basic but sometimes overlooked or unknown feature is the ability to set dependencies on tasks. This is great for say a deployment task where we need to ensure that our sources are built before deploying them to a server.</p>
<p>Consider two tasks</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'build'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'javascript::build'</span><span class="token punctuation">,</span> <span class="token string">'css::build'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'deploy'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span>sources<span class="token punctuation">.</span>build<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>Instead of manually running these tasks in order we can explicitly state that our <strong>deploy</strong> task will always be dependant on the <strong>build</strong> task running.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'deploy'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'build'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span>sources<span class="token punctuation">.</span>build<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<h2>Config All the Things</h2>
<p>One of the things that drew me to using gulp was getting away from having to write and remember all the different configurations for different grunt plugins.</p>
<p>However, it is a good idea to extract commonly used arguments such as glob paths and plugin options from your gulp tasks and place them in an external config file to keep your gulpfile nice and readable.</p>
<p>For example, I found myself heading my gulpfiles with various path definition objects such as</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  paths<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    sources<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      coffee<span class="token operator">:</span> <span class="token string">'src/coffee/**/*.coffee'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      docs<span class="token operator">:</span> <span class="token string">'src/jade/*.jade'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      jade<span class="token operator">:</span> <span class="token string">'src/jade/**/*.jade'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      stylus<span class="token operator">:</span> <span class="token string">'src/stylus/**/*.stylus'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      overwatch<span class="token operator">:</span> <span class="token string">'out/**/*.{html,js,css}'</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    destinations<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      js<span class="token operator">:</span> <span class="token string">'out/js/'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      css<span class="token operator">:</span><span class="token string">'out/css/'</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span></code></pre>
<p>This isn’t nice and does nothing for readability so extract this into a separate config file and import it into your gulpfile at run time.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">/* gulp-config.js */</span></span>
<span class="highlight-line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  paths<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    sources<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      js<span class="token operator">:</span> <span class="token string">'src/js/**/*.js'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      docs<span class="token operator">:</span> <span class="token string">'src/jade/*.jade'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      pug<span class="token operator">:</span> <span class="token string">'src/pug/**/*.pug'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      stylus<span class="token operator">:</span> <span class="token string">'src/stylus/**/*.stylus'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      overwatch<span class="token operator">:</span> <span class="token string">'out/**/*.{html,js,css}'</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">    destinations<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      js<span class="token operator">:</span> <span class="token string">'out/js/'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">      css<span class="token operator">:</span> <span class="token string">'out/css/'</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span></code></pre>
<p>The nice thing is you won’t have to alter your tasks if you do something like</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">var</span> gulp       <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>‘gulp’<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  gConfig      <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>‘<span class="token punctuation">.</span><span class="token operator">/</span>gulp<span class="token operator">-</span>config’<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  sources      <span class="token operator">=</span> gConfig<span class="token punctuation">.</span>paths<span class="token punctuation">.</span>sources<span class="token punctuation">,</span></span>
<span class="highlight-line">  destinations <span class="token operator">=</span> gConfig<span class="token punctuation">.</span>paths<span class="token punctuation">.</span>destinations<span class="token punctuation">;</span></span></code></pre>
<h2>env Flag</h2>
<p>If you are familiar with <strong>gulp-util</strong> you may know this trick already. Using <strong>gulp-util</strong> you can set environment variables/flags for your tasks which enables you to do things like alter the default task set,change task behaviour or output location based on various flags.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'script::compile'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span>sources<span class="token punctuation">.</span>js<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'app.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span>destinations<span class="token punctuation">.</span>js<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">{</span>suffix<span class="token operator">:</span> <span class="token string">'.min'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span>destinations<span class="token punctuation">.</span>js<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>For an example, we have a task that compiles our script sources. Sometimes we want to see the stats for our output such as file size. Other times we may be compiling a distribution version of our source and therefore we want to output our compiled sources to a different destination. We do not want to repeat our task three times just to get the different behaviour. Using environment flags we can alter our task slightly but increase the lifting it is capable of.</p>
<p>We start by getting our flag values at runtime</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  gUtil  <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-util'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  isDist <span class="token operator">=</span> <span class="token punctuation">(</span>gUtil<span class="token punctuation">.</span>env<span class="token punctuation">.</span>dist<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  isStat <span class="token operator">=</span> <span class="token punctuation">(</span>gUtil<span class="token punctuation">.</span>env<span class="token punctuation">.</span>stat<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span></code></pre>
<p>Then we simply make use of those flags within our task</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'script::compile'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span>sources<span class="token punctuation">.</span>js<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'app.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>isStat <span class="token operator">?</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">{</span>showFiles<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> gUtil<span class="token punctuation">.</span><span class="token function">noop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span>isDist <span class="token operator">?</span> destinations<span class="token punctuation">.</span>dist<span class="token operator">:</span> destinations<span class="token punctuation">.</span>js<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">{</span>suffix<span class="token operator">:</span> <span class="token string">'.min'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>isStat <span class="token operator">?</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">{</span>showFiles<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> gUtil<span class="token punctuation">.</span><span class="token function">noop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span>isDist <span class="token operator">?</span> destinations<span class="token punctuation">.</span>dist<span class="token operator">:</span> destinations<span class="token punctuation">.</span>js<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>If a flag isn’t set we simply use <strong>gulp-util</strong>’s handy <strong>noop()</strong> function.</p>
<h2>DRY</h2>
<p>Most developers will be familiar with the DRY(don’t repeat yourself) principle. It will go without saying but is worth mentioning that your tasks in gulp should be as modular and generic as possible for your needs.</p>
<p>If two tasks do the same thing for the most part, look to extract the repetition into a dependant task or use flags to combine the tasks into one task.</p>
<h2>Knowing Your Plugins</h2>
<p>The ecosystem for gulp has grown immensely in the last 12 months. One of grunts selling points was the fact that it had a much more mature ecosystem of plugins as opposed to gulp.</p>
<p>I don’t feel this is the case now.</p>
<p>Plugins can be found for the majority of tasks. It’s worth searching the registry if there is something you’re looking for.</p>
<p>Notable plugins for myself are;</p>
<ul>
<li>Utilities — <em>gulp-util, gulp-tap, gulp-gh-pages, gulp-load-plugins</em></li>
<li>Compilation — <em>gulp-jade, gulp-coffee, gulp-stylus, gulp-less, gulp-sass</em></li>
<li>Optimisation — <em>gulp-autoprefixer, gulp-uglify, gulp-minify-css</em></li>
<li>Manipulation — <em>gulp-wrap, gulp-concat</em></li>
</ul>
<p>Where plugins don’t exist for what you want to do, there is normally a reason. One of the biggest reasons being that you can most likely get the desired behaviour from writing some JavaScript and using the relevant node packages inside of a task instead of a plugin. This is the power of gulp, being able to do what you want.</p>
<p>Two popular examples are the use of <strong>browser-sync</strong> or <strong>del</strong>. However, in these cases there are existing plugins. <strong>gulp-connect</strong> actually handles what you can do with <strong>browser-sync</strong> but is actually black listed as a supported plugin for the reason that it is seen as redundant. I’ll talk a little about this with regards to writing your own plugins.</p>
<h2>Loading Plugins</h2>
<p>If there is one plugin you need to know about it is <strong>gulp-load-plugins</strong>.</p>
<p>This plugin will lazy load your gulp plugins and enables you to go from writing this;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-util'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  jade <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-jade'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  coffee <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-coffee'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  stylus<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-stylus'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>to this;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  plugins <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-load-plugins'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>To invoke your plugins within tasks you simply prefix them with the variable you named the <strong>gulp-load-plugins</strong> plugin.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'markup::compile'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="highlight-line"><span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span>sources<span class="token punctuation">.</span>pug<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span><span class="token function">pug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span>destinations<span class="token punctuation">.</span>docs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>To rename a loaded plugin, you can define names within the <strong>gulp-load-plugins</strong> declaration. For example; renaming <strong>gulp-autoprefixer</strong> to <em><strong>prefix</strong></em>.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  plugins <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-load-plugins'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token string">'gulp-autoprefixer'</span><span class="token operator">:</span> <span class="token string">'prefix'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>This can then be extracted into our config file.</p>
<h2>Task Names and Prefixing/Suffixing</h2>
<p>Try and stick to a consistent and verbose naming standard for your tasks. Also, try and be generic with the names. I personally like to use suffixes and try to namespace tasks.</p>
<p>It’s likely the main types of source you will be dealing with are scripts, styles and markup. So name your tasks that way! 😀</p>
<p>This makes it easier for newcomers who just want to compile the scripts for example.</p>
<p>This</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'javascript'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">)</span></span></code></pre>
<p>could be written in various ways</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'compileJs'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">)</span></span></code></pre>
<p>And the list goes on… I personally try and stick to the following pattern;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>what <span class="token constant">I</span> am running a task on<span class="token operator">></span><span class="token operator">:</span><span class="token operator">&lt;</span>what the task is doing<span class="token operator">></span></span></code></pre>
<p>So if I’m compiling scripts;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'scripts:compile'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">...</span><span class="token punctuation">)</span></span></code></pre>
<p>Then if I’m watching or doing something else with them I just use that same pattern. It can make things a lot easier for newcomers and it’s just plain easier to remember/maintain.</p>
<p>At all costs <strong>PLEASE</strong> avoid using task names that include the preprocessor of choice in them if using one. This becomes hard to maintain if later down the line you decide that you no longer want to use it and want to change.</p>
<p>For example, I have several tasks using <code>less</code> and then I change to <code>sass</code> . I then need to go and change all instances where <code>less</code> was referenced. Save yourself the hassle from the start and use something like <code>styles:compile</code> 🎉</p>
<h2>Bonus: Writing Plugins and Plugin Politics</h2>
<p>Although not directly about using gulp I figured writing plugins for gulp was worth mentioning and the politics surrounding them.</p>
<p>There are some strong <a href="https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/guidelines.md">guidelines</a> to writing plugins for gulp. They can be seen <a href="https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/guidelines.md">here</a>.</p>
<p>Some will say that they are quite strict but it isn’t without reason. Gulp doesn’t want a polluted ecosystem of duplicated plugins or plugins that just wrap around current node packages. There is maintained gulp plugin blacklist concerned with this.</p>
<p>It is almost advised that in most cases writing a plugin is a last resort. If it can be done with node then you don’t need a plugin. However, there does seem to be a lot of politics around whether plugins are required or not and whether they should be blacklisted or not.</p>
<p>One example is <strong>gulp-connect</strong>. It’s a popular plugin that sets up a static livereload server. It is blacklisted because you can use express, livereload etc. directly. However, this isn’t as straight forward to set up for most people and I myself am guilty of using <strong>gulp-connect</strong> to save time. The alternative is to use <strong>browser-sync</strong> which is actually very easy to set up and behaves in the same way as <strong>gulp-connect</strong>. But, just because a plugin is blacklisted doesn’t mean you can’t use it.</p>
<p>Also, when do you draw the line at what should be made into a plugin? You could argue that the majority of even non blacklisted plugins could be written using node packages or with the use of other gulp plugins.</p>
<p>I recently wrote my own plugin — <strong>gulp-template-store</strong>.</p>
<p>It’s a plugin for taking HTML templates and generating a JST file of lodash templates for those templates. It was inspired by another plugin that does something similiar. However, that plugin hasn’t been maintained for over a year.</p>
<p>By the blacklist rules, my plugin should be blacklisted because of duplicate behaviour but hasn’t because I raised an issue putting across the case that mine is actively maintained.</p>
<p>But you could also argue that even then it should be blacklisted because templating files could be created with a combination of other plugins;</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  tmpl <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-template'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  tap <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-tap'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  sources <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    html<span class="token operator">:</span> <span class="token string">'src/html/**/*.html'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  destinations <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    templates<span class="token operator">:</span> <span class="token string">'./tmp/'</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  tmplNamespace <span class="token operator">=</span> <span class="token string">'tmpl'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">  tmplRoot <span class="token operator">=</span> <span class="token string">'src/html/'</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token comment">// A task when given a source of HTML files, will create a namespaced JST file of your templates.</span></span>
<span class="highlight-line">gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'templates:compile'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span>sources<span class="token punctuation">.</span>html<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>tmpl<span class="token punctuation">.</span><span class="token function">precompile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">var</span> tmplStr <span class="token operator">=</span> <span class="token string">'"&lt;%= name %>": &lt;%= contents %>,'</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        fName <span class="token operator">=</span> file<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>tmplRoot<span class="token punctuation">)</span> <span class="token operator">+</span> tmplRoot<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="highlight-line">        newCont <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span>tmplStr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span> fName<span class="token punctuation">,</span> contents<span class="token operator">:</span> file<span class="token punctuation">.</span>contents<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">      file<span class="token punctuation">.</span>contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span>newCont<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'templates.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">'var '</span> <span class="token operator">+</span> tmplNamespace <span class="token operator">+</span> <span class="token string">' = {&lt;%= contents %>};'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span>destinations<span class="token punctuation">.</span>templates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>It’s not the prettiest, but that would actually achieve the same result almost with some tweaking of the options. It makes our gulpfile messy though and we want it to be easily comprehensible by other developers that may use it.</p>
<p>This is where I think it’s hard to say when a plugin should be blacklisted or not. Some tasks will be simple to write with node packages or a combination of gulp plugins but your tasks should remain easy to read and understand.</p>
<p>My advice would be that in most cases there is going to be a plugin already available for your needs and if not there is most likely a node package ready and waiting. I wrote <strong>gulp-template-store</strong> as I wanted to learn how to write a plugin and for me I think it is certainly easier to use than writing a large task as above.</p>
<h2>Summary</h2>
<p>It has been over a year since I started using gulp and it has shown no signs of letting me down. I’m still picking up new things I can do with it but that’s the beauty of gulp in that it has no real restrictions on what you can do.</p>
<p>Some of the tips and tricks mentioned should help you to put together a more powerful and comprehensible gulpfile for your projects.</p>
<p>Be sure to check out the <strong><a href="https://github.com/jh3y/gulp-boilerplate">gulp-boilerplate</a></strong> I’ve put together if you’d like a starting point.</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Pixels vs Rems</title>
    <link href="https://jhey.dev/writing/pixels-vs-rems/"/>
    <updated>2015-03-31T13:28:02+01:00</updated>
    <id>https://jhey.dev/writing/pixels-vs-rems/</id>
    <content type="html"><![CDATA[
      <blockquote>
<p>What to use when sizing typography 🖋</p>
</blockquote>
<p>As far as I can remember I have used pixelsor percentages for my front end development styling. The choice usually boils down to what the designer has decided to go with (a mix of both).</p>
<p>Responsive design is now becoming standard in a lot of designs and we tend to utilise percentages more and more for sizing elements in our applications. But how should we size our typography? Percentages will work on font sizing but in my opinion it’s not a clean solution (behaves similar to <code>em</code>). An alternative would be to consider using another unit such as <code>rem</code> or <code>em</code>.</p>
<p><strong>TL;DR</strong> there is no right or wrong. Personally, I wouldn’t start sizing elements on the page using <code>rem</code> 😅 But for typography they can take some heavy lifting away when working with responsive designs. Consider developing with pixels and deploying rems potentially.</p>
<h2>Options</h2>
<h3>Pixels</h3>
<p>Most of you reading this will be familiar with pixels. Pixels are the most common unit. They have good support and designers and developers are comfortable with them. One myth about pixels is that they equate to one physical pixel on your device. This isn’t always true. Devices evolve and this was only true for devices with a <code>96dpi</code> screen. In fact you can read up on it <a href="http://www.w3.org/TR/CSS2/syndata.html#x40">here</a>.</p>
<h3>Percentage/Ems</h3>
<p>I’ve put percentage and ems together as they behave similarly. These units allow relative scaling. But they both have a cascading nature which can become exceptionally problematic down the line 😰</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">html</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>In most browsers, the base font size is <code>16px</code>. This means that</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token property">font-size</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span> == 16px</span>
<span class="highlight-line"><span class="token property">font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span> == 32px</span>
<span class="highlight-line"><span class="token property">font-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> == 16px</span>
<span class="highlight-line"><span class="token property">font-size</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span> == 32px</span></code></pre>
<p>This seems great because now if I change the base font size, my typography will scale accordingly. This is true with relatively small layouts but if the <code>DOM</code> starts getting a little complex along with our styling rules, the nasty cascading nature mentioned above will come into play.</p>
<p>The cascading behaviour means that when nesting <code>em</code>/<code>percentage</code> declarations, the parent element styling is taken into account as relative and therefore it’s hard to keep a true grasp of the different sizes.</p>
<p>For an example,</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">html</span> <span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">div</span> <span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">div li</span> <span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> 1.2em<span class="token punctuation">;</span><span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token selector">div li a</span> <span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> 1.2em<span class="token punctuation">;</span><span class="token punctuation">}</span></span></code></pre>
<p>Nested elements in this example will become bigger than their parent 👎</p>
<h3>Points</h3>
<p><code>pt</code> is worth mentioning but you should not be using it. The only exemption being when you are creating a print stylesheet. <code>pt</code> sizing relates to actual physical paper size. But the size of 1 <code>pt</code> can differ from browser to browser.</p>
<p>Yes. I understand that design tooling uses <code>pt</code> by default. But that does not mean you should use it. In fact, it’s recommended you don’t.</p>
<p>Taken from <code>w3.org</code> (<a href="https://www.w3.org/Style/Examples/007/units.en.html">here</a>)</p>
<blockquote>
<p>CSS inherited the units <code>pt</code> (point) and <code>pc</code> (pica) from typography. Printers have traditionally used those and similar units in preference to <code>cm</code> or <code>in</code>. In CSS there is no reason to use <code>pt</code>, use whichever unit you prefer. But there <em>is</em> a good reason to use <em>neither</em> <code>pt</code> <em>nor any other absolute unit</em> and only use <code>em</code> and <code>px</code>.</p>
<p>The only place where you could use <code>pt</code> (or <code>cm</code> or <code>in</code>) for setting a font size is in style sheets for print, if you need to be sure the printed font is exactly a certain size. But even there using the default font size is usually better.</p>
</blockquote>
<h3>Rems</h3>
<p>Rems came in <code>CSS3</code> and are like <code>em</code>s cooler brother that was late to the party 😎 They work in a similar nature to <code>em</code>s but there is no cascading issue… Hurrah! 🎉</p>
<pre class="language-css"><code class="language-css"><span class="highlight-line"><span class="token selector">html</span> <span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span><span class="token punctuation">}</span></span>
<span class="token selector">div</span> <span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">== 16px
<span class="highlight-line">div li</span> <span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector">== 32px</span>
div li a</span> <span class="token punctuation">{</span><span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span><span class="token punctuation">}</span> == 32px</code></pre>
<p>Changing your base font size will relatively scale typography app/site wide. rems ignore their parents and only listen to the root font size 👍</p>
<p>I’ve put together a similar example as above <a href="http://jsbin.com/gusapehebo/2/edit?html,css,output">here</a>.</p>
<h2>What should I use?</h2>
<p>You are free to use whatever you feel comfortable with (just don’t use <code>pt</code>).</p>
<p>For me personally, it really comes down to <code>px</code> and <code>rem</code>. The other units pose too many problems down the line especially with complex <code>DOM</code> structures and designs.</p>
<p>Pixels seems like the easiest option. They are also easier to communicate. But, <code>rem</code> does have the advantage of easier maintenance/scalability. Especially if the client turns around later and says “I want to see all the fonts a little bigger actually…” 🤦‍♂</p>
<p>Developing with pixels and opting for post compilation transforms will be best. That way dropping/opting in for <code>rem</code> is much easier to maintain. Be sure to check out <code>PostCSS</code>!</p>
<h2>Using rems to size everything?</h2>
<p>All the measuring units mentioned in this article are valid units of measurement. You can use them to size elements in your applications. I would stick to using pixels, percentages or viewport units for sizing your elements. Using measurement units relative to font size is likely to cause maintenance nightmares.</p>
<h2>Summary</h2>
<p>There are many decisions to make when creating your applications. Sizing style is something that can be often overlooked. Whichever measurement unit you opt for, remember there is no right or wrong. rem, px or a combination of the two are most likely to be your best bet. Sticking with pixels will be fine as many modern browsers support zoom functionality. The use of pixels will most likely never be obsolete. The benefit of rem will of course be the ability to change font size globally with ease.</p>
<p>Consider trying rems in your next project with some of the techniques I’ve mentioned above!</p>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Throttling and Debouncing in JavaScript</title>
    <link href="https://jhey.dev/writing/throttling-and-debouncing-in-javascript/"/>
    <updated>2015-02-03T03:07:01+00:00</updated>
    <id>https://jhey.dev/writing/throttling-and-debouncing-in-javascript/</id>
    <content type="html"><![CDATA[
      <p>Tackling performance often crops up in JavaScript applications.</p>
<p>Throttling and debouncing give us control over the rate at which a function is called. They are need to know techniques for any web developer. They are especially useful when we are dealing with event handler assignments. There are scenarios where we may invoke functions when it isn’t necessary. Consider a callback that we want to execute on window resize. Does it make sense to fire the callback as we resize? Most likely not. We want to wait til the user has finished interaction and then fire the callback.</p>
<p>For those in camp <strong>TL;DR</strong>, here’s a demo!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="mGVGvm"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/mGVGvm">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<h2>What’s the difference between throttling and debouncing?</h2>
<ul>
<li><strong>Throttling —</strong> If you think of a car throttle. The amount you push your foot down limits the amount of gas going into the engine. In this context, we want to limit the amount a function is invoked. I find a better analogy to be either the lottery, only one ball is drawn every five seconds. Or a better analogy being ordering drinks at a bar. You go to a bar and the barman has a policy of only allowing you to order a drink every 45 minutes (Or things get crazy). You order a drink in the first minute and they hand one over. You then try and order one every minute after. The barman denies you until the 45th minute when the then tired barman hands over the next drink. You won’t get another drink for another 45 minutes. With throttling, you may want one last invocation to happen after the throttle is over. This will be one of the denied invocations. Imagine you order a drink in the 15th minute and get denied. In the 45th minute, you don’t order but the barman sends a waiter over with the drink from that 15th minute order. They feel sorry for you 😁</li>
<li><strong>Debouncing —</strong> Debouncing works a little different. It can be a little harder to explain. With debouncing, it’s like “Hey, I’m not going to execute that function until I know there are no more changes inbound”. We don’t execute our function until everyone else is happy and we’re clear to proceed. Imagine ordering food at a restaurant. You start listing off items to the waiter/waitress and at the end they ask “Is that everything?” If it is, they leave you to it and go get your food and drinks. If it isn’t, you add to the order and then they ask you again until they are clear to proceed.</li>
</ul>
<p>Here’s a throttle and debounce visualisation demo which may aid with understanding. Move your mouse or finger around to start throttling and debouncing an event handler 👍</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="mGVGvm"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/mGVGvm">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Diamonds represent throttled function calls. Circles represent debounced function calls.</p>
<h2>Example use cases</h2>
<ul>
<li>Throttling a button click so we can’t spam click</li>
<li>Throttling an API call</li>
<li>Throttling a <code>mousemove</code>/<code>touchmove</code> event handler</li>
<li>Debouncing a <code>resize</code> event handler</li>
<li>Debouncing a <code>scroll</code> event handler</li>
<li>Debouncing a save function in an autosave feature</li>
</ul>
<p>Let’s consider an example for each. Throttling is likely used less than debouncing. More often than not, when you consider throttle use, you may be better with debounce. If you have a good use case for throttling, please let me know!</p>
<p>For throttling, let’s consider that first use case, stopping click spamming. We have a button in our app that when clicked, makes an API call of some kind. Let’s say to enter a competition. With throttling we can restrict the amount the API would get hit. The user may be clicking 20 times a second but we only fire the handler once per second.</p>
<p>For debouncing, let’s consider the auto save feature. Auto save tries to save the state of the application every time the user makes an update or interacts. We can debounce the save until a user hasn’t made any updates or interacted for a set period of time. That way we don’t spam the save function and make unnecessary saves. This will help performance.</p>
<h2><em>Implementing throttle and debounce</em></h2>
<p>There are various implementations of <code>throttle</code> and <code>debounce</code>. The majority will achieve the same goal. Their implementations revolve around the use of <code>setTimeout</code>.</p>
<p>For those in camp <strong>TL;DR</strong> who just want a demo, I’ve got you covered 😎</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="opNYWy"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/opNYWy">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>In this demo, the function is debounced and throttled by <code>2000ms</code> and <code>3000ms</code> respectively.</p>
<h3><em>Debounce</em></h3>
<p>Debounce is the simpler of the two to implement.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">let</span> inDebounce</span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> args <span class="token operator">=</span> arguments</span>
<span class="highlight-line">    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>inDebounce<span class="token punctuation">)</span></span>
<span class="highlight-line">    inDebounce <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We are passing a function(<code>func</code>) and a delay(<code>delay</code>) into the debounce function. <code>inDebounce</code> is a variable that we use to track the delay period.</p>
<p>If we are invoking for the first time, our function will execute at the end of our delay. If we invoke and then invoke again before the end of our delay, the delay restarts. It’s much easier to understand by reading the code and playing with the demo 😉.</p>
<p>Here’s how that <code>debounce</code> looks in action.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">debounceBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Hey! It is'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>In this example we are debouncing the call by 3 seconds at which point we print the date.</p>
<h3>Throttle</h3>
<p>Throttle can be a little taxing as its desired behaviour has different interpretations. Let’s start by limiting the rate at which we execute a function.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> limit</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">let</span> inThrottle</span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> args <span class="token operator">=</span> arguments</span>
<span class="highlight-line">    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inThrottle<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span></span>
<span class="highlight-line">      inThrottle <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="highlight-line">      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> inThrottle <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The first call to our function will execute and sets the limit period <code>inThrottle</code>. We can call our function during this period but it will not fire until the <code>throttle</code> period has passed. Once it has passed, the next invocation will fire and the process repeats.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">throttleBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hey! It is'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>But what about our last call? If it’s in the limit period it’s ignored and what if we don’t want that? For example, if we bound to mouse movement for a resize and missed the last call we’d never get the desired result. We need to catch this and execute it after the limit period (<em>Thanks to <a href="https://medium.com/u/d867200d89a8?source=post_page-----b01cad5c8edf--------------------------------">worldwar</a> for questioning the previous implementation which didn’t always work</em> <code>100%</code> <em>as expected</em>).</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> limit</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">let</span> lastFunc</span>
<span class="highlight-line">  <span class="token keyword">let</span> lastRan</span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="highlight-line">    <span class="token keyword">const</span> args <span class="token operator">=</span> arguments</span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastRan<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span></span>
<span class="highlight-line">      lastRan <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>lastFunc<span class="token punctuation">)</span></span>
<span class="highlight-line">      lastFunc <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastRan<span class="token punctuation">)</span> <span class="token operator">>=</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">          <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span></span>
<span class="highlight-line">          lastRan <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="highlight-line">        <span class="token punctuation">}</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span> limit <span class="token operator">-</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastRan<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This implementation ensures that we catch and execute that last invocation. We also invoke it at the correct time. We do this by creating a variable <code>lastRan</code> which is a timestamp of the last invocation. We can then use this to determine if the last invocation took place within the <code>throttle</code> limit. We can also use <code>lastRan</code> to determine whether the throttled function has ran at all. This makes the previous variable <code>inThrottle</code> redundant.</p>
<p>One way to think about this implementation of <code>throttle</code> is like a chaining <code>debounce</code>. Each time the <code>debounce</code> waiting period lessens.<br>
<code>throttle</code> has some interesting possibilities. For example, you could store all the ignored executions and run them all at the end in order.</p>
<h2>To Conclude</h2>
<p>Throttling and debouncing the execution of your functions are need to know techniques. They can significantly improve the performance of your applications.</p>
<p>Have a play around with the demos!</p>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="mGVGvm"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/mGVGvm">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p
        class="codepen"
        data-theme-id="dark"
        data-default-tab="result"
        data-user="jh3y"
        data-slug-hash="opNYWy"
        data-preview="true"
        data-editable="true"
        >
        <span>
          Check out <a href="https://codepen.io/jh3y/pen/opNYWy">this pen</a> by Jhey (<a href="https://codepen.io/jh3y">@jh3y</a>)
          on <a href="https://codepen.io">CodePen</a>.</span>
      </p>
      <script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

    ]]></content>
  </entry>
  
  
  <entry>
    <title>Dealing with Mega Data in AngularJS</title>
    <link href="https://jhey.dev/writing/dealing-with-mega-data-in-angularjs/"/>
    <updated>2014-11-05T07:18:00+00:00</updated>
    <id>https://jhey.dev/writing/dealing-with-mega-data-in-angularjs/</id>
    <content type="html"><![CDATA[
      <p>A while back I reflected on performance issues when using angular and proposed solutions in order to overcome them.</p>
<p>One of the main performance issues that arises when using angular is the overuse of <strong>ng-repeat</strong>. An issue that is particularly noticeable when dealing with large datasets that are being rendered in a tabular style.</p>
<p>Some might opt for the simplest solution of using <strong>ng-repeat</strong>. An example might be</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token operator">&lt;</span>table<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span>tr ng<span class="token operator">-</span>repeat<span class="token operator">=</span><span class="token string">"item in items"</span><span class="token operator">></span></span>
<span class="highlight-line">    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span></span>
<span class="highlight-line">  <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span></span>
<span class="highlight-line"><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span></span></code></pre>
<p>which could be fine with a small amount of data. But, if we start dealing with datasets that consist of hundreds of items, we are going to hit issues. The problem arises because of angulars dirty checking solution. In layman’s terms, with each new table row, angular is gaining more things to be watched and observed. The more things that need to be checked and observed the slower our application will become until it becomes unusable.</p>
<h2>So what’s the solution then?</h2>
<p>The solution is to make use of directives. Using directives we can interact directly with the DOM and make use of quick DOM manipulations whilst also ridding angular of the burden of unnecessary watches.</p>
<p><strong>For those in camp TL;DR —</strong> I have put together a directive “<em><strong>ng-mega-table”</strong></em>, which can be grabbed from <a href="https://github.com/jh3y/ng-mega-table">here</a>. In the repo you’ll find code and a runnable demo so you can run with datasets consisting of 1000s of items.</p>
<h2><strong>ng-mega-table: The directive solution</strong></h2>
<p>What makes for a simple solution is to make a directive that allows us to interact with the DOM directly. The biggest hurdle with this approach is being able to generate a large amount of dynamic markup given a dataset that will generate both the head and body content of our table. The solution is to use a templating framework such as Handlebars along with javascript techniques such as event delegation.</p>
<p>The best thing to do is to take a look at some of the code in the <a href="http://github.com/jh3y/ng-mega-table">repo</a>. But, below are some more details of the main features that make the directive approach possible.</p>
<h3>Templating with Handlebars.js</h3>
<p>Using a minimal templating library such as <em>Handlebars.js</em> allows us to rapidly template incoming data against predefined templates and produce markup for our tables content.</p>
<p>Here is the function for rendering the table body</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token function-variable function">renderTBody</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">var</span> $tbody<span class="token punctuation">,</span> $tbodyTemplate<span class="token punctuation">;</span></span>
<span class="highlight-line">  $tbody <span class="token operator">=</span> $elem<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'tbody'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  $tbodyTemplate <span class="token operator">=</span> Handlebars<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>$templateCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'ngMegaTableBody.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  $scope<span class="token punctuation">.</span><span class="token function">$apply</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">return</span> $tbody<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;h4>No data currently available&lt;/h4>'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      opts<span class="token punctuation">.</span>items <span class="token operator">=</span> data<span class="token punctuation">;</span></span>
<span class="highlight-line">      <span class="token keyword">return</span> $tbody<span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token function">$tbodyTemplate</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> $scope<span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span></code></pre>
<p>Data is passed in and the resulting markup that is created replaces the current table body.</p>
<p>You may also notice that instead of storing our Handlebars templates within HTML files, we can actually make use of angulars <strong>$templateCache</strong> and store them craftily within our Javascript meaning no requests having to be made. This makes it quite nice and clean when packaging our directive into a module.</p>
<h3>When to update table content</h3>
<p>So, how do we know when to update our table content? Instead of watching for data changes. It’s much better for performance if we trigger our update based on an event being fired.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>changeEvent <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'ngMegaTable: no data change event defined'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  $scope<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>changeEvent<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">return</span> <span class="token function">renderTBody</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Here we define that our directive will listen for a change event being fired and on the event being fired, pass event data into our previously mentioned table body rendering function.</p>
<p>This event would be fired from wherever we are making changes to data. In this example, I make use of <strong>$rootScope.$broadcast</strong>. The following code is from a demo controller.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">$scope<span class="token punctuation">.</span>data <span class="token operator">=</span> DataSrv<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">$rootScope<span class="token punctuation">.</span><span class="token function">$broadcast</span><span class="token punctuation">(</span><span class="token string">'data:changed'</span><span class="token punctuation">,</span> $scope<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<h3>Event handling with delegation</h3>
<p>Let’s say we want to add actions to the rows in our table. Adding event listeners to each individual row could be costly. Instead, we can actually make use of event delegation. Instead of adding event listeners to each row of our table, we have one simple event listener for our table that on click checks the click event target.</p>
<p>For the example directive I have gone for a generic solution. Therefore I am actually iterating over the directives table options to determine what event targets should trigger which events.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">$elem<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>columns<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">column<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>column<span class="token punctuation">.</span>type <span class="token operator">&amp;&amp;</span> column<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'action'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>target <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>target <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span>selector<span class="token punctuation">)</span> <span class="token operator">||</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span>selector<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="highlight-line">        <span class="token keyword">return</span> opts<span class="token punctuation">.</span>actions<span class="token punctuation">[</span>column<span class="token punctuation">.</span>action<span class="token punctuation">]</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span>actionParamsAttribute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line">      <span class="token punctuation">}</span></span>
<span class="highlight-line">    <span class="token punctuation">}</span></span>
<span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<h3>Making a generic solution</h3>
<p>A generic solution isn’t the clearest and you’d most likely be best tweaking the directive to your own needs with statically defined templates. However, it is possible and could be fine with smaller examples.</p>
<hr>
<h2>Final thoughts</h2>
<p>Dealing with large data sets in angular isn’t taxing but can be problematic in terms of performance. The use of directives provides an effective solution for dealing with large data sets. I ran the demo with datasets in excess of 10,000 items and it rendered without issue.</p>
<p>Initially, I required directives to combat performance in older browsers such as IE8. But I would recommend this approach regardless of the browser or device being viewed on as it will speed up your application. In experience, I’ve seen noticeable improvements on devices too.</p>

    ]]></content>
  </entry>
  
</feed>